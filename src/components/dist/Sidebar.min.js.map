{"version":3,"sources":["Sidebar.tsx"],"names":["react_1","require","react_bootstrap_1","react_collapsible_1","mathjs_1","stats_module_1","Constant","react_csv_1","xml_writer_1","headers","label","key","Sidebar","_super","props","_this","call","this","state","nodeData","edgeData","nodeCount","edgeCount","laplacian","sparse","adjacencyMatrix","e","jsonFormat","runBenchmark","FPSData","handleSubmit","bind","readFiles","generateRandomGraph","generatePair","generateRandomData","refresh","runTest","testFunc","sleep","storeFPSResult","__extends","prototype","event","preventDefault","setNodeEdgeData","time","Promise","resolve","setTimeout","edgeCounts","nodeCounts","map","n","stats","showPanel","dom","setAttribute","document","body","appendChild","setState","renderingCanvas","querySelectorAll","width","height","style","i","nCount","toString","eCount","data","nodes","edges","_a","sent","min","max","randRange","Math","floor","random","source","target","stepCount","Array","fill","pair","edgeHashMap","Map","has","set","length","nodeLength","edgeLength","fps","__spreadArrays","console","log","refreshing","begin","end","requestId","requestAnimationFrame","TIME_FOR_EACH_TEST","FPS_Array","getFPSHistory","FPS","pop","cancelAnimationFrame","files","nodeIDToValue","nodeIDToIndex","degreeMatrix","edgeReader","FileReader","onload","_i","edgeRaw_1","result","split","parts","push","subtract","layoutReader","layoutData_1","parseFloat","j","readAsText","nodeReader","rawNodes_1","element","readJson","jsonReader","graph","JSON","parse","x","y","applySpectral","eigs","column","vectors","x_max","y_max","x_min","y_min","get","onSaveXML","xw","startDocument","startElement","writeAttribute","endElement","endDocument","createElement","file","Blob","type","href","URL","createObjectURL","download","click","render","className","Button","onClick","margin","color","CSVLink","Form","onSubmit","Group","controlId","Check","defaultChecked","Label","Control","multiple","onChange","variant","value","trigger","defaultValue","setWidthFactor","step","setPeakValue","setValleyValue","setGlobalRange","Row","setColorValley","setColorHill","setColorMountain","toggleTerrainLayer","toggleNodeLayer","toggleEdgeLayer","setIdealLength","setCoolingFactor","onSave","runForceDirected","Component","exports"],"mappings":"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","file":"Sidebar.min.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { Matrix, matrix, subtract, eigs, column, min, max, index, sparse } from 'mathjs';\r\nimport Stats from \"../libs/stats.module\";\r\nimport * as Constant from \"../constant\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport XMLWriter from \"xml-writer\";\r\n\r\nconst headers = [\r\n  { label: \"Node\", key: \"Node\" },\r\n  { label: \"Edge\", key: \"Edge\" },\r\n  { label: \"FPS\", key: \"FPS\" },\r\n];\r\n\r\ntype SidebarProps = {\r\n  setNodeEdgeData: (nodeData: Array<number>, edgeData: Array<number>) => void;\r\n  setWidthFactor: (widthFactor: number) => void;\r\n  setPeakValue: (value: number) => void;\r\n  setValleyValue: (value: number) => void;\r\n  setCoolingFactor: (value: number) => void;\r\n  setIdealLength: (value: number) => void;\r\n  setColorValley: (value: number) => void;\r\n  setColorHill: (value: number) => void;\r\n  setColorMountain: (value: number) => void;\r\n  setGlobalRange: () => void;\r\n  toggleNodeLayer: () => void;\r\n  toggleTerrainLayer: () => void;\r\n  toggleEdgeLayer: () => void;\r\n  runForceDirected: () => void;\r\n  onSave: () => void;\r\n};\r\ntype SidebarState = {\r\n  nodeData: Array<number>;\r\n  edgeData: Array<number>;\r\n  laplacian: Matrix;\r\n  adjacencyMatrix: Array<Array<number>>;\r\n  e: {};\r\n  nodeCount: string;\r\n  edgeCount: string;\r\n  runBenchmark: boolean;\r\n  jsonFormat: boolean;\r\n  FPSData: Array<Array<string>>;\r\n};\r\ntype edge = {\r\n  source: number;\r\n  target: number;\r\n};\r\ntype node = {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n};\r\ntype Graph = {\r\n  nodes: Array<node>;\r\n  edges: Array<edge>;\r\n};\r\nclass Sidebar extends React.Component<SidebarProps, SidebarState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodeData: [],\r\n      edgeData: [],\r\n      nodeCount: \"\",\r\n      edgeCount: \"\",\r\n      laplacian: sparse([]),\r\n      adjacencyMatrix: [],\r\n      e: {},\r\n      jsonFormat: true,\r\n      runBenchmark: false,\r\n      FPSData: [],\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.readFiles = this.readFiles.bind(this);\r\n    this.generateRandomGraph = this.generateRandomGraph.bind(this);\r\n    this.generatePair = this.generatePair.bind(this);\r\n    this.generateRandomData = this.generateRandomData.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n    this.runTest = this.runTest.bind(this);\r\n    this.runBenchmark = this.runBenchmark.bind(this);\r\n    this.testFunc = this.testFunc.bind(this);\r\n    this.sleep = this.sleep.bind(this);\r\n    this.storeFPSResult = this.storeFPSResult.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n  }\r\n\r\n  sleep(time) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, time);\r\n    });\r\n  }\r\n\r\n  async runBenchmark(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const nodeCounts = [1e2, 5e2, 1e3, 2e3, 5e3, 1e4, 2e4, 5e4, 1e5, 2e5, 1e6];\r\n    const density = 20;\r\n    const edgeCounts = nodeCounts.map((n) => n * density);\r\n    let stats = Stats();\r\n    stats.showPanel(0);\r\n    stats.dom.setAttribute(\"class\", \"status\");\r\n    document.body.appendChild(stats.dom);\r\n    this.setState({ runBenchmark: true });\r\n    let renderingCanvas = document.querySelectorAll(\"canvas\")[0];\r\n    renderingCanvas.width = 500;\r\n    renderingCanvas.height = 500;\r\n    renderingCanvas.style.width = \"500px\";\r\n    renderingCanvas.style.height = \"500px\";\r\n    // const testCase = {\r\n    //   nodeCounts,\r\n    //   edgeCounts,\r\n    // };\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n      // let stepCount = 0;\r\n      const nCount = nodeCounts[i].toString();\r\n      const eCount = edgeCounts[i].toString();\r\n\r\n      this.setState({ nodeCount: nCount });\r\n      this.setState({ edgeCount: eCount });\r\n\r\n      let data = this.generateRandomData(nodeCounts, edgeCounts, i);\r\n      this.setState({ nodeData: data.nodes });\r\n      this.setState({ edgeData: data.edges });\r\n      // this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n      await this.testFunc(data, stats);\r\n    }\r\n\r\n    this.setState({ runBenchmark: false });\r\n    renderingCanvas.width = 800;\r\n    renderingCanvas.height = 800;\r\n    renderingCanvas.style.width = \"800px\";\r\n    renderingCanvas.style.height = \"800px\";\r\n  }\r\n\r\n  generatePair(min, max) {\r\n    function randRange(min, max) {\r\n      return min + Math.floor(Math.random() * (max - min));\r\n    }\r\n    const source = randRange(min, max);\r\n    let target = randRange(min, max);\r\n    while (source === target) {\r\n      target = randRange(min, max);\r\n    }\r\n    return {\r\n      source: source,\r\n      target: target,\r\n    };\r\n  }\r\n\r\n  generateRandomData(nodeCounts, edgeCounts, stepCount) {\r\n    let nodeCount = nodeCounts[stepCount];\r\n    let edgeCount = edgeCounts[stepCount];\r\n\r\n    let generatedData = this.generateRandomGraph(nodeCount, edgeCount);\r\n    return generatedData;\r\n  }\r\n\r\n  generateRandomGraph(nodeCount, edgeCount) {\r\n    var nodes: Array<number> = [];\r\n    var edges: Array<number> = [];\r\n    const data = {\r\n      nodes: nodes,\r\n      edges: edges,\r\n    };\r\n\r\n    data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n    for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n      data.nodes[i] = 0;\r\n      data.nodes[i + 1] = Math.random();\r\n      data.nodes[i + 2] = Math.random();\r\n      data.nodes[i + 3] = 1;\r\n    }\r\n    const edgeHashMap = new Map();\r\n\r\n    data.edges = Array(2 * edgeCount).fill(0);\r\n    let pair;\r\n\r\n    for (let i = 0; i < 2 * edgeCount; i = i + 2) {\r\n      do {\r\n        pair = this.generatePair(0, nodeCount);\r\n      } while (edgeHashMap.has(`${pair.source}_${pair.target}`));\r\n      edgeHashMap.set(`${pair.source}_${pair.target}`, true);\r\n      edgeHashMap.set(`${pair.target}_${pair.source}`, true);\r\n      data.edges[i] = pair.source;\r\n      data.edges[i + 1] = pair.target;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  refresh(length) {\r\n    var nodes: Array<number> = [];\r\n    for (let i = 0; i < 4 * length; i = i + 4) {\r\n      nodes[i + 1] = Math.random();\r\n      nodes[i + 2] = Math.random();\r\n    }\r\n    this.setState({ nodeData: nodes });\r\n    this.props.setNodeEdgeData(nodes, this.state.edgeData);\r\n  }\r\n\r\n  storeFPSResult(nodeLength, edgeLength, fps) {\r\n    nodeLength = nodeLength.toString();\r\n    edgeLength = edgeLength.toString();\r\n    fps = fps.toString();\r\n\r\n    this.setState({\r\n      FPSData: [...this.state.FPSData, [nodeLength, edgeLength, fps]],\r\n    });\r\n    console.log(this.state.FPSData);\r\n  }\r\n\r\n  async testFunc(data, stats) {\r\n    let nodeLength = data.nodes.length / 4;\r\n    let edgeLength = data.edges.length / 2;\r\n    await this.runTest(nodeLength, edgeLength, stats);\r\n  }\r\n\r\n  async runTest(nodeLength, edgeLength, stats) {\r\n    let requestId;\r\n    const refreshing = () => {\r\n      stats.begin();\r\n      this.refresh(nodeLength);\r\n      stats.end();\r\n      requestId = requestAnimationFrame(refreshing);\r\n    };\r\n    refreshing();\r\n    await this.sleep(Constant.TIME_FOR_EACH_TEST);\r\n    let FPS_Array = stats.getFPSHistory();\r\n    console.log(FPS_Array);\r\n    let FPS = FPS_Array.pop();\r\n\r\n    this.storeFPSResult(nodeLength, edgeLength, FPS);\r\n    cancelAnimationFrame(requestId);\r\n    return;\r\n  }\r\n  readFiles(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    console.log(files);\r\n    var nodeIDToValue = {};\r\n    // var nodeIDToPos = {};\r\n    var nodeIDToIndex = {};\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    var degreeMatrix: Array<Array<number>> = [];\r\n    var adjacencyMatrix: Array<Array<number>> = [];\r\n    const edgeReader = new FileReader();\r\n    edgeReader.onload = (event) => {\r\n      var edgeRaw = (edgeReader.result as string).split(\"\\n\");\r\n      for (var element of edgeRaw) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]] && nodeIDToValue[parts[1]]) {\r\n          edgeData.push(nodeIDToIndex[parts[0]], nodeIDToIndex[parts[1]]);\r\n          degreeMatrix[nodeIDToIndex[parts[0]]][nodeIDToIndex[parts[0]]] += 1;\r\n          degreeMatrix[nodeIDToIndex[parts[1]]][nodeIDToIndex[parts[1]]] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[0]]][\r\n            nodeIDToIndex[parts[1]]\r\n          ] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[1]]][\r\n            nodeIDToIndex[parts[0]]\r\n          ] += 1;\r\n        }\r\n      }\r\n      this.setState({ edgeData: edgeData });\r\n      var laplacian: Matrix = subtract(\r\n        sparse(degreeMatrix),\r\n        sparse(adjacencyMatrix)\r\n      ) as Matrix;\r\n      console.log(laplacian);\r\n      this.setState({ laplacian: laplacian, adjacencyMatrix: adjacencyMatrix });\r\n    };\r\n    const layoutReader = new FileReader();\r\n    layoutReader.onload = (event) => {\r\n      var layoutData = (layoutReader.result as string).split(\"\\n\");\r\n      for (var element of layoutData) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]]) {\r\n          nodeIDToIndex[parts[0]] = nodeData.length / 4;\r\n          // Pushes values to node data in order of struct for WebGPU:\r\n          // nodeValue, nodeX, nodeY, nodeSize\r\n          nodeData.push(\r\n            parseFloat(nodeIDToValue[parts[0]]),\r\n            parseFloat(parts[1]),\r\n            parseFloat(parts[2]),\r\n            parseFloat(parts[3])\r\n          );\r\n          // nodeIDToPos[parts[0]] = [parseFloat(parts[1]) * 2.0 - 1, parseFloat(parts[2]) * 2.0 - 1];\r\n        }\r\n      }\r\n      this.setState({ nodeData: nodeData });\r\n      for (var i = 0; i < nodeData.length / 4; i++) {\r\n        degreeMatrix.push([]);\r\n        adjacencyMatrix.push([]);\r\n        for (var j = 0; j < nodeData.length / 4; j++) {\r\n          degreeMatrix[i].push(0);\r\n          adjacencyMatrix[i].push(0);\r\n        }\r\n      }\r\n      edgeReader.readAsText(files[2]);\r\n    };\r\n    const nodeReader = new FileReader();\r\n    nodeReader.onload = (event) => {\r\n      var rawNodes = (nodeReader.result as string).split(\"\\n\");\r\n      for (var element of rawNodes) {\r\n        nodeIDToValue[element.split(\"\\t\")[0]] = element.split(\"\\t\")[1];\r\n      }\r\n      console.log(nodeIDToValue);\r\n      layoutReader.readAsText(files[1]);\r\n    };\r\n    nodeReader.readAsText(files[0]);\r\n  }\r\n\r\n  readJson(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    const jsonReader = new FileReader();\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    jsonReader.onload = (event) => {\r\n      var graph: Graph = JSON.parse(jsonReader.result as string);\r\n      console.log(graph);\r\n      for (var i = 0; i < graph.nodes.length; i++) {\r\n        if (graph.nodes[i].x) {\r\n          nodeData.push(0.0, graph.nodes[i].x, graph.nodes[i].y, 1.0);\r\n        } else {\r\n          nodeData.push(0.0, Math.random(), Math.random(), 1.0);\r\n        }\r\n      }\r\n      for (var i = 0; i < graph.edges.length; i++) {\r\n        var source = graph.edges[i].source;\r\n        var target = graph.edges[i].target;\r\n        edgeData.push(source, target);\r\n      }\r\n      this.setState({ nodeData: nodeData, edgeData: edgeData });\r\n    };\r\n    jsonReader.readAsText(files[0]);\r\n  }\r\n\r\n  applySpectral() {\r\n    var e = eigs(this.state.laplacian);\r\n    console.log(e);\r\n    var nodeData = this.state.nodeData;\r\n    var x = column(e.vectors, 1) as Matrix;\r\n    var y = column(e.vectors, 2) as Matrix;\r\n    var x_max = max(x);\r\n    var y_max = max(y);\r\n    var x_min = min(x);\r\n    var y_min = min(y);\r\n    for (var i = 0; i < nodeData.length / 4; i++) {\r\n      nodeData[i * 4 + 1] = (x.get([i, 0]) - x_min) / (x_max - x_min);\r\n      nodeData[i * 4 + 2] = (y.get([i, 0]) - y_min) / (y_max - y_min);\r\n    }\r\n    this.setState({ nodeData: nodeData });\r\n    this.props.setNodeEdgeData(nodeData, this.state.edgeData);\r\n  }\r\n\r\n  onSaveXML() {\r\n    var xw = new XMLWriter(true);\r\n    xw.startDocument();\r\n    xw.startElement(\"GeneTerrain\");\r\n    xw.startElement(\"Nodes\");\r\n    for (var i = 0; i < this.state.nodeData.length; i += 4) {\r\n      xw.startElement(\"Node\");\r\n      xw.writeAttribute(\"NodeID\", i / 4);\r\n      xw.writeAttribute(\"InputValue\", this.state.nodeData[i]);\r\n      xw.writeAttribute(\"InputWeight\", this.state.nodeData[i + 3]);\r\n      xw.writeAttribute(\"NodeBackendX\", this.state.nodeData[i + 1]);\r\n      xw.writeAttribute(\"NodeBackendY\", this.state.nodeData[i + 2]);\r\n      xw.endElement(\"Node\");\r\n    }\r\n    xw.endElement(\"Nodes\");\r\n    xw.startElement(\"Edges\");\r\n    for (var i = 0; i < this.state.edgeData.length; i += 2) {\r\n      xw.startElement(\"Edge\");\r\n      xw.writeAttribute(\"BeginID\", this.state.edgeData[i]);\r\n      xw.writeAttribute(\"EndID\", this.state.edgeData[i + 1]);\r\n      xw.endElement(\"Edge\");\r\n    }\r\n    xw.endElement(\"Edges\");\r\n    xw.endDocument();\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([xw.toString()], { type: \"application/xml\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"terrain.xml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <hr />\r\n        <Button className=\"benchmark_test\" onClick={this.runBenchmark}>\r\n          Run Benchmark\r\n        </Button>\r\n        <div style={{ margin: 10, color: \"white\" }}>\r\n          <p>Node count: {this.state.nodeCount}</p>\r\n          <p>Edge count: {this.state.edgeCount}</p>\r\n        </div>\r\n        <CSVLink data={this.state.FPSData}>Download FPS data</CSVLink>\r\n        <hr />\r\n        <Form style={{ color: \"white\" }} onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"formFile\" className=\"mt-3 mb-3\">\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={() =>\r\n                this.setState({ jsonFormat: !this.state.jsonFormat })\r\n              }\r\n              type=\"checkbox\"\r\n              label=\"Json Format\"\r\n            ></Form.Check>\r\n            <Form.Label>Select Example Files</Form.Label>\r\n            <Form.Control\r\n              className=\"form-control\"\r\n              type=\"file\"\r\n              multiple\r\n              onChange={(e) => {\r\n                if (this.state.jsonFormat) {\r\n                  this.readJson(e as React.ChangeEvent<HTMLInputElement>);\r\n                } else {\r\n                  this.readFiles(e as React.ChangeEvent<HTMLInputElement>);\r\n                }\r\n              }}\r\n            />\r\n            <Button\r\n              className=\"mt-2\"\r\n              type=\"submit\"\r\n              variant=\"secondary\"\r\n              value=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Group>\r\n          <Collapsible trigger=\"Terrain Options\">\r\n            <Form.Group>\r\n              <Form.Label> Width Factor </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={1000}\r\n                min={0}\r\n                max={2000}\r\n                onChange={(e) =>\r\n                  this.props.setWidthFactor(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label> Peak and Valley Values </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.8}\r\n                min={0.5}\r\n                max={1}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setPeakValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.2}\r\n                min={0}\r\n                max={0.5}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setValleyValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Check\r\n                defaultChecked={true}\r\n                onClick={(e) => this.props.setGlobalRange()}\r\n                type=\"checkbox\"\r\n                label=\"Use Global Min/Max\"\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Colormap Options\">\r\n            <Form.Row>\r\n              <div>Valley</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={45}\r\n                min={1}\r\n                max={60}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorValley(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Hill</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={90}\r\n                min={61}\r\n                max={120}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorHill(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Mountain</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={135}\r\n                min={121}\r\n                max={180}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorMountain(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Layers\">\r\n            <Form.Check\r\n              defaultChecked={false}\r\n              onClick={(e) => this.props.toggleTerrainLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Terrain Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleNodeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Node Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleEdgeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Edge Layer\"\r\n            />\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Force Directed Options\">\r\n            <Form.Label> Ideal Length and Cooling Factor </Form.Label>\r\n            <br />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.05}\r\n              min={0.001}\r\n              max={0.1}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setIdealLength(parseFloat(e.target.value))\r\n              }\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.9}\r\n              min={0.75}\r\n              max={0.999}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setCoolingFactor(parseFloat(e.target.value))\r\n              }\r\n            />\r\n          </Collapsible>\r\n          <Button onClick={(e) => this.props.onSave()}>Save Terrain</Button>\r\n          <br />\r\n          <Button onClick={(e) => this.applySpectral()}>\r\n            Apply Spectral Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.props.runForceDirected()}>\r\n            Run Force Directed Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.onSaveXML()}>Save Terrain to XML</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;"]}