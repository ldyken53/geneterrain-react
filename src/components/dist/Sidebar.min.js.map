{"version":3,"sources":["Sidebar.tsx"],"names":["react_1","require","react_bootstrap_1","react_collapsible_1","mathjs_1","stats_js_1","xml_writer_1","Sidebar","_super","props","_this","call","this","state","nodeData","edgeData","laplacian","sparse","adjacencyMatrix","e","jsonFormat","handleSubmit","bind","readFiles","generateRandomGraph","generatePair","generateRandomData","refresh","runTest","runBenchmark","testFunc","sleep","__extends","prototype","event","preventDefault","setNodeEdgeData","nodeCount","edgeCount","data","nodes","edges","Array","fill","i","Math","random","pair","edgeHashMap","Map","has","source","target","set","min","max","randRange","floor","nodeCounts","edgeCounts","stepCount","time","Promise","resolve","setTimeout","map","n","stats","showPanel","dom","setAttribute","document","body","appendChild","setState","_a","sent","length","nodeLength","refreshing","begin","end","requestAnimationFrame","files","console","log","nodeIDToValue","nodeIDToIndex","degreeMatrix","edgeReader","FileReader","onload","_i","edgeRaw_1","result","split","parts","push","subtract","layoutReader","layoutData_1","parseFloat","j","readAsText","nodeReader","rawNodes_1","element","readJson","jsonReader","graph","JSON","parse","x","y","applySpectral","eigs","column","vectors","x_max","y_max","x_min","y_min","get","onSaveXML","xw","startDocument","startElement","writeAttribute","endElement","endDocument","createElement","file","Blob","toString","type","href","URL","createObjectURL","download","click","render","className","Button","onClick","Form","style","color","onSubmit","Group","controlId","Check","defaultChecked","label","Label","Control","multiple","onChange","variant","value","trigger","defaultValue","setWidthFactor","step","setPeakValue","setValleyValue","setGlobalRange","Row","setColorValley","setColorHill","setColorMountain","toggleTerrainLayer","toggleNodeLayer","toggleEdgeLayer","setIdealLength","setCoolingFactor","onSave","runForceDirected","Component","exports"],"mappings":"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","file":"Sidebar.min.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { Matrix, matrix, subtract, eigs, column, min, max, index, sparse } from 'mathjs';\r\nimport Stats from \"stats.js\";\r\n\r\nimport XMLWriter from \"xml-writer\";\r\n\r\ntype SidebarProps = {\r\n  setNodeEdgeData: (nodeData: Array<number>, edgeData: Array<number>) => void;\r\n  setWidthFactor: (widthFactor: number) => void;\r\n  setPeakValue: (value: number) => void;\r\n  setValleyValue: (value: number) => void;\r\n  setCoolingFactor: (value: number) => void;\r\n  setIdealLength: (value: number) => void;\r\n  setColorValley: (value: number) => void;\r\n  setColorHill: (value: number) => void;\r\n  setColorMountain: (value: number) => void;\r\n  setGlobalRange: () => void;\r\n  toggleNodeLayer: () => void;\r\n  toggleTerrainLayer: () => void;\r\n  toggleEdgeLayer: () => void;\r\n  runForceDirected: () => void;\r\n  onSave: () => void;\r\n};\r\ntype SidebarState = {\r\n  nodeData: Array<number>;\r\n  edgeData: Array<number>;\r\n  laplacian: Matrix;\r\n  adjacencyMatrix: Array<Array<number>>;\r\n  e: {};\r\n  jsonFormat: boolean;\r\n};\r\ntype edge = {\r\n  source: number;\r\n  target: number;\r\n};\r\ntype node = {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n};\r\ntype Graph = {\r\n  nodes: Array<node>;\r\n  edges: Array<edge>;\r\n};\r\nclass Sidebar extends React.Component<SidebarProps, SidebarState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodeData: [],\r\n      edgeData: [],\r\n      laplacian: sparse([]),\r\n      adjacencyMatrix: [],\r\n      e: {},\r\n      jsonFormat: true,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.readFiles = this.readFiles.bind(this);\r\n    this.generateRandomGraph = this.generateRandomGraph.bind(this);\r\n    this.generatePair = this.generatePair.bind(this);\r\n    this.generateRandomData = this.generateRandomData.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n    this.runTest = this.runTest.bind(this);\r\n    this.runBenchmark = this.runBenchmark.bind(this);\r\n    this.testFunc = this.testFunc.bind(this);\r\n    this.sleep = this.sleep.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n  }\r\n\r\n  generateRandomGraph(nodeCount, edgeCount) {\r\n    var nodes: Array<number> = [];\r\n    var edges: Array<number> = [];\r\n    const data = {\r\n      nodes: nodes,\r\n      edges: edges,\r\n    };\r\n\r\n    data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n    for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n      data.nodes[i] = 0;\r\n      data.nodes[i + 1] = Math.random();\r\n      data.nodes[i + 2] = Math.random();\r\n      data.nodes[i + 3] = 1;\r\n    }\r\n    const edgeHashMap = new Map();\r\n\r\n    data.edges = Array(2 * edgeCount).fill(0);\r\n    let pair;\r\n\r\n    for (let i = 0; i < 2 * edgeCount; i = i + 2) {\r\n      do {\r\n        pair = this.generatePair(0, nodeCount);\r\n      } while (edgeHashMap.has(`${pair.source}_${pair.target}`));\r\n      edgeHashMap.set(`${pair.source}_${pair.target}`, true);\r\n      edgeHashMap.set(`${pair.target}_${pair.source}`, true);\r\n      data.edges[i] = pair.source;\r\n      data.edges[i + 1] = pair.target;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  generatePair(min, max) {\r\n    function randRange(min, max) {\r\n      return min + Math.floor(Math.random() * (max - min));\r\n    }\r\n    const source = randRange(min, max);\r\n    let target = randRange(min, max);\r\n    while (source === target) {\r\n      target = randRange(min, max);\r\n    }\r\n    return {\r\n      source: source,\r\n      target: target,\r\n    };\r\n  }\r\n\r\n  generateRandomData(nodeCounts, edgeCounts, stepCount) {\r\n    let nodeCount = nodeCounts[stepCount];\r\n    let edgeCount = edgeCounts[stepCount];\r\n\r\n    let generatedData = this.generateRandomGraph(nodeCount, edgeCount);\r\n    return generatedData;\r\n  }\r\n\r\n  sleep(time) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, time);\r\n    });\r\n  }\r\n\r\n  async runBenchmark(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const nodeCounts = [1e2, 5e2, 1e3, 2e3, 5e3, 1e4, 2e4, 5e4, 1e5, 2e5, 1e6];\r\n    const density = 20;\r\n    const edgeCounts = nodeCounts.map((n) => n * density);\r\n    let stats = Stats();\r\n    stats.showPanel(0);\r\n    stats.dom.setAttribute(\"class\", \"status\");\r\n    document.body.appendChild(stats.dom);\r\n\r\n    // const testCase = {\r\n    //   nodeCounts,\r\n    //   edgeCounts,\r\n    // };\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      let stepCount = 10;\r\n      let data = this.generateRandomData(nodeCounts, edgeCounts, stepCount);\r\n      this.setState({ nodeData: data.nodes });\r\n      this.setState({ edgeData: data.edges });\r\n      // this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n      await this.testFunc(data, stats);\r\n    }\r\n  }\r\n\r\n  refresh(length) {\r\n    var nodes: Array<number> = [];\r\n    for (let i = 0; i < length; i = i + 2) {\r\n      nodes[i] = Math.random();\r\n      nodes[i + 1] = Math.random();\r\n    }\r\n    this.setState({ nodeData: nodes });\r\n    this.props.setNodeEdgeData(nodes, this.state.edgeData);\r\n  }\r\n\r\n  async runTest(nodeLength, stats) {\r\n    const refreshing = () => {\r\n      stats.begin();\r\n      this.refresh(nodeLength);\r\n      stats.end();\r\n      requestAnimationFrame(refreshing);\r\n    };\r\n    refreshing();\r\n    await this.sleep(5000);\r\n    return;\r\n    // const FPSHistory = stats.getFPSHistory();\r\n    // let FPS = FPSHistory.pop();\r\n  }\r\n\r\n  async testFunc(data, stats) {\r\n    let nodeLength = data.nodes.length;\r\n    await this.runTest(nodeLength, stats);\r\n  }\r\n\r\n  readFiles(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    console.log(files);\r\n    var nodeIDToValue = {};\r\n    // var nodeIDToPos = {};\r\n    var nodeIDToIndex = {};\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    var degreeMatrix: Array<Array<number>> = [];\r\n    var adjacencyMatrix: Array<Array<number>> = [];\r\n    const edgeReader = new FileReader();\r\n    edgeReader.onload = (event) => {\r\n      var edgeRaw = (edgeReader.result as string).split(\"\\n\");\r\n      for (var element of edgeRaw) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]] && nodeIDToValue[parts[1]]) {\r\n          edgeData.push(nodeIDToIndex[parts[0]], nodeIDToIndex[parts[1]]);\r\n          degreeMatrix[nodeIDToIndex[parts[0]]][nodeIDToIndex[parts[0]]] += 1;\r\n          degreeMatrix[nodeIDToIndex[parts[1]]][nodeIDToIndex[parts[1]]] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[0]]][\r\n            nodeIDToIndex[parts[1]]\r\n          ] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[1]]][\r\n            nodeIDToIndex[parts[0]]\r\n          ] += 1;\r\n        }\r\n      }\r\n      this.setState({ edgeData: edgeData });\r\n      var laplacian: Matrix = subtract(\r\n        sparse(degreeMatrix),\r\n        sparse(adjacencyMatrix)\r\n      ) as Matrix;\r\n      console.log(laplacian);\r\n      this.setState({ laplacian: laplacian, adjacencyMatrix: adjacencyMatrix });\r\n    };\r\n    const layoutReader = new FileReader();\r\n    layoutReader.onload = (event) => {\r\n      var layoutData = (layoutReader.result as string).split(\"\\n\");\r\n      for (var element of layoutData) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]]) {\r\n          nodeIDToIndex[parts[0]] = nodeData.length / 4;\r\n          // Pushes values to node data in order of struct for WebGPU:\r\n          // nodeValue, nodeX, nodeY, nodeSize\r\n          nodeData.push(\r\n            parseFloat(nodeIDToValue[parts[0]]),\r\n            parseFloat(parts[1]),\r\n            parseFloat(parts[2]),\r\n            parseFloat(parts[3])\r\n          );\r\n          // nodeIDToPos[parts[0]] = [parseFloat(parts[1]) * 2.0 - 1, parseFloat(parts[2]) * 2.0 - 1];\r\n        }\r\n      }\r\n      this.setState({ nodeData: nodeData });\r\n      for (var i = 0; i < nodeData.length / 4; i++) {\r\n        degreeMatrix.push([]);\r\n        adjacencyMatrix.push([]);\r\n        for (var j = 0; j < nodeData.length / 4; j++) {\r\n          degreeMatrix[i].push(0);\r\n          adjacencyMatrix[i].push(0);\r\n        }\r\n      }\r\n      edgeReader.readAsText(files[2]);\r\n    };\r\n    const nodeReader = new FileReader();\r\n    nodeReader.onload = (event) => {\r\n      var rawNodes = (nodeReader.result as string).split(\"\\n\");\r\n      for (var element of rawNodes) {\r\n        nodeIDToValue[element.split(\"\\t\")[0]] = element.split(\"\\t\")[1];\r\n      }\r\n      console.log(nodeIDToValue);\r\n      layoutReader.readAsText(files[1]);\r\n    };\r\n    nodeReader.readAsText(files[0]);\r\n  }\r\n\r\n  readJson(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    const jsonReader = new FileReader();\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    jsonReader.onload = (event) => {\r\n      var graph: Graph = JSON.parse(jsonReader.result as string);\r\n      console.log(graph);\r\n      for (var i = 0; i < graph.nodes.length; i++) {\r\n        if (graph.nodes[i].x) {\r\n          nodeData.push(0.0, graph.nodes[i].x, graph.nodes[i].y, 1.0);\r\n        } else {\r\n          nodeData.push(0.0, Math.random(), Math.random(), 1.0);\r\n        }\r\n      }\r\n      for (var i = 0; i < graph.edges.length; i++) {\r\n        var source = graph.edges[i].source;\r\n        var target = graph.edges[i].target;\r\n        edgeData.push(source, target);\r\n      }\r\n      this.setState({ nodeData: nodeData, edgeData: edgeData });\r\n    };\r\n    jsonReader.readAsText(files[0]);\r\n  }\r\n\r\n  applySpectral() {\r\n    var e = eigs(this.state.laplacian);\r\n    console.log(e);\r\n    var nodeData = this.state.nodeData;\r\n    var x = column(e.vectors, 1) as Matrix;\r\n    var y = column(e.vectors, 2) as Matrix;\r\n    var x_max = max(x);\r\n    var y_max = max(y);\r\n    var x_min = min(x);\r\n    var y_min = min(y);\r\n    for (var i = 0; i < nodeData.length / 4; i++) {\r\n      nodeData[i * 4 + 1] = (x.get([i, 0]) - x_min) / (x_max - x_min);\r\n      nodeData[i * 4 + 2] = (y.get([i, 0]) - y_min) / (y_max - y_min);\r\n    }\r\n    this.setState({ nodeData: nodeData });\r\n    this.props.setNodeEdgeData(nodeData, this.state.edgeData);\r\n  }\r\n\r\n  onSaveXML() {\r\n    var xw = new XMLWriter(true);\r\n    xw.startDocument();\r\n    xw.startElement(\"GeneTerrain\");\r\n    xw.startElement(\"Nodes\");\r\n    for (var i = 0; i < this.state.nodeData.length; i += 4) {\r\n      xw.startElement(\"Node\");\r\n      xw.writeAttribute(\"NodeID\", i / 4);\r\n      xw.writeAttribute(\"InputValue\", this.state.nodeData[i]);\r\n      xw.writeAttribute(\"InputWeight\", this.state.nodeData[i + 3]);\r\n      xw.writeAttribute(\"NodeBackendX\", this.state.nodeData[i + 1]);\r\n      xw.writeAttribute(\"NodeBackendY\", this.state.nodeData[i + 2]);\r\n      xw.endElement(\"Node\");\r\n    }\r\n    xw.endElement(\"Nodes\");\r\n    xw.startElement(\"Edges\");\r\n    for (var i = 0; i < this.state.edgeData.length; i += 2) {\r\n      xw.startElement(\"Edge\");\r\n      xw.writeAttribute(\"BeginID\", this.state.edgeData[i]);\r\n      xw.writeAttribute(\"EndID\", this.state.edgeData[i + 1]);\r\n      xw.endElement(\"Edge\");\r\n    }\r\n    xw.endElement(\"Edges\");\r\n    xw.endDocument();\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([xw.toString()], { type: \"application/xml\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"terrain.xml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <Button className=\"benchmark_test\" onClick={this.runBenchmark}>\r\n          {\" \"}\r\n          Run Benchmark\r\n        </Button>\r\n\r\n        <Form style={{ color: \"white\" }} onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"formFile\" className=\"mt-3 mb-3\">\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={() =>\r\n                this.setState({ jsonFormat: !this.state.jsonFormat })\r\n              }\r\n              type=\"checkbox\"\r\n              label=\"Json Format\"\r\n            ></Form.Check>\r\n            <Form.Label>Select Example Files</Form.Label>\r\n            <Form.Control\r\n              className=\"form-control\"\r\n              type=\"file\"\r\n              multiple\r\n              onChange={(e) => {\r\n                if (this.state.jsonFormat) {\r\n                  this.readJson(e as React.ChangeEvent<HTMLInputElement>);\r\n                } else {\r\n                  this.readFiles(e as React.ChangeEvent<HTMLInputElement>);\r\n                }\r\n              }}\r\n            />\r\n            <Button\r\n              className=\"mt-2\"\r\n              type=\"submit\"\r\n              variant=\"secondary\"\r\n              value=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Group>\r\n          <Collapsible trigger=\"Terrain Options\">\r\n            <Form.Group>\r\n              <Form.Label> Width Factor </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={1000}\r\n                min={0}\r\n                max={2000}\r\n                onChange={(e) =>\r\n                  this.props.setWidthFactor(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label> Peak and Valley Values </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.8}\r\n                min={0.5}\r\n                max={1}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setPeakValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.2}\r\n                min={0}\r\n                max={0.5}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setValleyValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Check\r\n                defaultChecked={true}\r\n                onClick={(e) => this.props.setGlobalRange()}\r\n                type=\"checkbox\"\r\n                label=\"Use Global Min/Max\"\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Colormap Options\">\r\n            <Form.Row>\r\n              <div>Valley</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={45}\r\n                min={1}\r\n                max={60}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorValley(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Hill</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={90}\r\n                min={61}\r\n                max={120}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorHill(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Mountain</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={135}\r\n                min={121}\r\n                max={180}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorMountain(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Layers\">\r\n            <Form.Check\r\n              defaultChecked={false}\r\n              onClick={(e) => this.props.toggleTerrainLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Terrain Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleNodeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Node Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleEdgeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Edge Layer\"\r\n            />\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Force Directed Options\">\r\n            <Form.Label> Ideal Length and Cooling Factor </Form.Label>\r\n            <br />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.05}\r\n              min={0.001}\r\n              max={0.1}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setIdealLength(parseFloat(e.target.value))\r\n              }\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.9}\r\n              min={0.75}\r\n              max={0.999}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setCoolingFactor(parseFloat(e.target.value))\r\n              }\r\n            />\r\n          </Collapsible>\r\n          <Button onClick={(e) => this.props.onSave()}>Save Terrain</Button>\r\n          <br />\r\n          <Button onClick={(e) => this.applySpectral()}>\r\n            Apply Spectral Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.props.runForceDirected()}>\r\n            Run Force Directed Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.onSaveXML()}>Save Terrain to XML</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;"]}