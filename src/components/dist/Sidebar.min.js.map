{"version":3,"sources":["Sidebar.tsx"],"names":["react_1","require","react_bootstrap_1","react_collapsible_1","mathjs_1","stats_module_1","Constant","react_csv_1","xml_writer_1","d3","headers","label","key","headerForLayout","Sidebar","_super","props","_this","call","this","state","nodeData","edgeData","nodeCount","edgeCount","laplacian","sparse","adjacencyMatrix","e","jsonFormat","runBenchmark","FPSData","d3timing","handleSubmit","bind","readFiles","generateRandomGraph","generatePair","generateRandomData","refresh","runTest","testFunc","sleep","storeFPSResult","d3TimingStudy","__extends","prototype","event","preventDefault","setNodeEdgeData","time","Promise","resolve","setTimeout","self","iterationCount","iterationMeasure","json","then","data","console","log","timeToFormatData","startTime","performance","now","simulation","forceSimulation","nodes","force","forceManyBody","strength","forceCenter","width","height","forceLink","edges","distance","alphaDecay","simulationUpdate","currentTime","formatStartTime","newData","nodesList","edgesList","length","Array","fill","maxX","maxY","i","nodeX","Math","abs","x","nodeY","y","parseInt","source","name","target","formatData","formatStopTime","localtimeToFormatData","setState","_a","sent","endTime","dt","__spreadArrays","totalTime","renderingTime","on","__awaiter","_b","currentTime2","totalAverageTime","reduce","a","b","renderAvergaeTime","layoutAverageTime","findAverage","renderAverageTime","initGraph","edgeCounts","nodeCounts","map","n","renderingCanvas","document","querySelectorAll","style","stats","showPanel","dom","setAttribute","body","appendChild","nCount","toString","eCount","e_1","min","max","randRange","floor","random","stepCount","pair","err","error","nodeLength","edgeLength","fps","refreshing_1","begin","end","requestId_1","requestAnimationFrame","TIME_FOR_EACH_TEST","FPS_Array","getFPSHistory","FPS","cancelAnimationFrame","err_1","files","nodeIDToValue","nodeIDToIndex","degreeMatrix","edgeReader","FileReader","onload","_i","edgeRaw_1","result","split","parts","push","subtract","layoutReader","layoutData_1","parseFloat","j","readAsText","nodeReader","rawNodes_1","element","readJson","jsonReader","graph","JSON","parse","applySpectral","eigs","column","vectors","x_max","y_max","x_min","y_min","get","onSaveXML","xw","startDocument","startElement","writeAttribute","endElement","endDocument","createElement","file","Blob","type","href","URL","createObjectURL","download","click","render","className","Button","onClick","margin","color","CSVLink","header","Form","onSubmit","Group","controlId","Check","defaultChecked","Label","Control","multiple","onChange","variant","value","trigger","defaultValue","setWidthFactor","step","setPeakValue","setValleyValue","setGlobalRange","Row","setColorValley","setColorHill","setColorMountain","toggleTerrainLayer","toggleNodeLayer","toggleEdgeLayer","setIdealLength","setCoolingFactor","onSave","runForceDirected","Component","exports"],"mappings":"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","file":"Sidebar.min.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { Matrix, matrix, subtract, eigs, column, min, max, index, sparse } from 'mathjs';\r\nimport Stats from \"../libs/stats.module\";\r\nimport * as Constant from \"../constant\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport XMLWriter from \"xml-writer\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst headers = [\r\n  { label: \"Node\", key: \"Node\" },\r\n  { label: \"Edge\", key: \"Edge\" },\r\n  { label: \"FPS\", key: \"FPS\" },\r\n];\r\n\r\nconst headerForLayout = [\r\n  { label: \"iterationCount\", key: \"iterationCount\" },\r\n  { label: \"time\", key: \"time\" },\r\n  { label: \"renderTime\", key: \"renderTime\" },\r\n];\r\n\r\ntype SidebarProps = {\r\n  setNodeEdgeData: (nodeData: Array<number>, edgeData: Array<number>) => Promise<void>;\r\n  setWidthFactor: (widthFactor: number) => void;\r\n  setPeakValue: (value: number) => void;\r\n  setValleyValue: (value: number) => void;\r\n  setCoolingFactor: (value: number) => void;\r\n  setIdealLength: (value: number) => void;\r\n  setColorValley: (value: number) => void;\r\n  setColorHill: (value: number) => void;\r\n  setColorMountain: (value: number) => void;\r\n  setGlobalRange: () => void;\r\n  toggleNodeLayer: () => void;\r\n  toggleTerrainLayer: () => void;\r\n  toggleEdgeLayer: () => void;\r\n  runForceDirected: () => void;\r\n  onSave: () => void;\r\n};\r\ntype SidebarState = {\r\n  nodeData: Array<number>;\r\n  edgeData: Array<number>;\r\n  laplacian: Matrix;\r\n  adjacencyMatrix: Array<Array<number>>;\r\n  e: {};\r\n  nodeCount: string;\r\n  edgeCount: string;\r\n  runBenchmark: boolean;\r\n  jsonFormat: boolean;\r\n  FPSData: Array<Array<string>>;\r\n  d3timing: Array<timing>;\r\n\r\n  // canvasAdded: boolean;\r\n};\r\ntype edge = {\r\n  id: string;\r\n  source: number;\r\n  target: number;\r\n};\r\ntype node = {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype nodeD3 = {\r\n  id: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype Graph = {\r\n  nodes: Array<node>;\r\n  edges: Array<edge>;\r\n};\r\n\r\ninterface timing {\r\n  iterationCount: number;\r\n  totalTime: number;\r\n  renderingTime: number;\r\n}\r\n\r\nclass Sidebar extends React.Component<SidebarProps, SidebarState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodeData: [],\r\n      edgeData: [],\r\n      nodeCount: \"\",\r\n      edgeCount: \"\",\r\n      laplacian: sparse([]),\r\n      adjacencyMatrix: [],\r\n      e: {},\r\n      jsonFormat: true,\r\n      runBenchmark: false,\r\n      FPSData: [],\r\n      d3timing: [],\r\n      // canvasAdded: false,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.readFiles = this.readFiles.bind(this);\r\n    this.generateRandomGraph = this.generateRandomGraph.bind(this);\r\n    this.generatePair = this.generatePair.bind(this);\r\n    this.generateRandomData = this.generateRandomData.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n    this.runTest = this.runTest.bind(this);\r\n    this.runBenchmark = this.runBenchmark.bind(this);\r\n    this.testFunc = this.testFunc.bind(this);\r\n    this.sleep = this.sleep.bind(this);\r\n    this.storeFPSResult = this.storeFPSResult.bind(this);\r\n\r\n    // =========================================================\r\n    this.d3TimingStudy = this.d3TimingStudy.bind(this);\r\n    // this.randomDataGen_Computation = this.randomDataGen_Computation.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n  }\r\n\r\n  sleep(time) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, time);\r\n    });\r\n  }\r\n\r\n  // randomDataGen_Computation(nodeCount, edgeCount, width, height) {\r\n  //   var nodesWebGPU: Array<number> = [];\r\n  //   var edgesWebGPU: Array<number> = [];\r\n\r\n  //   var nodesD3: Array<nodeD3> = [];\r\n  //   var edgesD3: Array<edge> = [];\r\n\r\n  //   const dataWebGPU = {\r\n  //     nodes: nodesWebGPU,\r\n  //     edges: edgesWebGPU,\r\n  //   };\r\n\r\n  //   const dataD3 = {\r\n  //     nodes: nodesD3,\r\n  //     edges: edgesD3,\r\n  //   };\r\n\r\n  //   dataWebGPU.nodes = new Array(4 * nodeCount).fill(0);\r\n  //   dataWebGPU.edges = new Array(2 * edgeCount).fill(0);\r\n\r\n  //   for (let i = 0; i < nodeCount; i++) {\r\n  //     let x = Math.random();\r\n  //     let y = Math.random();\r\n  //     dataD3.nodes[i] = { id: i.toString(), x: x * width, y: y * height };\r\n  //     dataWebGPU.nodes[4 * i] = 0;\r\n  //     dataWebGPU.nodes[4 * i + 1] = x;\r\n  //     dataWebGPU.nodes[4 * i + 2] = y;\r\n  //     dataWebGPU.nodes[4 * i + 3] = 1;\r\n  //   }\r\n\r\n  //   const linkSet = new Set();\r\n\r\n  //   for (let i = 0; i < edgeCount; i++) {\r\n  //     let pair;\r\n  //     do {\r\n  //       pair = this.generatePair(0, nodeCount);\r\n  //     } while (linkSet.has(`${pair.source}_${pair.target}`));\r\n  //     linkSet.add(`${pair.source}_${pair.target}`);\r\n  //     linkSet.add(`${pair.target}_${pair.source}`);\r\n\r\n  //     dataD3.edges[i] = {\r\n  //       id: i.toString(),\r\n  //       source: pair.source,\r\n  //       target: pair.target,\r\n  //     };\r\n  //     dataWebGPU.edges[2 * i] = pair.source;\r\n  //     dataWebGPU.edges[2 * i + 1] = pair.target;\r\n  //   }\r\n  //   let dataCombined = {\r\n  //     dataD3,\r\n  //     dataWebGPU,\r\n  //   };\r\n  //   return dataCombined;\r\n  // }\r\n\r\n  async d3TimingStudy(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const self = this;\r\n    const width = 800;\r\n    const height = 800;\r\n    let iterationCount = 0;\r\n    const iterationMeasure = {};\r\n    let startTime;\r\n    let lastTime;\r\n    let totalTime;\r\n\r\n    // var layoutCanvas = d3\r\n    //   .select(\"#graphDiv\")\r\n    //   .append(\"canvas\")\r\n    //   .attr(\"width\", width + \"px\")\r\n    //   .attr(\"height\", height + \"px\")\r\n    //   .node();\r\n\r\n    // let layoutDiv = document.getElementById(\"#graphDiv\");\r\n    // if (layoutDiv) {\r\n    //   layoutDiv.style.color = \"white\";\r\n    // }\r\n\r\n    // let context = layoutCanvas!.getContext(\"2d\")!;\r\n    // if (!context) {\r\n    //   console.log(\"no 2d context found\");\r\n    //   return;\r\n    // }\r\n\r\n    // context.fillStyle = \"white\";\r\n\r\n    d3.json(\"./sample_test_data/sample_data2000_40000.json\").then(\r\n      (data: any) => {\r\n        console.log(data);\r\n        let timeToFormatData = 0;\r\n        startTime = performance.now();\r\n        lastTime = startTime;\r\n        const simulation = d3\r\n          .forceSimulation(data.nodes)\r\n          .force(\"charge\", d3.forceManyBody().strength(-40))\r\n          .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n          .force(\"link\", d3.forceLink(data.edges).distance(400).strength(2.0))\r\n          .alphaDecay(0.077);\r\n\r\n        initGraph(data);\r\n\r\n        function initGraph(data) {\r\n          simulation.on(\"tick\", simulationUpdate);\r\n          simulation.on(\"end\", async () => {\r\n            let extraTime = performance.now();\r\n            await self.props.setNodeEdgeData(\r\n              self.state.nodeData,\r\n              self.state.edgeData\r\n            );\r\n            let extraEnd = performance.now();\r\n            let currentTime2 = performance.now();\r\n            totalTime = currentTime2 - startTime;\r\n            const [totalAverageTime, layoutAverageTime, renderAverageTime] =\r\n              findAverage(self.state.d3timing);\r\n            console.log(\r\n              \"totalAverageTime\",\r\n              totalAverageTime,\r\n              \"layoutAverageTime\",\r\n              layoutAverageTime,\r\n              \"averageTimetoRender\",\r\n              renderAverageTime\r\n            );\r\n            console.log(\"totalTime\", totalTime - timeToFormatData);\r\n          });\r\n        }\r\n\r\n        function formatData(nodesList, edgesList) {\r\n          var nodes: Array<number> = [];\r\n          var edges: Array<number> = [];\r\n          const data = {\r\n            nodes: nodes,\r\n            edges: edges,\r\n          };\r\n\r\n          let nodeCount = nodesList.length;\r\n          data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n          let maxX = 0;\r\n          let maxY = 0;\r\n\r\n          for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n            data.nodes[i] = 0;\r\n            let nodeX = Math.abs(nodesList[i / 4].x);\r\n            let nodeY = Math.abs(nodesList[i / 4].y);\r\n            if (nodeX > maxX) {\r\n              maxX = nodeX;\r\n            }\r\n            if (nodeY > maxY) {\r\n              maxY = nodeY;\r\n            }\r\n            data.nodes[i + 3] = 1;\r\n          }\r\n\r\n          for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n            data.nodes[i + 1] = nodesList[i / 4].x / maxX;\r\n            data.nodes[i + 2] = nodesList[i / 4].y / maxY;\r\n          }\r\n\r\n          data.edges = Array(2 * nodeCount * 20).fill(0);\r\n          for (let i = 0; i < 2 * 20 * nodeCount; i = i + 2) {\r\n            data.edges[i] = parseInt(edgesList[i / 2].source.name);\r\n            data.edges[i + 1] = parseInt(edgesList[i / 2].target.name);\r\n          }\r\n          return data;\r\n        }\r\n\r\n        function findAverage(d3timing) {\r\n          let totalAverageTime =\r\n            d3timing.reduce((a, b) => {\r\n              return a + b.totalTime;\r\n            }, 0) / d3timing.length;\r\n          let renderAvergaeTime =\r\n            d3timing.reduce((a, b) => a + b.renderingTime, 0) / d3timing.length;\r\n          let layoutAverageTime =\r\n            d3timing.reduce((a, b) => a + (b.totalTime - b.renderingTime), 0) /\r\n            d3timing.length;\r\n\r\n          return [totalAverageTime, layoutAverageTime, renderAvergaeTime];\r\n        }\r\n\r\n        async function simulationUpdate() {\r\n          let currentTime = performance.now();\r\n\r\n          let formatStartTime = performance.now();\r\n          let newData = formatData(data.nodes, data.edges);\r\n          let formatStopTime = performance.now();\r\n          let localtimeToFormatData = formatStopTime - formatStartTime;\r\n          timeToFormatData += localtimeToFormatData;\r\n\r\n          self.setState({ nodeData: newData.nodes });\r\n          await self.props.setNodeEdgeData(newData.nodes, newData.edges);\r\n\r\n          let renderTime = 0;\r\n\r\n          let endTime = performance.now();\r\n          // lastTime = currentTime;\r\n          let dt = endTime - currentTime - localtimeToFormatData;\r\n          iterationCount++;\r\n          console.log(iterationCount, dt);\r\n          iterationMeasure[iterationCount] = dt;\r\n          self.setState({\r\n            d3timing: [\r\n              ...self.state.d3timing,\r\n              {\r\n                iterationCount: iterationCount,\r\n                totalTime: dt,\r\n                renderingTime: renderTime,\r\n              },\r\n            ],\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  async runBenchmark(event: React.MouseEvent) {\r\n    try {\r\n      event.preventDefault();\r\n      // 5e2, 1e3, 2e3, 5e3, 1e4, 2e4, 3e4, 4e4, 1e5\r\n      const nodeCounts = [1e2, 1e3, 2e3, 5e3, 1e4];\r\n      const density = 20;\r\n      const edgeCounts = nodeCounts.map((n) => n * density);\r\n      this.setState({ runBenchmark: true });\r\n      let renderingCanvas = document.querySelectorAll(\"canvas\")[0];\r\n      renderingCanvas.width = 500;\r\n      renderingCanvas.height = 500;\r\n      renderingCanvas.style.width = \"500px\";\r\n      renderingCanvas.style.height = \"500px\";\r\n      // const testCase = {\r\n      //   nodeCounts,\r\n      //   edgeCounts,\r\n      // };\r\n\r\n      for (let i = 0; i < nodeCounts.length; i++) {\r\n        let stats = Stats();\r\n        stats.showPanel(0);\r\n        stats.dom.setAttribute(\"class\", \"status\");\r\n        document.body.appendChild(stats.dom);\r\n        // let stepCount = 0;\r\n        const nCount = nodeCounts[i].toString();\r\n        const eCount = edgeCounts[i].toString();\r\n\r\n        this.setState({ nodeCount: nCount });\r\n        this.setState({ edgeCount: eCount });\r\n\r\n        let data = this.generateRandomData(nodeCounts, edgeCounts, i);\r\n        this.setState({ nodeData: data.nodes });\r\n        this.setState({ edgeData: data.edges });\r\n        // this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n        await this.testFunc(data, stats);\r\n      }\r\n\r\n      this.setState({ runBenchmark: false });\r\n      renderingCanvas.width = 800;\r\n      renderingCanvas.height = 800;\r\n      renderingCanvas.style.width = \"800px\";\r\n      renderingCanvas.style.height = \"800px\";\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  generatePair(min, max) {\r\n    function randRange(min, max) {\r\n      return min + Math.floor(Math.random() * (max - min));\r\n    }\r\n    const source = randRange(min, max);\r\n    let target = randRange(min, max);\r\n    while (source === target) {\r\n      target = randRange(min, max);\r\n    }\r\n    return {\r\n      source: source,\r\n      target: target,\r\n    };\r\n  }\r\n\r\n  generateRandomData(nodeCounts, edgeCounts, stepCount) {\r\n    let nodeCount = nodeCounts[stepCount];\r\n    let edgeCount = edgeCounts[stepCount];\r\n\r\n    let generatedData = this.generateRandomGraph(nodeCount, edgeCount);\r\n    return generatedData;\r\n  }\r\n\r\n  \r\n  generateRandomGraph(nodeCount, edgeCount) {\r\n    var nodes: Array<number> = [];\r\n    var edges: Array<number> = [];\r\n    const data = {\r\n      nodes: nodes,\r\n      edges: edges,\r\n    };\r\n\r\n    data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n    for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n      data.nodes[i] = 0;\r\n      data.nodes[i + 1] = Math.random();\r\n      data.nodes[i + 2] = Math.random();\r\n      data.nodes[i + 3] = 1;\r\n    }\r\n    data.edges = Array(2 * edgeCount).fill(0);\r\n    let pair;\r\n\r\n    for (let i = 0; i < 2 * edgeCount; i = i + 2) {\r\n      pair = this.generatePair(0, nodeCount);\r\n      data.edges[i] = pair.source;\r\n      data.edges[i + 1] = pair.target;\r\n    }\r\n    console.log(\"data generated\");\r\n    return data;\r\n  }\r\n\r\n  refresh(length) {\r\n    try {\r\n      var nodes: Array<number> = [];\r\n      for (let i = 0; i < 4 * length; i = i + 4) {\r\n        nodes[i + 1] = Math.random();\r\n        nodes[i + 2] = Math.random();\r\n      }\r\n      this.setState({ nodeData: nodes });\r\n      this.props.setNodeEdgeData(nodes, this.state.edgeData);\r\n      // console.log(\"rendererd\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  storeFPSResult(nodeLength, edgeLength, fps) {\r\n    nodeLength = nodeLength.toString();\r\n    edgeLength = edgeLength.toString();\r\n    fps = fps.toString();\r\n\r\n    this.setState({\r\n      FPSData: [...this.state.FPSData, [nodeLength, edgeLength, fps]],\r\n    });\r\n  }\r\n\r\n  async testFunc(data, stats) {\r\n    let nodeLength = data.nodes.length / 4;\r\n    let edgeLength = data.edges.length / 2;\r\n    console.log(nodeLength);\r\n    await this.runTest(nodeLength, edgeLength, stats);\r\n  }\r\n\r\n  async runTest(nodeLength, edgeLength, stats) {\r\n    try {\r\n      let requestId;\r\n      let count = 0;\r\n      const refreshing = () => {\r\n        stats.begin();\r\n        // console.log(\"intiital count\", count);\r\n        // count++;\r\n        this.refresh(nodeLength);\r\n        // console.log(\"final count\", count);\r\n        stats.end();\r\n        requestId = requestAnimationFrame(refreshing);\r\n      };\r\n      refreshing();\r\n      await this.sleep(Constant.TIME_FOR_EACH_TEST);\r\n      let FPS_Array = stats.getFPSHistory();\r\n      console.log(FPS_Array);\r\n      let FPS = FPS_Array.reduce((a, b) => a + b, 0) / FPS_Array.length;\r\n      this.storeFPSResult(nodeLength, edgeLength, FPS);\r\n      cancelAnimationFrame(requestId);\r\n      return;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n  readFiles(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    console.log(files);\r\n    var nodeIDToValue = {};\r\n    // var nodeIDToPos = {};\r\n    var nodeIDToIndex = {};\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    var degreeMatrix: Array<Array<number>> = [];\r\n    var adjacencyMatrix: Array<Array<number>> = [];\r\n    const edgeReader = new FileReader();\r\n    edgeReader.onload = (event) => {\r\n      var edgeRaw = (edgeReader.result as string).split(\"\\n\");\r\n      for (var element of edgeRaw) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]] && nodeIDToValue[parts[1]]) {\r\n          edgeData.push(nodeIDToIndex[parts[0]], nodeIDToIndex[parts[1]]);\r\n          degreeMatrix[nodeIDToIndex[parts[0]]][nodeIDToIndex[parts[0]]] += 1;\r\n          degreeMatrix[nodeIDToIndex[parts[1]]][nodeIDToIndex[parts[1]]] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[0]]][\r\n            nodeIDToIndex[parts[1]]\r\n          ] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[1]]][\r\n            nodeIDToIndex[parts[0]]\r\n          ] += 1;\r\n        }\r\n      }\r\n      this.setState({ edgeData: edgeData });\r\n      var laplacian: Matrix = subtract(\r\n        sparse(degreeMatrix),\r\n        sparse(adjacencyMatrix)\r\n      ) as Matrix;\r\n      console.log(laplacian);\r\n      this.setState({ laplacian: laplacian, adjacencyMatrix: adjacencyMatrix });\r\n    };\r\n    const layoutReader = new FileReader();\r\n    layoutReader.onload = (event) => {\r\n      var layoutData = (layoutReader.result as string).split(\"\\n\");\r\n      for (var element of layoutData) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]]) {\r\n          nodeIDToIndex[parts[0]] = nodeData.length / 4;\r\n          // Pushes values to node data in order of struct for WebGPU:\r\n          // nodeValue, nodeX, nodeY, nodeSize\r\n          nodeData.push(\r\n            parseFloat(nodeIDToValue[parts[0]]),\r\n            parseFloat(parts[1]),\r\n            parseFloat(parts[2]),\r\n            parseFloat(parts[3])\r\n          );\r\n          // nodeIDToPos[parts[0]] = [parseFloat(parts[1]) * 2.0 - 1, parseFloat(parts[2]) * 2.0 - 1];\r\n        }\r\n      }\r\n      this.setState({ nodeData: nodeData });\r\n      for (var i = 0; i < nodeData.length / 4; i++) {\r\n        degreeMatrix.push([]);\r\n        adjacencyMatrix.push([]);\r\n        for (var j = 0; j < nodeData.length / 4; j++) {\r\n          degreeMatrix[i].push(0);\r\n          adjacencyMatrix[i].push(0);\r\n        }\r\n      }\r\n      edgeReader.readAsText(files[2]);\r\n    };\r\n    const nodeReader = new FileReader();\r\n    nodeReader.onload = (event) => {\r\n      var rawNodes = (nodeReader.result as string).split(\"\\n\");\r\n      for (var element of rawNodes) {\r\n        nodeIDToValue[element.split(\"\\t\")[0]] = element.split(\"\\t\")[1];\r\n      }\r\n      console.log(nodeIDToValue);\r\n      layoutReader.readAsText(files[1]);\r\n    };\r\n    nodeReader.readAsText(files[0]);\r\n  }\r\n\r\n  readJson(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    const jsonReader = new FileReader();\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    jsonReader.onload = (event) => {\r\n      var graph: Graph = JSON.parse(jsonReader.result as string);\r\n      console.log(graph);\r\n      for (var i = 0; i < graph.nodes.length; i++) {\r\n        if (graph.nodes[i].x) {\r\n          nodeData.push(0.0, graph.nodes[i].x, graph.nodes[i].y, 1.0);\r\n        } else {\r\n          nodeData.push(0.0, Math.random(), Math.random(), 1.0);\r\n        }\r\n      }\r\n      for (var i = 0; i < graph.edges.length; i++) {\r\n        var source = graph.edges[i].source;\r\n        var target = graph.edges[i].target;\r\n        edgeData.push(source, target);\r\n      }\r\n      this.setState({ nodeData: nodeData, edgeData: edgeData });\r\n    };\r\n    jsonReader.readAsText(files[0]);\r\n  }\r\n\r\n  applySpectral() {\r\n    var e = eigs(this.state.laplacian);\r\n    console.log(e);\r\n    var nodeData = this.state.nodeData;\r\n    var x = column(e.vectors, 1) as Matrix;\r\n    var y = column(e.vectors, 2) as Matrix;\r\n    var x_max = max(x);\r\n    var y_max = max(y);\r\n    var x_min = min(x);\r\n    var y_min = min(y);\r\n    for (var i = 0; i < nodeData.length / 4; i++) {\r\n      nodeData[i * 4 + 1] = (x.get([i, 0]) - x_min) / (x_max - x_min);\r\n      nodeData[i * 4 + 2] = (y.get([i, 0]) - y_min) / (y_max - y_min);\r\n    }\r\n    this.setState({ nodeData: nodeData });\r\n    this.props.setNodeEdgeData(nodeData, this.state.edgeData);\r\n  }\r\n\r\n  onSaveXML() {\r\n    var xw = new XMLWriter(true);\r\n    xw.startDocument();\r\n    xw.startElement(\"GeneTerrain\");\r\n    xw.startElement(\"Nodes\");\r\n    for (var i = 0; i < this.state.nodeData.length; i += 4) {\r\n      xw.startElement(\"Node\");\r\n      xw.writeAttribute(\"NodeID\", i / 4);\r\n      xw.writeAttribute(\"InputValue\", this.state.nodeData[i]);\r\n      xw.writeAttribute(\"InputWeight\", this.state.nodeData[i + 3]);\r\n      xw.writeAttribute(\"NodeBackendX\", this.state.nodeData[i + 1]);\r\n      xw.writeAttribute(\"NodeBackendY\", this.state.nodeData[i + 2]);\r\n      xw.endElement(\"Node\");\r\n    }\r\n    xw.endElement(\"Nodes\");\r\n    xw.startElement(\"Edges\");\r\n    for (var i = 0; i < this.state.edgeData.length; i += 2) {\r\n      xw.startElement(\"Edge\");\r\n      xw.writeAttribute(\"BeginID\", this.state.edgeData[i]);\r\n      xw.writeAttribute(\"EndID\", this.state.edgeData[i + 1]);\r\n      xw.endElement(\"Edge\");\r\n    }\r\n    xw.endElement(\"Edges\");\r\n    xw.endDocument();\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([xw.toString()], { type: \"application/xml\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"terrain.xml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <hr />\r\n        <Button className=\"benchmark_test\" onClick={this.runBenchmark}>\r\n          Run Benchmark\r\n        </Button>\r\n        <div style={{ margin: 10, color: \"white\" }}>\r\n          <p>Node count: {this.state.nodeCount}</p>\r\n          <p>Edge count: {this.state.edgeCount}</p>\r\n        </div>\r\n        <CSVLink data={this.state.FPSData}>Download FPS data</CSVLink>\r\n        <hr />\r\n\r\n        <Button className=\"d3Timing_test\" onClick={this.d3TimingStudy}>\r\n          Run D3\r\n        </Button>\r\n        <CSVLink data={this.state.d3timing} header={headerForLayout}>\r\n          Download FPS data\r\n        </CSVLink>\r\n\r\n        <Form style={{ color: \"white\" }} onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"formFile\" className=\"mt-3 mb-3\">\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={() =>\r\n                this.setState({ jsonFormat: !this.state.jsonFormat })\r\n              }\r\n              type=\"checkbox\"\r\n              label=\"Json Format\"\r\n            ></Form.Check>\r\n            <Form.Label>Select Example Files</Form.Label>\r\n            <Form.Control\r\n              className=\"form-control\"\r\n              type=\"file\"\r\n              multiple\r\n              onChange={(e) => {\r\n                if (this.state.jsonFormat) {\r\n                  this.readJson(e as React.ChangeEvent<HTMLInputElement>);\r\n                } else {\r\n                  this.readFiles(e as React.ChangeEvent<HTMLInputElement>);\r\n                }\r\n              }}\r\n            />\r\n            <Button\r\n              className=\"mt-2\"\r\n              type=\"submit\"\r\n              variant=\"secondary\"\r\n              value=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Group>\r\n          <Collapsible trigger=\"Terrain Options\">\r\n            <Form.Group>\r\n              <Form.Label> Width Factor </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={1000}\r\n                min={0}\r\n                max={2000}\r\n                onChange={(e) =>\r\n                  this.props.setWidthFactor(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label> Peak and Valley Values </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.8}\r\n                min={0.5}\r\n                max={1}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setPeakValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.2}\r\n                min={0}\r\n                max={0.5}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setValleyValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Check\r\n                defaultChecked={true}\r\n                onClick={(e) => this.props.setGlobalRange()}\r\n                type=\"checkbox\"\r\n                label=\"Use Global Min/Max\"\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Colormap Options\">\r\n            <Form.Row>\r\n              <div>Valley</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={45}\r\n                min={1}\r\n                max={60}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorValley(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Hill</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={90}\r\n                min={61}\r\n                max={120}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorHill(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Mountain</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={135}\r\n                min={121}\r\n                max={180}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorMountain(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Layers\">\r\n            <Form.Check\r\n              defaultChecked={false}\r\n              onClick={(e) => this.props.toggleTerrainLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Terrain Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleNodeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Node Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleEdgeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Edge Layer\"\r\n            />\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Force Directed Options\">\r\n            <Form.Label> Ideal Length and Cooling Factor </Form.Label>\r\n            <br />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.05}\r\n              min={0.001}\r\n              max={0.1}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setIdealLength(parseFloat(e.target.value))\r\n              }\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.9}\r\n              min={0.75}\r\n              max={0.999}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setCoolingFactor(parseFloat(e.target.value))\r\n              }\r\n            />\r\n          </Collapsible>\r\n          <Button onClick={(e) => this.props.onSave()}>Save Terrain</Button>\r\n          <br />\r\n          <Button onClick={(e) => this.applySpectral()}>\r\n            Apply Spectral Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.props.runForceDirected()}>\r\n            Run Force Directed Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.onSaveXML()}>Save Terrain to XML</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;"]}