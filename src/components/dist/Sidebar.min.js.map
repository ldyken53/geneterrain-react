{"version":3,"sources":["Sidebar.tsx"],"names":["react_1","require","react_bootstrap_1","react_collapsible_1","mathjs_1","stats_module_1","Constant","react_csv_1","xml_writer_1","d3","headers","label","key","headerForLayout","Sidebar","_super","props","_this","call","this","state","nodeData","edgeData","nodeCount","edgeCount","laplacian","sparse","adjacencyMatrix","e","jsonFormat","runBenchmark","FPSData","d3timing","handleSubmit","bind","readFiles","generateRandomGraph","generatePair","generateRandomData","refresh","runTest","testFunc","sleep","storeFPSResult","d3TimingStudy","__extends","prototype","event","preventDefault","setNodeEdgeData","time","Promise","resolve","setTimeout","self","iterationCount","iterationMeasure","json","then","data","console","log","timeToFormatData","startTime","performance","now","simulation","forceSimulation","nodes","force","forceManyBody","strength","forceCenter","width","height","forceLink","edges","distance","alphaDecay","simulationUpdate","currentTime","newData","nodesList","edgesList","length","Array","fill","maxX","maxY","i","nodeX","Math","abs","x","nodeY","y","parseInt","source","name","target","formatData","localtimeToFormatData","renderingStartTime","setState","renderTime","dt","__spreadArrays","totalTime","renderingTime","on","currentTime2","_a","totalAverageTime","reduce","a","b","renderAvergaeTime","layoutAverageTime","findAverage","renderAverageTime","edgeCounts","nodeCounts","map","n","renderingCanvas","document","querySelectorAll","style","stats","showPanel","dom","setAttribute","body","appendChild","nCount","toString","eCount","sent","e_1","min","max","randRange","floor","random","stepCount","pair","err","error","nodeLength","edgeLength","fps","refreshing_1","begin","end","requestId_1","requestAnimationFrame","TIME_FOR_EACH_TEST","FPS_Array","getFPSHistory","FPS","cancelAnimationFrame","err_1","files","nodeIDToValue","nodeIDToIndex","degreeMatrix","edgeReader","FileReader","onload","_i","edgeRaw_1","result","split","parts","push","subtract","layoutReader","layoutData_1","parseFloat","j","readAsText","nodeReader","rawNodes_1","element","readJson","jsonReader","graph","JSON","parse","applySpectral","eigs","column","vectors","x_max","y_max","x_min","y_min","get","onSaveXML","xw","startDocument","startElement","writeAttribute","endElement","endDocument","createElement","file","Blob","type","href","URL","createObjectURL","download","click","render","className","Button","onClick","margin","color","CSVLink","header","Form","onSubmit","Group","controlId","Check","defaultChecked","Label","Control","multiple","onChange","variant","value","trigger","defaultValue","setWidthFactor","step","setPeakValue","setValleyValue","setGlobalRange","Row","setColorValley","setColorHill","setColorMountain","toggleTerrainLayer","toggleNodeLayer","toggleEdgeLayer","setIdealLength","setCoolingFactor","onSave","runForceDirected","Component","exports"],"mappings":"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","file":"Sidebar.min.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { Matrix, matrix, subtract, eigs, column, min, max, index, sparse } from 'mathjs';\r\nimport Stats from \"../libs/stats.module\";\r\nimport * as Constant from \"../constant\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport XMLWriter from \"xml-writer\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst headers = [\r\n  { label: \"Node\", key: \"Node\" },\r\n  { label: \"Edge\", key: \"Edge\" },\r\n  { label: \"FPS\", key: \"FPS\" },\r\n];\r\n\r\nconst headerForLayout = [\r\n  { label: \"iterationCount\", key: \"iterationCount\" },\r\n  { label: \"time\", key: \"time\" },\r\n  { label: \"renderTime\", key: \"renderTime\" },\r\n];\r\n\r\ntype SidebarProps = {\r\n  setNodeEdgeData: (nodeData: Array<number>, edgeData: Array<number>) => void;\r\n  setWidthFactor: (widthFactor: number) => void;\r\n  setPeakValue: (value: number) => void;\r\n  setValleyValue: (value: number) => void;\r\n  setCoolingFactor: (value: number) => void;\r\n  setIdealLength: (value: number) => void;\r\n  setColorValley: (value: number) => void;\r\n  setColorHill: (value: number) => void;\r\n  setColorMountain: (value: number) => void;\r\n  setGlobalRange: () => void;\r\n  toggleNodeLayer: () => void;\r\n  toggleTerrainLayer: () => void;\r\n  toggleEdgeLayer: () => void;\r\n  runForceDirected: () => void;\r\n  onSave: () => void;\r\n};\r\ntype SidebarState = {\r\n  nodeData: Array<number>;\r\n  edgeData: Array<number>;\r\n  laplacian: Matrix;\r\n  adjacencyMatrix: Array<Array<number>>;\r\n  e: {};\r\n  nodeCount: string;\r\n  edgeCount: string;\r\n  runBenchmark: boolean;\r\n  jsonFormat: boolean;\r\n  FPSData: Array<Array<string>>;\r\n  d3timing: Array<timing>;\r\n\r\n  // canvasAdded: boolean;\r\n};\r\ntype edge = {\r\n  id: string;\r\n  source: number;\r\n  target: number;\r\n};\r\ntype node = {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype nodeD3 = {\r\n  id: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype Graph = {\r\n  nodes: Array<node>;\r\n  edges: Array<edge>;\r\n};\r\n\r\ninterface timing {\r\n  iterationCount: number;\r\n  totalTime: number;\r\n  renderingTime: number;\r\n}\r\n\r\nclass Sidebar extends React.Component<SidebarProps, SidebarState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodeData: [],\r\n      edgeData: [],\r\n      nodeCount: \"\",\r\n      edgeCount: \"\",\r\n      laplacian: sparse([]),\r\n      adjacencyMatrix: [],\r\n      e: {},\r\n      jsonFormat: true,\r\n      runBenchmark: false,\r\n      FPSData: [],\r\n      d3timing: [],\r\n      // canvasAdded: false,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.readFiles = this.readFiles.bind(this);\r\n    this.generateRandomGraph = this.generateRandomGraph.bind(this);\r\n    this.generatePair = this.generatePair.bind(this);\r\n    this.generateRandomData = this.generateRandomData.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n    this.runTest = this.runTest.bind(this);\r\n    this.runBenchmark = this.runBenchmark.bind(this);\r\n    this.testFunc = this.testFunc.bind(this);\r\n    this.sleep = this.sleep.bind(this);\r\n    this.storeFPSResult = this.storeFPSResult.bind(this);\r\n\r\n    // =========================================================\r\n    this.d3TimingStudy = this.d3TimingStudy.bind(this);\r\n    // this.randomDataGen_Computation = this.randomDataGen_Computation.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n  }\r\n\r\n  sleep(time) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, time);\r\n    });\r\n  }\r\n\r\n  // randomDataGen_Computation(nodeCount, edgeCount, width, height) {\r\n  //   var nodesWebGPU: Array<number> = [];\r\n  //   var edgesWebGPU: Array<number> = [];\r\n\r\n  //   var nodesD3: Array<nodeD3> = [];\r\n  //   var edgesD3: Array<edge> = [];\r\n\r\n  //   const dataWebGPU = {\r\n  //     nodes: nodesWebGPU,\r\n  //     edges: edgesWebGPU,\r\n  //   };\r\n\r\n  //   const dataD3 = {\r\n  //     nodes: nodesD3,\r\n  //     edges: edgesD3,\r\n  //   };\r\n\r\n  //   dataWebGPU.nodes = new Array(4 * nodeCount).fill(0);\r\n  //   dataWebGPU.edges = new Array(2 * edgeCount).fill(0);\r\n\r\n  //   for (let i = 0; i < nodeCount; i++) {\r\n  //     let x = Math.random();\r\n  //     let y = Math.random();\r\n  //     dataD3.nodes[i] = { id: i.toString(), x: x * width, y: y * height };\r\n  //     dataWebGPU.nodes[4 * i] = 0;\r\n  //     dataWebGPU.nodes[4 * i + 1] = x;\r\n  //     dataWebGPU.nodes[4 * i + 2] = y;\r\n  //     dataWebGPU.nodes[4 * i + 3] = 1;\r\n  //   }\r\n\r\n  //   const linkSet = new Set();\r\n\r\n  //   for (let i = 0; i < edgeCount; i++) {\r\n  //     let pair;\r\n  //     do {\r\n  //       pair = this.generatePair(0, nodeCount);\r\n  //     } while (linkSet.has(`${pair.source}_${pair.target}`));\r\n  //     linkSet.add(`${pair.source}_${pair.target}`);\r\n  //     linkSet.add(`${pair.target}_${pair.source}`);\r\n\r\n  //     dataD3.edges[i] = {\r\n  //       id: i.toString(),\r\n  //       source: pair.source,\r\n  //       target: pair.target,\r\n  //     };\r\n  //     dataWebGPU.edges[2 * i] = pair.source;\r\n  //     dataWebGPU.edges[2 * i + 1] = pair.target;\r\n  //   }\r\n  //   let dataCombined = {\r\n  //     dataD3,\r\n  //     dataWebGPU,\r\n  //   };\r\n  //   return dataCombined;\r\n  // }\r\n\r\n  async d3TimingStudy(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const self = this;\r\n    const width = 800;\r\n    const height = 800;\r\n    let iterationCount = 0;\r\n    const iterationMeasure = {};\r\n    let startTime;\r\n    let lastTime;\r\n    let totalTime;\r\n\r\n    // var layoutCanvas = d3\r\n    //   .select(\"#graphDiv\")\r\n    //   .append(\"canvas\")\r\n    //   .attr(\"width\", width + \"px\")\r\n    //   .attr(\"height\", height + \"px\")\r\n    //   .node();\r\n\r\n    // let layoutDiv = document.getElementById(\"#graphDiv\");\r\n    // if (layoutDiv) {\r\n    //   layoutDiv.style.color = \"white\";\r\n    // }\r\n\r\n    // let context = layoutCanvas!.getContext(\"2d\")!;\r\n    // if (!context) {\r\n    //   console.log(\"no 2d context found\");\r\n    //   return;\r\n    // }\r\n\r\n    // context.fillStyle = \"white\";\r\n\r\n    d3.json(\"./sample_test_data/sample_data10000_200000.json\").then(\r\n      (data: any) => {\r\n        console.log(data);\r\n        let timeToFormatData = 0;\r\n        startTime = performance.now();\r\n        lastTime = startTime;\r\n        const simulation = d3\r\n          .forceSimulation(data.nodes)\r\n          .force(\"charge\", d3.forceManyBody().strength(-40))\r\n          .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n          .force(\"link\", d3.forceLink(data.edges).distance(400).strength(2.0))\r\n          .alphaDecay(0.077);\r\n\r\n        initGraph(data);\r\n\r\n        function initGraph(data) {\r\n          simulation.on(\"tick\", simulationUpdate);\r\n          simulation.on(\"end\", () => {\r\n            let currentTime2 = performance.now();\r\n            totalTime = currentTime2 - startTime - timeToFormatData;\r\n            const [totalAverageTime, layoutAverageTime, renderAverageTime] =\r\n              findAverage(self.state.d3timing);\r\n            console.log(\r\n              \"totalAverageTime\",\r\n              totalAverageTime,\r\n              \"layoutAverageTime\",\r\n              layoutAverageTime,\r\n              \"averageTimetoRender\",\r\n              renderAverageTime\r\n            );\r\n            console.log(\"totalTime\", totalTime);\r\n          });\r\n        }\r\n\r\n        function formatData(nodesList, edgesList) {\r\n          var nodes: Array<number> = [];\r\n          var edges: Array<number> = [];\r\n          const data = {\r\n            nodes: nodes,\r\n            edges: edges,\r\n          };\r\n\r\n          let nodeCount = nodesList.length;\r\n          data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n          let maxX = 0;\r\n          let maxY = 0;\r\n\r\n          for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n            data.nodes[i] = 0;\r\n            let nodeX = Math.abs(nodesList[i / 4].x);\r\n            let nodeY = Math.abs(nodesList[i / 4].y);\r\n            if (nodeX > maxX) {\r\n              maxX = nodeX;\r\n            }\r\n            if (nodeY > maxY) {\r\n              maxY = nodeY;\r\n            }\r\n            data.nodes[i + 3] = 1;\r\n          }\r\n\r\n          for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n            data.nodes[i + 1] = nodesList[i / 4].x / maxX;\r\n            data.nodes[i + 2] = nodesList[i / 4].y / maxY;\r\n          }\r\n\r\n          data.edges = Array(2 * nodeCount * 20).fill(0);\r\n          for (let i = 0; i < 2 * 20 * nodeCount; i = i + 2) {\r\n            data.edges[i] = parseInt(edgesList[i / 2].source.name);\r\n            data.edges[i + 1] = parseInt(edgesList[i / 2].target.name);\r\n          }\r\n          return data;\r\n        }\r\n\r\n        function findAverage(d3timing) {\r\n          let totalAverageTime =\r\n            d3timing.reduce((a, b) => {\r\n              return a + b.totalTime;\r\n            }, 0) / d3timing.length;\r\n          let renderAvergaeTime =\r\n            d3timing.reduce((a, b) => a + b.renderingTime, 0) / d3timing.length;\r\n          let layoutAverageTime =\r\n            d3timing.reduce((a, b) => a + (b.totalTime - b.renderingTime), 0) /\r\n            d3timing.length;\r\n\r\n          return [totalAverageTime, layoutAverageTime, renderAvergaeTime];\r\n        }\r\n\r\n        function simulationUpdate() {\r\n          let currentTime = performance.now();\r\n          let newData = formatData(data.nodes, data.edges);\r\n          let formatStopTime = performance.now();\r\n          let localtimeToFormatData = formatStopTime - currentTime;\r\n          timeToFormatData += localtimeToFormatData;\r\n\r\n          let renderingStartTime = performance.now();\r\n          // context.save();\r\n          // context.strokeStyle = \"#aaa\";\r\n          // context.clearRect(0, 0, width, height);\r\n\r\n          // data.edges.forEach(function (d) {\r\n          //   context.beginPath();\r\n          //   context.moveTo(d.source.x, d.source.y);\r\n          //   context.lineTo(d.target.x, d.target.y);\r\n          //   context.stroke();\r\n          // });\r\n\r\n          // data.nodes.forEach(function (d, i) {\r\n          //   context.beginPath();\r\n          //   context.arc(d.x, d.y, 2, 0, 2 * Math.PI, true);\r\n          //   context.fillStyle = d.col ? \"red\" : \"black\";\r\n          //   context.fill();\r\n          // });\r\n\r\n          self.setState({ nodeData: newData.nodes });\r\n          self.props.setNodeEdgeData(newData.nodes, newData.edges);\r\n          //context.restore();\r\n\r\n          let renderingEndTime = performance.now();\r\n          let renderTime = renderingEndTime - renderingStartTime;\r\n\r\n          let endTime = performance.now();\r\n          // lastTime = currentTime;\r\n          let dt = endTime - currentTime - localtimeToFormatData;\r\n          iterationCount++;\r\n          console.log(iterationCount);\r\n          iterationMeasure[iterationCount] = dt;\r\n\r\n          self.setState({\r\n            d3timing: [\r\n              ...self.state.d3timing,\r\n              {\r\n                iterationCount: iterationCount,\r\n                totalTime: dt,\r\n                renderingTime: renderTime,\r\n              },\r\n            ],\r\n          });\r\n        }\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n  async runBenchmark(event: React.MouseEvent) {\r\n    try {\r\n      event.preventDefault();\r\n      // 5e2, 1e3, 2e3, 5e3, 1e4, 2e4, 3e4, 4e4, 1e5\r\n      const nodeCounts = [1e2, 1e3, 2e3, 5e3, 1e4];\r\n      const density = 20;\r\n      const edgeCounts = nodeCounts.map((n) => n * density);\r\n      this.setState({ runBenchmark: true });\r\n      let renderingCanvas = document.querySelectorAll(\"canvas\")[0];\r\n      renderingCanvas.width = 500;\r\n      renderingCanvas.height = 500;\r\n      renderingCanvas.style.width = \"500px\";\r\n      renderingCanvas.style.height = \"500px\";\r\n      // const testCase = {\r\n      //   nodeCounts,\r\n      //   edgeCounts,\r\n      // };\r\n\r\n      for (let i = 0; i < nodeCounts.length; i++) {\r\n        let stats = Stats();\r\n        stats.showPanel(0);\r\n        stats.dom.setAttribute(\"class\", \"status\");\r\n        document.body.appendChild(stats.dom);\r\n        // let stepCount = 0;\r\n        const nCount = nodeCounts[i].toString();\r\n        const eCount = edgeCounts[i].toString();\r\n\r\n        this.setState({ nodeCount: nCount });\r\n        this.setState({ edgeCount: eCount });\r\n\r\n        let data = this.generateRandomData(nodeCounts, edgeCounts, i);\r\n        this.setState({ nodeData: data.nodes });\r\n        this.setState({ edgeData: data.edges });\r\n        // this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n        await this.testFunc(data, stats);\r\n      }\r\n\r\n      this.setState({ runBenchmark: false });\r\n      renderingCanvas.width = 800;\r\n      renderingCanvas.height = 800;\r\n      renderingCanvas.style.width = \"800px\";\r\n      renderingCanvas.style.height = \"800px\";\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  generatePair(min, max) {\r\n    function randRange(min, max) {\r\n      return min + Math.floor(Math.random() * (max - min));\r\n    }\r\n    const source = randRange(min, max);\r\n    let target = randRange(min, max);\r\n    while (source === target) {\r\n      target = randRange(min, max);\r\n    }\r\n    return {\r\n      source: source,\r\n      target: target,\r\n    };\r\n  }\r\n\r\n  generateRandomData(nodeCounts, edgeCounts, stepCount) {\r\n    let nodeCount = nodeCounts[stepCount];\r\n    let edgeCount = edgeCounts[stepCount];\r\n\r\n    let generatedData = this.generateRandomGraph(nodeCount, edgeCount);\r\n    return generatedData;\r\n  }\r\n\r\n  \r\n  generateRandomGraph(nodeCount, edgeCount) {\r\n    var nodes: Array<number> = [];\r\n    var edges: Array<number> = [];\r\n    const data = {\r\n      nodes: nodes,\r\n      edges: edges,\r\n    };\r\n\r\n    data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n    for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n      data.nodes[i] = 0;\r\n      data.nodes[i + 1] = Math.random();\r\n      data.nodes[i + 2] = Math.random();\r\n      data.nodes[i + 3] = 1;\r\n    }\r\n    data.edges = Array(2 * edgeCount).fill(0);\r\n    let pair;\r\n\r\n    for (let i = 0; i < 2 * edgeCount; i = i + 2) {\r\n      pair = this.generatePair(0, nodeCount);\r\n      data.edges[i] = pair.source;\r\n      data.edges[i + 1] = pair.target;\r\n    }\r\n    console.log(\"data generated\");\r\n    return data;\r\n  }\r\n\r\n  refresh(length) {\r\n    try {\r\n      var nodes: Array<number> = [];\r\n      for (let i = 0; i < 4 * length; i = i + 4) {\r\n        nodes[i + 1] = Math.random();\r\n        nodes[i + 2] = Math.random();\r\n      }\r\n      this.setState({ nodeData: nodes });\r\n      this.props.setNodeEdgeData(nodes, this.state.edgeData);\r\n      // console.log(\"rendererd\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  storeFPSResult(nodeLength, edgeLength, fps) {\r\n    nodeLength = nodeLength.toString();\r\n    edgeLength = edgeLength.toString();\r\n    fps = fps.toString();\r\n\r\n    this.setState({\r\n      FPSData: [...this.state.FPSData, [nodeLength, edgeLength, fps]],\r\n    });\r\n  }\r\n\r\n  async testFunc(data, stats) {\r\n    let nodeLength = data.nodes.length / 4;\r\n    let edgeLength = data.edges.length / 2;\r\n    console.log(nodeLength);\r\n    await this.runTest(nodeLength, edgeLength, stats);\r\n  }\r\n\r\n  async runTest(nodeLength, edgeLength, stats) {\r\n    try {\r\n      let requestId;\r\n      let count = 0;\r\n      const refreshing = () => {\r\n        stats.begin();\r\n        // console.log(\"intiital count\", count);\r\n        // count++;\r\n        this.refresh(nodeLength);\r\n        // console.log(\"final count\", count);\r\n        stats.end();\r\n        requestId = requestAnimationFrame(refreshing);\r\n      };\r\n      refreshing();\r\n      await this.sleep(Constant.TIME_FOR_EACH_TEST);\r\n      let FPS_Array = stats.getFPSHistory();\r\n      console.log(FPS_Array);\r\n      let FPS = FPS_Array.reduce((a, b) => a + b, 0) / FPS_Array.length;\r\n      this.storeFPSResult(nodeLength, edgeLength, FPS);\r\n      cancelAnimationFrame(requestId);\r\n      return;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n  readFiles(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    console.log(files);\r\n    var nodeIDToValue = {};\r\n    // var nodeIDToPos = {};\r\n    var nodeIDToIndex = {};\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    var degreeMatrix: Array<Array<number>> = [];\r\n    var adjacencyMatrix: Array<Array<number>> = [];\r\n    const edgeReader = new FileReader();\r\n    edgeReader.onload = (event) => {\r\n      var edgeRaw = (edgeReader.result as string).split(\"\\n\");\r\n      for (var element of edgeRaw) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]] && nodeIDToValue[parts[1]]) {\r\n          edgeData.push(nodeIDToIndex[parts[0]], nodeIDToIndex[parts[1]]);\r\n          degreeMatrix[nodeIDToIndex[parts[0]]][nodeIDToIndex[parts[0]]] += 1;\r\n          degreeMatrix[nodeIDToIndex[parts[1]]][nodeIDToIndex[parts[1]]] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[0]]][\r\n            nodeIDToIndex[parts[1]]\r\n          ] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[1]]][\r\n            nodeIDToIndex[parts[0]]\r\n          ] += 1;\r\n        }\r\n      }\r\n      this.setState({ edgeData: edgeData });\r\n      var laplacian: Matrix = subtract(\r\n        sparse(degreeMatrix),\r\n        sparse(adjacencyMatrix)\r\n      ) as Matrix;\r\n      console.log(laplacian);\r\n      this.setState({ laplacian: laplacian, adjacencyMatrix: adjacencyMatrix });\r\n    };\r\n    const layoutReader = new FileReader();\r\n    layoutReader.onload = (event) => {\r\n      var layoutData = (layoutReader.result as string).split(\"\\n\");\r\n      for (var element of layoutData) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]]) {\r\n          nodeIDToIndex[parts[0]] = nodeData.length / 4;\r\n          // Pushes values to node data in order of struct for WebGPU:\r\n          // nodeValue, nodeX, nodeY, nodeSize\r\n          nodeData.push(\r\n            parseFloat(nodeIDToValue[parts[0]]),\r\n            parseFloat(parts[1]),\r\n            parseFloat(parts[2]),\r\n            parseFloat(parts[3])\r\n          );\r\n          // nodeIDToPos[parts[0]] = [parseFloat(parts[1]) * 2.0 - 1, parseFloat(parts[2]) * 2.0 - 1];\r\n        }\r\n      }\r\n      this.setState({ nodeData: nodeData });\r\n      for (var i = 0; i < nodeData.length / 4; i++) {\r\n        degreeMatrix.push([]);\r\n        adjacencyMatrix.push([]);\r\n        for (var j = 0; j < nodeData.length / 4; j++) {\r\n          degreeMatrix[i].push(0);\r\n          adjacencyMatrix[i].push(0);\r\n        }\r\n      }\r\n      edgeReader.readAsText(files[2]);\r\n    };\r\n    const nodeReader = new FileReader();\r\n    nodeReader.onload = (event) => {\r\n      var rawNodes = (nodeReader.result as string).split(\"\\n\");\r\n      for (var element of rawNodes) {\r\n        nodeIDToValue[element.split(\"\\t\")[0]] = element.split(\"\\t\")[1];\r\n      }\r\n      console.log(nodeIDToValue);\r\n      layoutReader.readAsText(files[1]);\r\n    };\r\n    nodeReader.readAsText(files[0]);\r\n  }\r\n\r\n  readJson(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    const jsonReader = new FileReader();\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    jsonReader.onload = (event) => {\r\n      var graph: Graph = JSON.parse(jsonReader.result as string);\r\n      console.log(graph);\r\n      for (var i = 0; i < graph.nodes.length; i++) {\r\n        if (graph.nodes[i].x) {\r\n          nodeData.push(0.0, graph.nodes[i].x, graph.nodes[i].y, 1.0);\r\n        } else {\r\n          nodeData.push(0.0, Math.random(), Math.random(), 1.0);\r\n        }\r\n      }\r\n      for (var i = 0; i < graph.edges.length; i++) {\r\n        var source = graph.edges[i].source;\r\n        var target = graph.edges[i].target;\r\n        edgeData.push(source, target);\r\n      }\r\n      this.setState({ nodeData: nodeData, edgeData: edgeData });\r\n    };\r\n    jsonReader.readAsText(files[0]);\r\n  }\r\n\r\n  applySpectral() {\r\n    var e = eigs(this.state.laplacian);\r\n    console.log(e);\r\n    var nodeData = this.state.nodeData;\r\n    var x = column(e.vectors, 1) as Matrix;\r\n    var y = column(e.vectors, 2) as Matrix;\r\n    var x_max = max(x);\r\n    var y_max = max(y);\r\n    var x_min = min(x);\r\n    var y_min = min(y);\r\n    for (var i = 0; i < nodeData.length / 4; i++) {\r\n      nodeData[i * 4 + 1] = (x.get([i, 0]) - x_min) / (x_max - x_min);\r\n      nodeData[i * 4 + 2] = (y.get([i, 0]) - y_min) / (y_max - y_min);\r\n    }\r\n    this.setState({ nodeData: nodeData });\r\n    this.props.setNodeEdgeData(nodeData, this.state.edgeData);\r\n  }\r\n\r\n  onSaveXML() {\r\n    var xw = new XMLWriter(true);\r\n    xw.startDocument();\r\n    xw.startElement(\"GeneTerrain\");\r\n    xw.startElement(\"Nodes\");\r\n    for (var i = 0; i < this.state.nodeData.length; i += 4) {\r\n      xw.startElement(\"Node\");\r\n      xw.writeAttribute(\"NodeID\", i / 4);\r\n      xw.writeAttribute(\"InputValue\", this.state.nodeData[i]);\r\n      xw.writeAttribute(\"InputWeight\", this.state.nodeData[i + 3]);\r\n      xw.writeAttribute(\"NodeBackendX\", this.state.nodeData[i + 1]);\r\n      xw.writeAttribute(\"NodeBackendY\", this.state.nodeData[i + 2]);\r\n      xw.endElement(\"Node\");\r\n    }\r\n    xw.endElement(\"Nodes\");\r\n    xw.startElement(\"Edges\");\r\n    for (var i = 0; i < this.state.edgeData.length; i += 2) {\r\n      xw.startElement(\"Edge\");\r\n      xw.writeAttribute(\"BeginID\", this.state.edgeData[i]);\r\n      xw.writeAttribute(\"EndID\", this.state.edgeData[i + 1]);\r\n      xw.endElement(\"Edge\");\r\n    }\r\n    xw.endElement(\"Edges\");\r\n    xw.endDocument();\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([xw.toString()], { type: \"application/xml\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"terrain.xml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <hr />\r\n        <Button className=\"benchmark_test\" onClick={this.runBenchmark}>\r\n          Run Benchmark\r\n        </Button>\r\n        <div style={{ margin: 10, color: \"white\" }}>\r\n          <p>Node count: {this.state.nodeCount}</p>\r\n          <p>Edge count: {this.state.edgeCount}</p>\r\n        </div>\r\n        <CSVLink data={this.state.FPSData}>Download FPS data</CSVLink>\r\n        <hr />\r\n\r\n        <Button className=\"d3Timing_test\" onClick={this.d3TimingStudy}>\r\n          Run D3\r\n        </Button>\r\n        <CSVLink data={this.state.d3timing} header={headerForLayout}>\r\n          Download FPS data\r\n        </CSVLink>\r\n\r\n        <Form style={{ color: \"white\" }} onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"formFile\" className=\"mt-3 mb-3\">\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={() =>\r\n                this.setState({ jsonFormat: !this.state.jsonFormat })\r\n              }\r\n              type=\"checkbox\"\r\n              label=\"Json Format\"\r\n            ></Form.Check>\r\n            <Form.Label>Select Example Files</Form.Label>\r\n            <Form.Control\r\n              className=\"form-control\"\r\n              type=\"file\"\r\n              multiple\r\n              onChange={(e) => {\r\n                if (this.state.jsonFormat) {\r\n                  this.readJson(e as React.ChangeEvent<HTMLInputElement>);\r\n                } else {\r\n                  this.readFiles(e as React.ChangeEvent<HTMLInputElement>);\r\n                }\r\n              }}\r\n            />\r\n            <Button\r\n              className=\"mt-2\"\r\n              type=\"submit\"\r\n              variant=\"secondary\"\r\n              value=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Group>\r\n          <Collapsible trigger=\"Terrain Options\">\r\n            <Form.Group>\r\n              <Form.Label> Width Factor </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={1000}\r\n                min={0}\r\n                max={2000}\r\n                onChange={(e) =>\r\n                  this.props.setWidthFactor(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label> Peak and Valley Values </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.8}\r\n                min={0.5}\r\n                max={1}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setPeakValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.2}\r\n                min={0}\r\n                max={0.5}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setValleyValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Check\r\n                defaultChecked={true}\r\n                onClick={(e) => this.props.setGlobalRange()}\r\n                type=\"checkbox\"\r\n                label=\"Use Global Min/Max\"\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Colormap Options\">\r\n            <Form.Row>\r\n              <div>Valley</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={45}\r\n                min={1}\r\n                max={60}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorValley(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Hill</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={90}\r\n                min={61}\r\n                max={120}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorHill(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Mountain</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={135}\r\n                min={121}\r\n                max={180}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorMountain(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Layers\">\r\n            <Form.Check\r\n              defaultChecked={false}\r\n              onClick={(e) => this.props.toggleTerrainLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Terrain Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleNodeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Node Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleEdgeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Edge Layer\"\r\n            />\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Force Directed Options\">\r\n            <Form.Label> Ideal Length and Cooling Factor </Form.Label>\r\n            <br />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.05}\r\n              min={0.001}\r\n              max={0.1}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setIdealLength(parseFloat(e.target.value))\r\n              }\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.9}\r\n              min={0.75}\r\n              max={0.999}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setCoolingFactor(parseFloat(e.target.value))\r\n              }\r\n            />\r\n          </Collapsible>\r\n          <Button onClick={(e) => this.props.onSave()}>Save Terrain</Button>\r\n          <br />\r\n          <Button onClick={(e) => this.applySpectral()}>\r\n            Apply Spectral Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.props.runForceDirected()}>\r\n            Run Force Directed Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.onSaveXML()}>Save Terrain to XML</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;"]}