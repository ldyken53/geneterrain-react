{"version":3,"sources":["Sidebar.tsx"],"names":["react_1","require","react_bootstrap_1","react_collapsible_1","mathjs_1","stats_module_1","Constant","react_csv_1","xml_writer_1","d3","headers","label","key","Sidebar","_super","props","_this","call","this","state","nodeData","edgeData","nodeCount","edgeCount","laplacian","sparse","adjacencyMatrix","e","jsonFormat","runBenchmark","FPSData","d3timing","handleSubmit","bind","readFiles","generateRandomGraph","generatePair","generateRandomData","refresh","runTest","testFunc","sleep","storeFPSResult","d3TimingStudy","__extends","prototype","event","preventDefault","setNodeEdgeData","time","Promise","resolve","setTimeout","self","iterationCount","iterationMeasure","layoutCanvas","select","append","attr","width","height","node","layoutDiv","document","getElementById","style","color","context","getContext","fillStyle","json","then","data","console","log","startTime","performance","now","lastTime","simulation","forceSimulation","nodes","force","forceManyBody","strength","forceCenter","forceLink","edges","distance","simulationUpdate","currentTime","dt","setState","__assign","save","strokeStyle","clearRect","forEach","d","beginPath","moveTo","source","x","y","lineTo","target","stroke","i","arc","Math","PI","col","fill","restore","on","totalTime","edgeCounts","nodeCounts","map","n","stats","showPanel","dom","setAttribute","body","appendChild","renderingCanvas","querySelectorAll","length","nCount","toString","eCount","_a","sent","min","max","randRange","floor","random","stepCount","Array","pair","edgeHashMap","Map","has","set","nodeLength","edgeLength","fps","__spreadArrays","refreshing","begin","end","requestId","requestAnimationFrame","TIME_FOR_EACH_TEST","FPS_Array","getFPSHistory","FPS","reduce","a","b","cancelAnimationFrame","files","nodeIDToValue","nodeIDToIndex","degreeMatrix","edgeReader","FileReader","onload","_i","edgeRaw_1","result","split","parts","push","subtract","layoutReader","layoutData_1","parseFloat","j","readAsText","nodeReader","rawNodes_1","element","readJson","jsonReader","graph","JSON","parse","applySpectral","eigs","column","vectors","x_max","y_max","x_min","y_min","get","onSaveXML","xw","startDocument","startElement","writeAttribute","endElement","endDocument","createElement","file","Blob","type","href","URL","createObjectURL","download","click","render","className","Button","onClick","margin","CSVLink","Form","onSubmit","Group","controlId","Check","defaultChecked","Label","Control","multiple","onChange","variant","value","trigger","defaultValue","setWidthFactor","step","setPeakValue","setValleyValue","setGlobalRange","Row","setColorValley","setColorHill","setColorMountain","toggleTerrainLayer","toggleNodeLayer","toggleEdgeLayer","setIdealLength","setCoolingFactor","onSave","runForceDirected","Component","exports"],"mappings":"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","file":"Sidebar.min.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { Matrix, matrix, subtract, eigs, column, min, max, index, sparse } from 'mathjs';\r\nimport Stats from \"../libs/stats.module\";\r\nimport * as Constant from \"../constant\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport XMLWriter from \"xml-writer\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst headers = [\r\n  { label: \"Node\", key: \"Node\" },\r\n  { label: \"Edge\", key: \"Edge\" },\r\n  { label: \"FPS\", key: \"FPS\" },\r\n];\r\n\r\n// const headerLayout = [\r\n//   { label: \"Graph\", key: \"graph1\" },\r\n//   { label: \"Iteration number\", key: \"Iteration number\" },\r\n//   { label: \"time\", key: \"time\" },\r\n// ];\r\n\r\ntype SidebarProps = {\r\n  setNodeEdgeData: (nodeData: Array<number>, edgeData: Array<number>) => void;\r\n  setWidthFactor: (widthFactor: number) => void;\r\n  setPeakValue: (value: number) => void;\r\n  setValleyValue: (value: number) => void;\r\n  setCoolingFactor: (value: number) => void;\r\n  setIdealLength: (value: number) => void;\r\n  setColorValley: (value: number) => void;\r\n  setColorHill: (value: number) => void;\r\n  setColorMountain: (value: number) => void;\r\n  setGlobalRange: () => void;\r\n  toggleNodeLayer: () => void;\r\n  toggleTerrainLayer: () => void;\r\n  toggleEdgeLayer: () => void;\r\n  runForceDirected: () => void;\r\n  onSave: () => void;\r\n};\r\ntype SidebarState = {\r\n  nodeData: Array<number>;\r\n  edgeData: Array<number>;\r\n  laplacian: Matrix;\r\n  adjacencyMatrix: Array<Array<number>>;\r\n  e: {};\r\n  nodeCount: string;\r\n  edgeCount: string;\r\n  runBenchmark: boolean;\r\n  jsonFormat: boolean;\r\n  FPSData: Array<Array<string>>;\r\n  d3timing: timing;\r\n\r\n  // canvasAdded: boolean;\r\n};\r\ntype edge = {\r\n  id: string;\r\n  source: number;\r\n  target: number;\r\n};\r\ntype node = {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype nodeD3 = {\r\n  id: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype Graph = {\r\n  nodes: Array<node>;\r\n  edges: Array<edge>;\r\n};\r\n\r\ninterface timing {\r\n  [iteration: string]: number;\r\n}\r\n\r\nclass Sidebar extends React.Component<SidebarProps, SidebarState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodeData: [],\r\n      edgeData: [],\r\n      nodeCount: \"\",\r\n      edgeCount: \"\",\r\n      laplacian: sparse([]),\r\n      adjacencyMatrix: [],\r\n      e: {},\r\n      jsonFormat: true,\r\n      runBenchmark: false,\r\n      FPSData: [],\r\n      d3timing: {},\r\n      // canvasAdded: false,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.readFiles = this.readFiles.bind(this);\r\n    this.generateRandomGraph = this.generateRandomGraph.bind(this);\r\n    this.generatePair = this.generatePair.bind(this);\r\n    this.generateRandomData = this.generateRandomData.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n    this.runTest = this.runTest.bind(this);\r\n    this.runBenchmark = this.runBenchmark.bind(this);\r\n    this.testFunc = this.testFunc.bind(this);\r\n    this.sleep = this.sleep.bind(this);\r\n    this.storeFPSResult = this.storeFPSResult.bind(this);\r\n\r\n    // =========================================================\r\n    this.d3TimingStudy = this.d3TimingStudy.bind(this);\r\n    // this.randomDataGen_Computation = this.randomDataGen_Computation.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n  }\r\n\r\n  sleep(time) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, time);\r\n    });\r\n  }\r\n\r\n  // randomDataGen_Computation(nodeCount, edgeCount, width, height) {\r\n  //   var nodesWebGPU: Array<number> = [];\r\n  //   var edgesWebGPU: Array<number> = [];\r\n\r\n  //   var nodesD3: Array<nodeD3> = [];\r\n  //   var edgesD3: Array<edge> = [];\r\n\r\n  //   const dataWebGPU = {\r\n  //     nodes: nodesWebGPU,\r\n  //     edges: edgesWebGPU,\r\n  //   };\r\n\r\n  //   const dataD3 = {\r\n  //     nodes: nodesD3,\r\n  //     edges: edgesD3,\r\n  //   };\r\n\r\n  //   dataWebGPU.nodes = new Array(4 * nodeCount).fill(0);\r\n  //   dataWebGPU.edges = new Array(2 * edgeCount).fill(0);\r\n\r\n  //   for (let i = 0; i < nodeCount; i++) {\r\n  //     let x = Math.random();\r\n  //     let y = Math.random();\r\n  //     dataD3.nodes[i] = { id: i.toString(), x: x * width, y: y * height };\r\n  //     dataWebGPU.nodes[4 * i] = 0;\r\n  //     dataWebGPU.nodes[4 * i + 1] = x;\r\n  //     dataWebGPU.nodes[4 * i + 2] = y;\r\n  //     dataWebGPU.nodes[4 * i + 3] = 1;\r\n  //   }\r\n\r\n  //   const linkSet = new Set();\r\n\r\n  //   for (let i = 0; i < edgeCount; i++) {\r\n  //     let pair;\r\n  //     do {\r\n  //       pair = this.generatePair(0, nodeCount);\r\n  //     } while (linkSet.has(`${pair.source}_${pair.target}`));\r\n  //     linkSet.add(`${pair.source}_${pair.target}`);\r\n  //     linkSet.add(`${pair.target}_${pair.source}`);\r\n\r\n  //     dataD3.edges[i] = {\r\n  //       id: i.toString(),\r\n  //       source: pair.source,\r\n  //       target: pair.target,\r\n  //     };\r\n  //     dataWebGPU.edges[2 * i] = pair.source;\r\n  //     dataWebGPU.edges[2 * i + 1] = pair.target;\r\n  //   }\r\n  //   let dataCombined = {\r\n  //     dataD3,\r\n  //     dataWebGPU,\r\n  //   };\r\n  //   return dataCombined;\r\n  // }\r\n\r\n  async d3TimingStudy(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const self = this;\r\n    const width = 800;\r\n    const height = 800;\r\n    let iterationCount = 0;\r\n    const iterationMeasure = {};\r\n    let startTime;\r\n    let lastTime;\r\n    let totalTime;\r\n\r\n    var layoutCanvas = d3\r\n      .select(\"#graphDiv\")\r\n      .append(\"canvas\")\r\n      .attr(\"width\", width + \"px\")\r\n      .attr(\"height\", height + \"px\")\r\n      .node();\r\n\r\n    let layoutDiv = document.getElementById(\"#graphDiv\");\r\n    if (layoutDiv) {\r\n      layoutDiv.style.color = \"white\";\r\n    }\r\n\r\n    let context = layoutCanvas!.getContext(\"2d\")!;\r\n    if (!context) {\r\n      console.log(\"no 2d context found\");\r\n      return;\r\n    }\r\n\r\n    context.fillStyle = \"white\";\r\n\r\n    d3.json(\"./test_small_spec.json\").then((data: any) => {\r\n      console.log(data);\r\n      startTime = performance.now();\r\n      lastTime = startTime;\r\n      const simulation = d3\r\n        .forceSimulation(data.nodes)\r\n        .force(\"charge\", d3.forceManyBody().strength(-40))\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n        .force(\"link\", d3.forceLink(data.edges).distance(5).strength(2.0));\r\n\r\n      initGraph(data);\r\n\r\n      function initGraph(data) {\r\n        console.log(data.edges);\r\n        simulation.on(\"tick\", simulationUpdate);\r\n        simulation.on(\"end\", () => {\r\n          let currentTime = performance.now();\r\n          totalTime = currentTime - startTime;\r\n          console.log(\"startTime\", startTime);\r\n          console.log(\"totalTime\", totalTime);\r\n          console.log(\"iterationMeasure\", iterationMeasure);\r\n        });\r\n      }\r\n\r\n      function simulationUpdate() {\r\n        let currentTime = performance.now();\r\n        let dt = currentTime - lastTime;\r\n        iterationCount++;\r\n        iterationMeasure[iterationCount] = dt;\r\n        lastTime = currentTime;\r\n        self.setState({\r\n          d3timing: { ...self.state.d3timing, iterationCount: dt },\r\n        });\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#aaa\";\r\n        context.clearRect(0, 0, width, height);\r\n\r\n        data.edges.forEach(function (d) {\r\n          context.beginPath();\r\n          context.moveTo(d.source.x, d.source.y);\r\n          context.lineTo(d.target.x, d.target.y);\r\n          context.stroke();\r\n        });\r\n\r\n        data.nodes.forEach(function (d, i) {\r\n          context.beginPath();\r\n          context.arc(d.x, d.y, 2, 0, 2 * Math.PI, true);\r\n          context.fillStyle = d.col ? \"red\" : \"black\";\r\n          context.fill();\r\n        });\r\n        context.restore();\r\n      }\r\n    });\r\n  }\r\n\r\n  async runBenchmark(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const nodeCounts = [1e6];\r\n    const density = 20;\r\n    const edgeCounts = nodeCounts.map((n) => n * density);\r\n    let stats = Stats();\r\n    stats.showPanel(0);\r\n    stats.dom.setAttribute(\"class\", \"status\");\r\n    document.body.appendChild(stats.dom);\r\n    this.setState({ runBenchmark: true });\r\n    let renderingCanvas = document.querySelectorAll(\"canvas\")[0];\r\n    renderingCanvas.width = 500;\r\n    renderingCanvas.height = 500;\r\n    renderingCanvas.style.width = \"500px\";\r\n    renderingCanvas.style.height = \"500px\";\r\n    // const testCase = {\r\n    //   nodeCounts,\r\n    //   edgeCounts,\r\n    // };\r\n\r\n    for (let i = 0; i < nodeCounts.length - 1; i++) {\r\n      // let stepCount = 0;\r\n      const nCount = nodeCounts[i].toString();\r\n      const eCount = edgeCounts[i].toString();\r\n\r\n      this.setState({ nodeCount: nCount });\r\n      this.setState({ edgeCount: eCount });\r\n\r\n      let data = this.generateRandomData(nodeCounts, edgeCounts, i);\r\n      this.setState({ nodeData: data.nodes });\r\n      this.setState({ edgeData: data.edges });\r\n      // this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n      await this.testFunc(data, stats);\r\n    }\r\n\r\n    this.setState({ runBenchmark: false });\r\n    renderingCanvas.width = 800;\r\n    renderingCanvas.height = 800;\r\n    renderingCanvas.style.width = \"800px\";\r\n    renderingCanvas.style.height = \"800px\";\r\n  }\r\n\r\n  generatePair(min, max) {\r\n    function randRange(min, max) {\r\n      return min + Math.floor(Math.random() * (max - min));\r\n    }\r\n    const source = randRange(min, max);\r\n    let target = randRange(min, max);\r\n    while (source === target) {\r\n      target = randRange(min, max);\r\n    }\r\n    return {\r\n      source: source,\r\n      target: target,\r\n    };\r\n  }\r\n\r\n  generateRandomData(nodeCounts, edgeCounts, stepCount) {\r\n    let nodeCount = nodeCounts[stepCount];\r\n    let edgeCount = edgeCounts[stepCount];\r\n\r\n    let generatedData = this.generateRandomGraph(nodeCount, edgeCount);\r\n    return generatedData;\r\n  }\r\n\r\n  generateRandomGraph(nodeCount, edgeCount) {\r\n    var nodes: Array<number> = [];\r\n    var edges: Array<number> = [];\r\n    const data = {\r\n      nodes: nodes,\r\n      edges: edges,\r\n    };\r\n\r\n    data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n    for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n      data.nodes[i] = 0;\r\n      data.nodes[i + 1] = Math.random();\r\n      data.nodes[i + 2] = Math.random();\r\n      data.nodes[i + 3] = 1;\r\n    }\r\n    const edgeHashMap = new Map();\r\n\r\n    data.edges = Array(2 * edgeCount).fill(0);\r\n    let pair;\r\n\r\n    for (let i = 0; i < 2 * edgeCount; i = i + 2) {\r\n      do {\r\n        pair = this.generatePair(0, nodeCount);\r\n      } while (edgeHashMap.has(`${pair.source}_${pair.target}`));\r\n      edgeHashMap.set(`${pair.source}_${pair.target}`, true);\r\n      edgeHashMap.set(`${pair.target}_${pair.source}`, true);\r\n      data.edges[i] = pair.source;\r\n      data.edges[i + 1] = pair.target;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  refresh(length) {\r\n    var nodes: Array<number> = [];\r\n    for (let i = 0; i < 4 * length; i = i + 4) {\r\n      nodes[i + 1] = Math.random();\r\n      nodes[i + 2] = Math.random();\r\n    }\r\n    this.setState({ nodeData: nodes });\r\n    this.props.setNodeEdgeData(nodes, this.state.edgeData);\r\n  }\r\n\r\n  storeFPSResult(nodeLength, edgeLength, fps) {\r\n    nodeLength = nodeLength.toString();\r\n    edgeLength = edgeLength.toString();\r\n    fps = fps.toString();\r\n\r\n    this.setState({\r\n      FPSData: [...this.state.FPSData, [nodeLength, edgeLength, fps]],\r\n    });\r\n  }\r\n\r\n  async testFunc(data, stats) {\r\n    let nodeLength = data.nodes.length / 4;\r\n    let edgeLength = data.edges.length / 2;\r\n    await this.runTest(nodeLength, edgeLength, stats);\r\n  }\r\n\r\n  async runTest(nodeLength, edgeLength, stats) {\r\n    let requestId;\r\n    const refreshing = () => {\r\n      stats.begin();\r\n      this.refresh(nodeLength);\r\n      stats.end();\r\n      requestId = requestAnimationFrame(refreshing);\r\n    };\r\n    refreshing();\r\n    await this.sleep(Constant.TIME_FOR_EACH_TEST);\r\n    let FPS_Array = stats.getFPSHistory();\r\n    let FPS = FPS_Array.reduce((a, b) => a + b, 0) / FPS_Array.length;\r\n    this.storeFPSResult(nodeLength, edgeLength, FPS);\r\n    cancelAnimationFrame(requestId);\r\n    return;\r\n  }\r\n  readFiles(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    console.log(files);\r\n    var nodeIDToValue = {};\r\n    // var nodeIDToPos = {};\r\n    var nodeIDToIndex = {};\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    var degreeMatrix: Array<Array<number>> = [];\r\n    var adjacencyMatrix: Array<Array<number>> = [];\r\n    const edgeReader = new FileReader();\r\n    edgeReader.onload = (event) => {\r\n      var edgeRaw = (edgeReader.result as string).split(\"\\n\");\r\n      for (var element of edgeRaw) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]] && nodeIDToValue[parts[1]]) {\r\n          edgeData.push(nodeIDToIndex[parts[0]], nodeIDToIndex[parts[1]]);\r\n          degreeMatrix[nodeIDToIndex[parts[0]]][nodeIDToIndex[parts[0]]] += 1;\r\n          degreeMatrix[nodeIDToIndex[parts[1]]][nodeIDToIndex[parts[1]]] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[0]]][\r\n            nodeIDToIndex[parts[1]]\r\n          ] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[1]]][\r\n            nodeIDToIndex[parts[0]]\r\n          ] += 1;\r\n        }\r\n      }\r\n      this.setState({ edgeData: edgeData });\r\n      var laplacian: Matrix = subtract(\r\n        sparse(degreeMatrix),\r\n        sparse(adjacencyMatrix)\r\n      ) as Matrix;\r\n      console.log(laplacian);\r\n      this.setState({ laplacian: laplacian, adjacencyMatrix: adjacencyMatrix });\r\n    };\r\n    const layoutReader = new FileReader();\r\n    layoutReader.onload = (event) => {\r\n      var layoutData = (layoutReader.result as string).split(\"\\n\");\r\n      for (var element of layoutData) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]]) {\r\n          nodeIDToIndex[parts[0]] = nodeData.length / 4;\r\n          // Pushes values to node data in order of struct for WebGPU:\r\n          // nodeValue, nodeX, nodeY, nodeSize\r\n          nodeData.push(\r\n            parseFloat(nodeIDToValue[parts[0]]),\r\n            parseFloat(parts[1]),\r\n            parseFloat(parts[2]),\r\n            parseFloat(parts[3])\r\n          );\r\n          // nodeIDToPos[parts[0]] = [parseFloat(parts[1]) * 2.0 - 1, parseFloat(parts[2]) * 2.0 - 1];\r\n        }\r\n      }\r\n      this.setState({ nodeData: nodeData });\r\n      for (var i = 0; i < nodeData.length / 4; i++) {\r\n        degreeMatrix.push([]);\r\n        adjacencyMatrix.push([]);\r\n        for (var j = 0; j < nodeData.length / 4; j++) {\r\n          degreeMatrix[i].push(0);\r\n          adjacencyMatrix[i].push(0);\r\n        }\r\n      }\r\n      edgeReader.readAsText(files[2]);\r\n    };\r\n    const nodeReader = new FileReader();\r\n    nodeReader.onload = (event) => {\r\n      var rawNodes = (nodeReader.result as string).split(\"\\n\");\r\n      for (var element of rawNodes) {\r\n        nodeIDToValue[element.split(\"\\t\")[0]] = element.split(\"\\t\")[1];\r\n      }\r\n      console.log(nodeIDToValue);\r\n      layoutReader.readAsText(files[1]);\r\n    };\r\n    nodeReader.readAsText(files[0]);\r\n  }\r\n\r\n  readJson(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    const jsonReader = new FileReader();\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    jsonReader.onload = (event) => {\r\n      var graph: Graph = JSON.parse(jsonReader.result as string);\r\n      console.log(graph);\r\n      for (var i = 0; i < graph.nodes.length; i++) {\r\n        if (graph.nodes[i].x) {\r\n          nodeData.push(0.0, graph.nodes[i].x, graph.nodes[i].y, 1.0);\r\n        } else {\r\n          nodeData.push(0.0, Math.random(), Math.random(), 1.0);\r\n        }\r\n      }\r\n      for (var i = 0; i < graph.edges.length; i++) {\r\n        var source = graph.edges[i].source;\r\n        var target = graph.edges[i].target;\r\n        edgeData.push(source, target);\r\n      }\r\n      this.setState({ nodeData: nodeData, edgeData: edgeData });\r\n    };\r\n    jsonReader.readAsText(files[0]);\r\n  }\r\n\r\n  applySpectral() {\r\n    var e = eigs(this.state.laplacian);\r\n    console.log(e);\r\n    var nodeData = this.state.nodeData;\r\n    var x = column(e.vectors, 1) as Matrix;\r\n    var y = column(e.vectors, 2) as Matrix;\r\n    var x_max = max(x);\r\n    var y_max = max(y);\r\n    var x_min = min(x);\r\n    var y_min = min(y);\r\n    for (var i = 0; i < nodeData.length / 4; i++) {\r\n      nodeData[i * 4 + 1] = (x.get([i, 0]) - x_min) / (x_max - x_min);\r\n      nodeData[i * 4 + 2] = (y.get([i, 0]) - y_min) / (y_max - y_min);\r\n    }\r\n    this.setState({ nodeData: nodeData });\r\n    this.props.setNodeEdgeData(nodeData, this.state.edgeData);\r\n  }\r\n\r\n  onSaveXML() {\r\n    var xw = new XMLWriter(true);\r\n    xw.startDocument();\r\n    xw.startElement(\"GeneTerrain\");\r\n    xw.startElement(\"Nodes\");\r\n    for (var i = 0; i < this.state.nodeData.length; i += 4) {\r\n      xw.startElement(\"Node\");\r\n      xw.writeAttribute(\"NodeID\", i / 4);\r\n      xw.writeAttribute(\"InputValue\", this.state.nodeData[i]);\r\n      xw.writeAttribute(\"InputWeight\", this.state.nodeData[i + 3]);\r\n      xw.writeAttribute(\"NodeBackendX\", this.state.nodeData[i + 1]);\r\n      xw.writeAttribute(\"NodeBackendY\", this.state.nodeData[i + 2]);\r\n      xw.endElement(\"Node\");\r\n    }\r\n    xw.endElement(\"Nodes\");\r\n    xw.startElement(\"Edges\");\r\n    for (var i = 0; i < this.state.edgeData.length; i += 2) {\r\n      xw.startElement(\"Edge\");\r\n      xw.writeAttribute(\"BeginID\", this.state.edgeData[i]);\r\n      xw.writeAttribute(\"EndID\", this.state.edgeData[i + 1]);\r\n      xw.endElement(\"Edge\");\r\n    }\r\n    xw.endElement(\"Edges\");\r\n    xw.endDocument();\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([xw.toString()], { type: \"application/xml\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"terrain.xml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <hr />\r\n        <Button className=\"benchmark_test\" onClick={this.runBenchmark}>\r\n          Run Benchmark\r\n        </Button>\r\n        <div style={{ margin: 10, color: \"white\" }}>\r\n          <p>Node count: {this.state.nodeCount}</p>\r\n          <p>Edge count: {this.state.edgeCount}</p>\r\n        </div>\r\n        <CSVLink data={this.state.FPSData}>Download FPS data</CSVLink>\r\n        <hr />\r\n\r\n        <Button className=\"d3Timing_test\" onClick={this.d3TimingStudy}>\r\n          Run D3\r\n        </Button>\r\n        {/* <CSVLink data={this.state.d3timing}>Download FPS data</CSVLink> */}\r\n\r\n        <Form style={{ color: \"white\" }} onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"formFile\" className=\"mt-3 mb-3\">\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={() =>\r\n                this.setState({ jsonFormat: !this.state.jsonFormat })\r\n              }\r\n              type=\"checkbox\"\r\n              label=\"Json Format\"\r\n            ></Form.Check>\r\n            <Form.Label>Select Example Files</Form.Label>\r\n            <Form.Control\r\n              className=\"form-control\"\r\n              type=\"file\"\r\n              multiple\r\n              onChange={(e) => {\r\n                if (this.state.jsonFormat) {\r\n                  this.readJson(e as React.ChangeEvent<HTMLInputElement>);\r\n                } else {\r\n                  this.readFiles(e as React.ChangeEvent<HTMLInputElement>);\r\n                }\r\n              }}\r\n            />\r\n            <Button\r\n              className=\"mt-2\"\r\n              type=\"submit\"\r\n              variant=\"secondary\"\r\n              value=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Group>\r\n          <Collapsible trigger=\"Terrain Options\">\r\n            <Form.Group>\r\n              <Form.Label> Width Factor </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={1000}\r\n                min={0}\r\n                max={2000}\r\n                onChange={(e) =>\r\n                  this.props.setWidthFactor(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label> Peak and Valley Values </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.8}\r\n                min={0.5}\r\n                max={1}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setPeakValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.2}\r\n                min={0}\r\n                max={0.5}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setValleyValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Check\r\n                defaultChecked={true}\r\n                onClick={(e) => this.props.setGlobalRange()}\r\n                type=\"checkbox\"\r\n                label=\"Use Global Min/Max\"\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Colormap Options\">\r\n            <Form.Row>\r\n              <div>Valley</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={45}\r\n                min={1}\r\n                max={60}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorValley(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Hill</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={90}\r\n                min={61}\r\n                max={120}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorHill(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Mountain</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={135}\r\n                min={121}\r\n                max={180}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorMountain(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Layers\">\r\n            <Form.Check\r\n              defaultChecked={false}\r\n              onClick={(e) => this.props.toggleTerrainLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Terrain Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleNodeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Node Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleEdgeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Edge Layer\"\r\n            />\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Force Directed Options\">\r\n            <Form.Label> Ideal Length and Cooling Factor </Form.Label>\r\n            <br />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.05}\r\n              min={0.001}\r\n              max={0.1}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setIdealLength(parseFloat(e.target.value))\r\n              }\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.9}\r\n              min={0.75}\r\n              max={0.999}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setCoolingFactor(parseFloat(e.target.value))\r\n              }\r\n            />\r\n          </Collapsible>\r\n          <Button onClick={(e) => this.props.onSave()}>Save Terrain</Button>\r\n          <br />\r\n          <Button onClick={(e) => this.applySpectral()}>\r\n            Apply Spectral Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.props.runForceDirected()}>\r\n            Run Force Directed Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.onSaveXML()}>Save Terrain to XML</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;"]}