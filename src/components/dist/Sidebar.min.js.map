{"version":3,"sources":["Sidebar.tsx"],"names":["react_1","require","react_bootstrap_1","react_collapsible_1","mathjs_1","stats_module_1","Constant","react_csv_1","xml_writer_1","headers","label","key","Sidebar","_super","props","_this","call","this","state","nodeData","edgeData","nodeCount","edgeCount","laplacian","sparse","adjacencyMatrix","e","jsonFormat","runBenchmark","FPSData","handleSubmit","bind","readFiles","generateRandomGraph","generatePair","generateRandomData","refresh","runTest","testFunc","sleep","storeFPSResult","d3TimingStudy","randomDataGen_Computation","__extends","prototype","event","preventDefault","setNodeEdgeData","time","Promise","resolve","setTimeout","width","height","dataWebGPU","nodes","edges","dataD3","Array","fill","i","x","Math","random","y","id","toString","linkSet","Set","pair","has","source","target","add","document","querySelectorAll","edgeCounts","nodeCounts","map","n","stats","showPanel","dom","setAttribute","body","appendChild","setState","renderingCanvas","style","length","nCount","eCount","data","_a","sent","min","max","randRange","floor","stepCount","edgeHashMap","Map","set","nodeLength","edgeLength","fps","__spreadArrays","refreshing","begin","end","requestId","requestAnimationFrame","TIME_FOR_EACH_TEST","FPS_Array","getFPSHistory","FPS","reduce","a","b","cancelAnimationFrame","files","console","log","nodeIDToValue","nodeIDToIndex","degreeMatrix","edgeReader","FileReader","onload","_i","edgeRaw_1","result","split","parts","push","subtract","layoutReader","layoutData_1","parseFloat","j","readAsText","nodeReader","rawNodes_1","element","readJson","jsonReader","graph","JSON","parse","applySpectral","eigs","column","vectors","x_max","y_max","x_min","y_min","get","onSaveXML","xw","startDocument","startElement","writeAttribute","endElement","endDocument","createElement","file","Blob","type","href","URL","createObjectURL","download","click","render","className","Button","onClick","margin","color","CSVLink","Form","onSubmit","Group","controlId","Check","defaultChecked","Label","Control","multiple","onChange","variant","value","trigger","defaultValue","setWidthFactor","step","setPeakValue","setValleyValue","setGlobalRange","Row","setColorValley","setColorHill","setColorMountain","toggleTerrainLayer","toggleNodeLayer","toggleEdgeLayer","setIdealLength","setCoolingFactor","onSave","runForceDirected","Component","exports"],"mappings":"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","file":"Sidebar.min.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { Matrix, matrix, subtract, eigs, column, min, max, index, sparse } from 'mathjs';\r\nimport Stats from \"../libs/stats.module\";\r\nimport * as Constant from \"../constant\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport XMLWriter from \"xml-writer\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst headers = [\r\n  { label: \"Node\", key: \"Node\" },\r\n  { label: \"Edge\", key: \"Edge\" },\r\n  { label: \"FPS\", key: \"FPS\" },\r\n];\r\n\r\ntype SidebarProps = {\r\n  setNodeEdgeData: (nodeData: Array<number>, edgeData: Array<number>) => void;\r\n  setWidthFactor: (widthFactor: number) => void;\r\n  setPeakValue: (value: number) => void;\r\n  setValleyValue: (value: number) => void;\r\n  setCoolingFactor: (value: number) => void;\r\n  setIdealLength: (value: number) => void;\r\n  setColorValley: (value: number) => void;\r\n  setColorHill: (value: number) => void;\r\n  setColorMountain: (value: number) => void;\r\n  setGlobalRange: () => void;\r\n  toggleNodeLayer: () => void;\r\n  toggleTerrainLayer: () => void;\r\n  toggleEdgeLayer: () => void;\r\n  runForceDirected: () => void;\r\n  onSave: () => void;\r\n};\r\ntype SidebarState = {\r\n  nodeData: Array<number>;\r\n  edgeData: Array<number>;\r\n  laplacian: Matrix;\r\n  adjacencyMatrix: Array<Array<number>>;\r\n  e: {};\r\n  nodeCount: string;\r\n  edgeCount: string;\r\n  runBenchmark: boolean;\r\n  jsonFormat: boolean;\r\n  FPSData: Array<Array<string>>;\r\n};\r\ntype edge = {\r\n  id: string;\r\n  source: number;\r\n  target: number;\r\n};\r\ntype node = {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype nodeD3 = {\r\n  id: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype Graph = {\r\n  nodes: Array<node>;\r\n  edges: Array<edge>;\r\n};\r\nclass Sidebar extends React.Component<SidebarProps, SidebarState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodeData: [],\r\n      edgeData: [],\r\n      nodeCount: \"\",\r\n      edgeCount: \"\",\r\n      laplacian: sparse([]),\r\n      adjacencyMatrix: [],\r\n      e: {},\r\n      jsonFormat: true,\r\n      runBenchmark: false,\r\n      FPSData: [],\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.readFiles = this.readFiles.bind(this);\r\n    this.generateRandomGraph = this.generateRandomGraph.bind(this);\r\n    this.generatePair = this.generatePair.bind(this);\r\n    this.generateRandomData = this.generateRandomData.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n    this.runTest = this.runTest.bind(this);\r\n    this.runBenchmark = this.runBenchmark.bind(this);\r\n    this.testFunc = this.testFunc.bind(this);\r\n    this.sleep = this.sleep.bind(this);\r\n    this.storeFPSResult = this.storeFPSResult.bind(this);\r\n\r\n    // =========================================================\r\n    this.d3TimingStudy = this.d3TimingStudy.bind(this);\r\n    this.randomDataGen_Computation = this.randomDataGen_Computation.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n  }\r\n\r\n  sleep(time) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, time);\r\n    });\r\n  }\r\n\r\n  randomDataGen_Computation(nodeCount, edgeCount, width, height) {\r\n    var nodesWebGPU: Array<number> = [];\r\n    var edgesWebGPU: Array<number> = [];\r\n\r\n    var nodesD3: Array<nodeD3> = [];\r\n    var edgesD3: Array<edge> = [];\r\n\r\n    const dataWebGPU = {\r\n      nodes: nodesWebGPU,\r\n      edges: edgesWebGPU,\r\n    };\r\n\r\n    const dataD3 = {\r\n      nodes: nodesD3,\r\n      edges: edgesD3,\r\n    };\r\n\r\n    dataWebGPU.nodes = new Array(4 * nodeCount).fill(0);\r\n    dataWebGPU.edges = new Array(2 * edgeCount).fill(0);\r\n\r\n    for (let i = 0; i < nodeCount; i++) {\r\n      let x = Math.random();\r\n      let y = Math.random();\r\n      dataD3.nodes[i] = { id: i.toString(), x: x * width, y: y * height };\r\n      dataWebGPU.nodes[4 * i] = 0;\r\n      dataWebGPU.nodes[4 * i + 1] = x;\r\n      dataWebGPU.nodes[4 * i + 2] = y;\r\n      dataWebGPU.nodes[4 * i + 3] = 1;\r\n    }\r\n\r\n    const linkSet = new Set();\r\n\r\n    for (let i = 0; i < edgeCount; i++) {\r\n      let pair;\r\n      do {\r\n        pair = this.generatePair(0, nodeCount);\r\n      } while (linkSet.has(`${pair.source}_${pair.target}`));\r\n      linkSet.add(`${pair.source}_${pair.target}`);\r\n      linkSet.add(`${pair.target}_${pair.source}`);\r\n\r\n      dataD3.edges[i] = {\r\n        id: i.toString(),\r\n        source: pair.source,\r\n        target: pair.target,\r\n      };\r\n      dataWebGPU.edges[2 * i] = pair.source;\r\n      dataWebGPU.edges[2 * i + 1] = pair.target;\r\n    }\r\n    let dataCombined = {\r\n      dataD3,\r\n      dataWebGPU,\r\n    };\r\n    return dataCombined;\r\n  }\r\n\r\n  async d3TimingStudy(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    let width = 800;\r\n    let height = 800;\r\n    let nodeCount = 100;\r\n    let density = 20;\r\n    let edgeCount = nodeCount * density;\r\n    let renderingCanvas = document.querySelectorAll(\"canvas\")[0];\r\n    let data = this.randomDataGen_Computation(\r\n      nodeCount,\r\n      edgeCount,\r\n      width,\r\n      height\r\n    );\r\n    // const simulation = d3\r\n    //   .forceSimulation(data.dataD3.nodes)\r\n    //   .force(\r\n    //     \"link\",\r\n    //     d3.forceLink(data.dataD3.edges).id((d) => d.id)\r\n    //   )\r\n    //   .force(\"charge\", d3.forceManyBody());\r\n    // console.log(simulation);\r\n  }\r\n\r\n  async runBenchmark(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const nodeCounts = [1e2, 5e2, 1e3, 2e3, 5e3, 1e4, 2e4, 5e4, 1e5, 2e5, 1e6];\r\n    const density = 20;\r\n    const edgeCounts = nodeCounts.map((n) => n * density);\r\n    let stats = Stats();\r\n    stats.showPanel(0);\r\n    stats.dom.setAttribute(\"class\", \"status\");\r\n    document.body.appendChild(stats.dom);\r\n    this.setState({ runBenchmark: true });\r\n    let renderingCanvas = document.querySelectorAll(\"canvas\")[0];\r\n    renderingCanvas.width = 500;\r\n    renderingCanvas.height = 500;\r\n    renderingCanvas.style.width = \"500px\";\r\n    renderingCanvas.style.height = \"500px\";\r\n    // const testCase = {\r\n    //   nodeCounts,\r\n    //   edgeCounts,\r\n    // };\r\n\r\n    for (let i = 0; i < nodeCounts.length - 1; i++) {\r\n      // let stepCount = 0;\r\n      const nCount = nodeCounts[i].toString();\r\n      const eCount = edgeCounts[i].toString();\r\n\r\n      this.setState({ nodeCount: nCount });\r\n      this.setState({ edgeCount: eCount });\r\n\r\n      let data = this.generateRandomData(nodeCounts, edgeCounts, i);\r\n      this.setState({ nodeData: data.nodes });\r\n      this.setState({ edgeData: data.edges });\r\n      // this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n      await this.testFunc(data, stats);\r\n    }\r\n\r\n    this.setState({ runBenchmark: false });\r\n    renderingCanvas.width = 800;\r\n    renderingCanvas.height = 800;\r\n    renderingCanvas.style.width = \"800px\";\r\n    renderingCanvas.style.height = \"800px\";\r\n  }\r\n\r\n  generatePair(min, max) {\r\n    function randRange(min, max) {\r\n      return min + Math.floor(Math.random() * (max - min));\r\n    }\r\n    const source = randRange(min, max);\r\n    let target = randRange(min, max);\r\n    while (source === target) {\r\n      target = randRange(min, max);\r\n    }\r\n    return {\r\n      source: source,\r\n      target: target,\r\n    };\r\n  }\r\n\r\n  generateRandomData(nodeCounts, edgeCounts, stepCount) {\r\n    let nodeCount = nodeCounts[stepCount];\r\n    let edgeCount = edgeCounts[stepCount];\r\n\r\n    let generatedData = this.generateRandomGraph(nodeCount, edgeCount);\r\n    return generatedData;\r\n  }\r\n\r\n  generateRandomGraph(nodeCount, edgeCount) {\r\n    var nodes: Array<number> = [];\r\n    var edges: Array<number> = [];\r\n    const data = {\r\n      nodes: nodes,\r\n      edges: edges,\r\n    };\r\n\r\n    data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n    for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n      data.nodes[i] = 0;\r\n      data.nodes[i + 1] = Math.random();\r\n      data.nodes[i + 2] = Math.random();\r\n      data.nodes[i + 3] = 1;\r\n    }\r\n    const edgeHashMap = new Map();\r\n\r\n    data.edges = Array(2 * edgeCount).fill(0);\r\n    let pair;\r\n\r\n    for (let i = 0; i < 2 * edgeCount; i = i + 2) {\r\n      do {\r\n        pair = this.generatePair(0, nodeCount);\r\n      } while (edgeHashMap.has(`${pair.source}_${pair.target}`));\r\n      edgeHashMap.set(`${pair.source}_${pair.target}`, true);\r\n      edgeHashMap.set(`${pair.target}_${pair.source}`, true);\r\n      data.edges[i] = pair.source;\r\n      data.edges[i + 1] = pair.target;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  refresh(length) {\r\n    var nodes: Array<number> = [];\r\n    for (let i = 0; i < 4 * length; i = i + 4) {\r\n      nodes[i + 1] = Math.random();\r\n      nodes[i + 2] = Math.random();\r\n    }\r\n    this.setState({ nodeData: nodes });\r\n    this.props.setNodeEdgeData(nodes, this.state.edgeData);\r\n  }\r\n\r\n  storeFPSResult(nodeLength, edgeLength, fps) {\r\n    nodeLength = nodeLength.toString();\r\n    edgeLength = edgeLength.toString();\r\n    fps = fps.toString();\r\n\r\n    this.setState({\r\n      FPSData: [...this.state.FPSData, [nodeLength, edgeLength, fps]],\r\n    });\r\n  }\r\n\r\n  async testFunc(data, stats) {\r\n    let nodeLength = data.nodes.length / 4;\r\n    let edgeLength = data.edges.length / 2;\r\n    await this.runTest(nodeLength, edgeLength, stats);\r\n  }\r\n\r\n  async runTest(nodeLength, edgeLength, stats) {\r\n    let requestId;\r\n    const refreshing = () => {\r\n      stats.begin();\r\n      this.refresh(nodeLength);\r\n      stats.end();\r\n      requestId = requestAnimationFrame(refreshing);\r\n    };\r\n    refreshing();\r\n    await this.sleep(Constant.TIME_FOR_EACH_TEST);\r\n    let FPS_Array = stats.getFPSHistory();\r\n    let FPS = FPS_Array.reduce((a, b) => a + b, 0) / FPS_Array.length;\r\n    this.storeFPSResult(nodeLength, edgeLength, FPS);\r\n    cancelAnimationFrame(requestId);\r\n    return;\r\n  }\r\n  readFiles(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    console.log(files);\r\n    var nodeIDToValue = {};\r\n    // var nodeIDToPos = {};\r\n    var nodeIDToIndex = {};\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    var degreeMatrix: Array<Array<number>> = [];\r\n    var adjacencyMatrix: Array<Array<number>> = [];\r\n    const edgeReader = new FileReader();\r\n    edgeReader.onload = (event) => {\r\n      var edgeRaw = (edgeReader.result as string).split(\"\\n\");\r\n      for (var element of edgeRaw) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]] && nodeIDToValue[parts[1]]) {\r\n          edgeData.push(nodeIDToIndex[parts[0]], nodeIDToIndex[parts[1]]);\r\n          degreeMatrix[nodeIDToIndex[parts[0]]][nodeIDToIndex[parts[0]]] += 1;\r\n          degreeMatrix[nodeIDToIndex[parts[1]]][nodeIDToIndex[parts[1]]] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[0]]][\r\n            nodeIDToIndex[parts[1]]\r\n          ] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[1]]][\r\n            nodeIDToIndex[parts[0]]\r\n          ] += 1;\r\n        }\r\n      }\r\n      this.setState({ edgeData: edgeData });\r\n      var laplacian: Matrix = subtract(\r\n        sparse(degreeMatrix),\r\n        sparse(adjacencyMatrix)\r\n      ) as Matrix;\r\n      console.log(laplacian);\r\n      this.setState({ laplacian: laplacian, adjacencyMatrix: adjacencyMatrix });\r\n    };\r\n    const layoutReader = new FileReader();\r\n    layoutReader.onload = (event) => {\r\n      var layoutData = (layoutReader.result as string).split(\"\\n\");\r\n      for (var element of layoutData) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]]) {\r\n          nodeIDToIndex[parts[0]] = nodeData.length / 4;\r\n          // Pushes values to node data in order of struct for WebGPU:\r\n          // nodeValue, nodeX, nodeY, nodeSize\r\n          nodeData.push(\r\n            parseFloat(nodeIDToValue[parts[0]]),\r\n            parseFloat(parts[1]),\r\n            parseFloat(parts[2]),\r\n            parseFloat(parts[3])\r\n          );\r\n          // nodeIDToPos[parts[0]] = [parseFloat(parts[1]) * 2.0 - 1, parseFloat(parts[2]) * 2.0 - 1];\r\n        }\r\n      }\r\n      this.setState({ nodeData: nodeData });\r\n      for (var i = 0; i < nodeData.length / 4; i++) {\r\n        degreeMatrix.push([]);\r\n        adjacencyMatrix.push([]);\r\n        for (var j = 0; j < nodeData.length / 4; j++) {\r\n          degreeMatrix[i].push(0);\r\n          adjacencyMatrix[i].push(0);\r\n        }\r\n      }\r\n      edgeReader.readAsText(files[2]);\r\n    };\r\n    const nodeReader = new FileReader();\r\n    nodeReader.onload = (event) => {\r\n      var rawNodes = (nodeReader.result as string).split(\"\\n\");\r\n      for (var element of rawNodes) {\r\n        nodeIDToValue[element.split(\"\\t\")[0]] = element.split(\"\\t\")[1];\r\n      }\r\n      console.log(nodeIDToValue);\r\n      layoutReader.readAsText(files[1]);\r\n    };\r\n    nodeReader.readAsText(files[0]);\r\n  }\r\n\r\n  readJson(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    const jsonReader = new FileReader();\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    jsonReader.onload = (event) => {\r\n      var graph: Graph = JSON.parse(jsonReader.result as string);\r\n      console.log(graph);\r\n      for (var i = 0; i < graph.nodes.length; i++) {\r\n        if (graph.nodes[i].x) {\r\n          nodeData.push(0.0, graph.nodes[i].x, graph.nodes[i].y, 1.0);\r\n        } else {\r\n          nodeData.push(0.0, Math.random(), Math.random(), 1.0);\r\n        }\r\n      }\r\n      for (var i = 0; i < graph.edges.length; i++) {\r\n        var source = graph.edges[i].source;\r\n        var target = graph.edges[i].target;\r\n        edgeData.push(source, target);\r\n      }\r\n      this.setState({ nodeData: nodeData, edgeData: edgeData });\r\n    };\r\n    jsonReader.readAsText(files[0]);\r\n  }\r\n\r\n  applySpectral() {\r\n    var e = eigs(this.state.laplacian);\r\n    console.log(e);\r\n    var nodeData = this.state.nodeData;\r\n    var x = column(e.vectors, 1) as Matrix;\r\n    var y = column(e.vectors, 2) as Matrix;\r\n    var x_max = max(x);\r\n    var y_max = max(y);\r\n    var x_min = min(x);\r\n    var y_min = min(y);\r\n    for (var i = 0; i < nodeData.length / 4; i++) {\r\n      nodeData[i * 4 + 1] = (x.get([i, 0]) - x_min) / (x_max - x_min);\r\n      nodeData[i * 4 + 2] = (y.get([i, 0]) - y_min) / (y_max - y_min);\r\n    }\r\n    this.setState({ nodeData: nodeData });\r\n    this.props.setNodeEdgeData(nodeData, this.state.edgeData);\r\n  }\r\n\r\n  onSaveXML() {\r\n    var xw = new XMLWriter(true);\r\n    xw.startDocument();\r\n    xw.startElement(\"GeneTerrain\");\r\n    xw.startElement(\"Nodes\");\r\n    for (var i = 0; i < this.state.nodeData.length; i += 4) {\r\n      xw.startElement(\"Node\");\r\n      xw.writeAttribute(\"NodeID\", i / 4);\r\n      xw.writeAttribute(\"InputValue\", this.state.nodeData[i]);\r\n      xw.writeAttribute(\"InputWeight\", this.state.nodeData[i + 3]);\r\n      xw.writeAttribute(\"NodeBackendX\", this.state.nodeData[i + 1]);\r\n      xw.writeAttribute(\"NodeBackendY\", this.state.nodeData[i + 2]);\r\n      xw.endElement(\"Node\");\r\n    }\r\n    xw.endElement(\"Nodes\");\r\n    xw.startElement(\"Edges\");\r\n    for (var i = 0; i < this.state.edgeData.length; i += 2) {\r\n      xw.startElement(\"Edge\");\r\n      xw.writeAttribute(\"BeginID\", this.state.edgeData[i]);\r\n      xw.writeAttribute(\"EndID\", this.state.edgeData[i + 1]);\r\n      xw.endElement(\"Edge\");\r\n    }\r\n    xw.endElement(\"Edges\");\r\n    xw.endDocument();\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([xw.toString()], { type: \"application/xml\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"terrain.xml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <hr />\r\n        <Button className=\"benchmark_test\" onClick={this.runBenchmark}>\r\n          Run Benchmark\r\n        </Button>\r\n        <div style={{ margin: 10, color: \"white\" }}>\r\n          <p>Node count: {this.state.nodeCount}</p>\r\n          <p>Edge count: {this.state.edgeCount}</p>\r\n        </div>\r\n        <CSVLink data={this.state.FPSData}>Download FPS data</CSVLink>\r\n        <hr />\r\n\r\n        <Button className=\"d3Timing_test\" onClick={this.d3TimingStudy}>\r\n          Run D3\r\n        </Button>\r\n\r\n        <Form style={{ color: \"white\" }} onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"formFile\" className=\"mt-3 mb-3\">\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={() =>\r\n                this.setState({ jsonFormat: !this.state.jsonFormat })\r\n              }\r\n              type=\"checkbox\"\r\n              label=\"Json Format\"\r\n            ></Form.Check>\r\n            <Form.Label>Select Example Files</Form.Label>\r\n            <Form.Control\r\n              className=\"form-control\"\r\n              type=\"file\"\r\n              multiple\r\n              onChange={(e) => {\r\n                if (this.state.jsonFormat) {\r\n                  this.readJson(e as React.ChangeEvent<HTMLInputElement>);\r\n                } else {\r\n                  this.readFiles(e as React.ChangeEvent<HTMLInputElement>);\r\n                }\r\n              }}\r\n            />\r\n            <Button\r\n              className=\"mt-2\"\r\n              type=\"submit\"\r\n              variant=\"secondary\"\r\n              value=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Group>\r\n          <Collapsible trigger=\"Terrain Options\">\r\n            <Form.Group>\r\n              <Form.Label> Width Factor </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={1000}\r\n                min={0}\r\n                max={2000}\r\n                onChange={(e) =>\r\n                  this.props.setWidthFactor(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label> Peak and Valley Values </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.8}\r\n                min={0.5}\r\n                max={1}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setPeakValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.2}\r\n                min={0}\r\n                max={0.5}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setValleyValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Check\r\n                defaultChecked={true}\r\n                onClick={(e) => this.props.setGlobalRange()}\r\n                type=\"checkbox\"\r\n                label=\"Use Global Min/Max\"\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Colormap Options\">\r\n            <Form.Row>\r\n              <div>Valley</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={45}\r\n                min={1}\r\n                max={60}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorValley(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Hill</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={90}\r\n                min={61}\r\n                max={120}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorHill(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Mountain</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={135}\r\n                min={121}\r\n                max={180}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorMountain(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Layers\">\r\n            <Form.Check\r\n              defaultChecked={false}\r\n              onClick={(e) => this.props.toggleTerrainLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Terrain Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleNodeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Node Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleEdgeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Edge Layer\"\r\n            />\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Force Directed Options\">\r\n            <Form.Label> Ideal Length and Cooling Factor </Form.Label>\r\n            <br />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.05}\r\n              min={0.001}\r\n              max={0.1}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setIdealLength(parseFloat(e.target.value))\r\n              }\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.9}\r\n              min={0.75}\r\n              max={0.999}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setCoolingFactor(parseFloat(e.target.value))\r\n              }\r\n            />\r\n          </Collapsible>\r\n          <Button onClick={(e) => this.props.onSave()}>Save Terrain</Button>\r\n          <br />\r\n          <Button onClick={(e) => this.applySpectral()}>\r\n            Apply Spectral Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.props.runForceDirected()}>\r\n            Run Force Directed Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.onSaveXML()}>Save Terrain to XML</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;"]}