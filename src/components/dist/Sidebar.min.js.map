{"version":3,"sources":["Sidebar.tsx"],"names":["react_1","require","react_bootstrap_1","react_collapsible_1","mathjs_1","stats_module_1","Constant","react_csv_1","xml_writer_1","d3","headers","label","key","headerForLayout","Sidebar","_super","props","_this","call","this","state","nodeData","edgeData","nodeCount","edgeCount","laplacian","sparse","adjacencyMatrix","e","jsonFormat","runBenchmark","FPSData","d3timing","mouseCapture","mouseEvents","mouseDown","mouseMove","mouseUp","handleSubmit","bind","readFiles","generateRandomGraph","generatePair","generateRandomData","refresh","runTest","testFunc","sleep","storeFPSResult","d3TimingStudy","handleMouseDown","handleMouseMove","handleMouseUp","__extends","prototype","event","console","log","setState","__assign","__spreadArrays","apply","stopPropogation","positionX","clientX","positionY","clientY","componentDidMount","canvasElement","document","getElementsByTagName","addEventListener","componentWillUnmount","removeEventListener","preventDefault","setNodeEdgeData","time","Promise","resolve","setTimeout","self","iterationCount","iterationMeasure","layoutCanvas","select","append","attr","width","height","node","layoutDiv","getElementById","style","color","context","getContext","fillStyle","json","then","data","startTime","performance","now","lastTime","simulation","forceSimulation","nodes","force","forceManyBody","strength","forceCenter","forceLink","edges","distance","simulationUpdate","currentTime","dt","renderingStartTime","save","clearRect","forEach","d","index","source","x","beginPath","strokeStyle","moveTo","y","lineTo","target","stroke","arc","Math","PI","col","fill","restore","renderTime","totalTime","renderingTime","on","__awaiter","_b","sent","currentTime2","_a","totalAverageTime","reduce","a","b","length","renderAvergaeTime","layoutAverageTime","findAverage","renderAverageTime","initGraph","edgeCounts","nodeCounts","map","n","renderingCanvas","querySelectorAll","i","stats","showPanel","dom","setAttribute","body","appendChild","nCount","toString","eCount","e_1","min","max","randRange","floor","random","stepCount","pair","Array","err","error","nodeLength","edgeLength","fps","refreshing_1","begin","end","requestId_1","requestAnimationFrame","TIME_FOR_EACH_TEST","FPS_Array","getFPSHistory","FPS","cancelAnimationFrame","err_1","files","nodeIDToValue","nodeIDToIndex","degreeMatrix","edgeReader","FileReader","onload","_i","edgeRaw_1","result","split","parts","push","subtract","layoutReader","layoutData_1","parseFloat","j","readAsText","nodeReader","rawNodes_1","element","readJson","jsonReader","nodeDataFormat2","graph","JSON","parse","applySpectral","eigs","column","vectors","x_max","y_max","x_min","y_min","get","onSaveXML","xw","startDocument","startElement","writeAttribute","endElement","endDocument","createElement","file","Blob","type","href","URL","createObjectURL","download","click","render","className","Button","onClick","margin","CSVLink","header","Form","onSubmit","Group","controlId","Check","defaultChecked","Label","Control","multiple","onChange","variant","value","trigger","defaultValue","setWidthFactor","step","setPeakValue","setValleyValue","setGlobalRange","Row","setColorValley","setColorHill","setColorMountain","toggleTerrainLayer","toggleNodeLayer","toggleEdgeLayer","setIdealLength","setCoolingFactor","onSave","runForceDirected","Component","exports"],"mappings":"ovEAAA,IAAAA,QAAAC,QAAA,SACAC,kBAAAD,QAAA,mBACAE,oBAAAF,QAAA,qBACAG,SAAAH,QAAA,UACAI,eAAAJ,QAAA,wBACAK,SAAAL,QAAA,eACAM,YAAAN,QAAA,aACAO,aAAAP,QAAA,cACAQ,GAAAR,QAAA,MAGMS,QAAU,CACd,CAAEC,MAAO,OAAQC,IAAK,QACtB,CAAED,MAAO,OAAQC,IAAK,QACtB,CAAED,MAAO,MAAOC,IAAK,QAGjBC,gBAAkB,CACtB,CAAEF,MAAO,iBAAkBC,IAAK,kBAChC,CAAED,MAAO,OAAQC,IAAK,QACtB,CAAED,MAAO,aAAcC,IAAK,eA0E9BE,QAAA,SAAAC,GACE,SAAAD,EAAYE,GAAZ,IAAAC,EACEF,EAAAG,KAAAC,KAAMH,IAAMG,YACZF,EAAKG,MAAQ,CACXC,SAAU,GACVC,SAAU,GACVC,UAAW,GACXC,UAAW,GACXC,UAAWrB,SAAAsB,OAAO,IAClBC,gBAAiB,GACjBC,EAAG,GACHC,YAAY,EACZC,cAAc,EACdC,QAAS,GACTC,SAAU,GACVC,cAAc,EACdC,YAAa,CACXC,UAAW,GACXC,UAAW,GACXC,QAAS,KAMbpB,EAAKqB,aAAerB,EAAKqB,aAAaC,KAAKtB,GAC3CA,EAAKuB,UAAYvB,EAAKuB,UAAUD,KAAKtB,GACrCA,EAAKwB,oBAAsBxB,EAAKwB,oBAAoBF,KAAKtB,GACzDA,EAAKyB,aAAezB,EAAKyB,aAAaH,KAAKtB,GAC3CA,EAAK0B,mBAAqB1B,EAAK0B,mBAAmBJ,KAAKtB,GACvDA,EAAK2B,QAAU3B,EAAK2B,QAAQL,KAAKtB,GACjCA,EAAK4B,QAAU5B,EAAK4B,QAAQN,KAAKtB,GACjCA,EAAKa,aAAeb,EAAKa,aAAaS,KAAKtB,GAC3CA,EAAK6B,SAAW7B,EAAK6B,SAASP,KAAKtB,GACnCA,EAAK8B,MAAQ9B,EAAK8B,MAAMR,KAAKtB,GAC7BA,EAAK+B,eAAiB/B,EAAK+B,eAAeT,KAAKtB,GAG/CA,EAAKgC,cAAgBhC,EAAKgC,cAAcV,KAAKtB,GAG7CA,EAAKiC,gBAAkBjC,EAAKiC,gBAAgBX,KAAKtB,GACjDA,EAAKkC,gBAAkBlC,EAAKkC,gBAAgBZ,KAAKtB,GACjDA,EAAKmC,cAAgBnC,EAAKmC,cAAcb,KAAKtB,GAE7CA,EAAKkB,UAAYlB,EAAKkB,UAAUI,KAAKtB,GACrCA,EAAKmB,UAAYnB,EAAKmB,UAAUG,KAAKtB,GACrCA,EAAKoB,QAAUpB,EAAKoB,QAAQE,KAAKtB,KA61BrC,OA54BsBoC,UAAAvC,EAAAC,GAkDpBD,EAAAwC,UAAAnB,UAAA,SAAUoB,GACRC,QAAQC,IAAI,aACZtC,KAAKuC,SAAS,CACZxB,YAAWyB,SAAAA,SAAA,GACNxC,KAAKC,MAAMc,aAAW,CACzBC,UAASyB,eAAMzC,KAAKC,MAAMc,YAAYC,UAAS,CAAEoB,SAKvDzC,EAAAwC,UAAAjB,QAAA,SAAQkB,GACNC,QAAQC,IAAGI,MAAXL,QAAerC,KAAKC,MAAMc,YAAYG,SACtClB,KAAKuC,SAAS,CACZxB,YAAWyB,SAAAA,SAAA,GACNxC,KAAKC,MAAMc,aAAW,CACzBG,QAAOuB,eAAMzC,KAAKC,MAAMc,YAAYG,QAAO,CAAEkB,SAKnDzC,EAAAwC,UAAAlB,UAAA,SAAUmB,GACRpC,KAAKuC,SAAS,CACZxB,YAAWyB,SAAAA,SAAA,GACNxC,KAAKC,MAAMc,aAAW,CACzBE,UAASwB,eAAMzC,KAAKC,MAAMc,YAAYE,UAAS,CAAEmB,SAKvDzC,EAAAwC,UAAAF,cAAA,SAAcG,GACZA,EAAMO,kBACN3C,KAAKuC,SAAS,CAAEzB,cAAc,KAGhCnB,EAAAwC,UAAAJ,gBAAA,SAAgBK,GACdA,EAAMO,kBACN,IAAIC,EAAYR,EAAMS,QAClBC,EAAYV,EAAMW,QACtBV,QAAQC,IAAIM,EAAWE,GACvB9C,KAAKuC,SAAS,CAAEzB,cAAc,KAGhCnB,EAAAwC,UAAAH,gBAAA,SAAgBI,GACd,GAAIpC,KAAKC,MAAMa,aAAc,CAC3B,IAAI8B,EAAYR,EAAMS,QAClBC,EAAYV,EAAMW,QACtBV,QAAQC,IAAIM,EAAWE,KAIrBnD,EAAAwC,UAAAa,kBAAN,2GACMC,EAAqBC,SAASC,qBAAqB,UAAU,MAE/DF,EAAcG,iBAAiB,YAAapD,KAAKgB,WACjDiC,EAAcG,iBAAiB,YAAapD,KAAKiB,WACjDgC,EAAcG,iBAAiB,UAAWpD,KAAKkB,mBAInDvB,EAAAwC,UAAAkB,qBAAA,WACE,IAAIJ,EAAqBC,SAASC,qBAAqB,UAAU,GAC7DF,IACFA,EAAcK,oBAAoB,YAAatD,KAAKgB,WACpDiC,EAAcK,oBAAoB,YAAatD,KAAKiB,WACpDgC,EAAcK,oBAAoB,UAAWtD,KAAKkB,WAItDvB,EAAAwC,UAAAhB,aAAA,SAAaiB,GACXA,EAAMmB,iBACNvD,KAAKH,MAAM2D,gBAAgBxD,KAAKC,MAAMC,SAAUF,KAAKC,MAAME,WAG7DR,EAAAwC,UAAAP,MAAA,SAAM6B,GACJ,OAAO,IAAIC,QAAQ,SAACC,GAClBC,WAAWD,EAASF,MA2DlB9D,EAAAwC,UAAAL,cAAN,SAAoBM,4GAwBlB,OAvBAA,EAAMmB,iBACAM,EAAO7D,KACC,IAEV8D,EAAiB,EACfC,EAAmB,GAKrBC,EAAe1E,GAChB2E,OAAO,aACPC,OAAO,UACPC,KAAK,QAASC,SACdD,KAAK,SAAUE,SACfC,QAECC,EAAYrB,SAASsB,eAAe,gBAEtCD,EAAUE,MAAMC,MAAQ,UAGtBC,EAAUX,EAAcY,WAAW,QAMvCD,EAAQE,UAAY,QAIpBvF,GAAGwF,KAAK,+CAA+CC,KAAK,SAACC,GAC3D3C,QAAQC,IAAI0C,GAEZC,EAAYC,YAAYC,MACxBC,EAAWH,EACX,IAAMI,EAAa/F,GAChBgG,gBAAgBN,EAAKO,OACrBC,MAAM,SAAUlG,GAAGmG,gBAAgBC,UAAU,KAC7CF,MAAM,SAAUlG,GAAGqG,YAAYvB,IAAWC,MAC1CmB,MAAM,OAAQlG,GAAGsG,UAAUZ,EAAKa,OAAOC,SAAS,KAAKJ,SAAS,IAqFjE,SAASK,IACP,IAAIC,EAAcd,YAAYC,MAC1Bc,EAAKD,EAAcZ,EAEvBrB,IADAD,GACmCmC,EACnCb,EAAWY,EAEX,IAAIE,EAAqBhB,YAAYC,MACrCR,EAAQwB,OAERxB,EAAQyB,UAAU,EAAG,EAtIX,IACC,KAuIXpB,EAAKa,MAAMQ,QAAQ,SAAUC,EAAGC,GACjB,GAATA,GACFlE,QAAQC,IAAIgE,EAAEE,OAAOC,GAEvB9B,EAAQ+B,YACR/B,EAAQgC,YAAc,4BACtBhC,EAAQiC,OAAON,EAAEE,OAAOC,EAAGH,EAAEE,OAAOK,GACpClC,EAAQmC,OAAOR,EAAES,OAAON,EAAGH,EAAES,OAAOF,GACpClC,EAAQqC,WAGVhC,EAAKO,MAAMc,QAAQ,SAAUC,GAC3B3B,EAAQ+B,YACR/B,EAAQsC,IAAIX,EAAEG,EAAGH,EAAEO,EAAG,EAAG,EAAG,EAAIK,KAAKC,IAAI,GACzCxC,EAAQE,UAAYyB,EAAEc,IAAM,MAAQ,QACpCzC,EAAQ0C,SAEV1C,EAAQ2C,UACR,IACIC,EADmBrC,YAAYC,MACCe,EACpCrC,EAAKtB,SAAS,CACZ1B,SAAQ4B,eACHoB,EAAK5D,MAAMY,SAAQ,CACtB,CACEiD,eAAgBA,EAChB0D,UAAWvB,EACXwB,cAAeF,QAtHvB,WAAA,IAAAzH,EAAAE,KACEqF,EAAWqC,GAAG,OAAQ3B,GACtBV,EAAWqC,GAAG,MAAO,WAAA,OAAAC,UAAA7H,OAAA,OAAA,EAAA,oFAInB,OAHiBuF,EAAWE,QAEZL,YAAYC,MAC5B,CAAA,EAAMtB,EAAKhE,MAAM2D,gBACfK,EAAK5D,MAAMC,SACX2D,EAAK5D,MAAME,yBAFbyH,EAAAC,OAIe3C,YAAYC,MACvB2C,EAAe5C,YAAYC,MAC/BqC,EAAYM,EAAe7C,EACrB8C,EAsDV,SAAqBlH,GACnB,IAAImH,EACFnH,EAASoH,OAAO,SAACC,EAAGC,GAClB,OAAOD,EAAIC,EAAEX,WACZ,GAAK3G,EAASuH,OACfC,EACFxH,EAASoH,OAAO,SAACC,EAAGC,GAAM,OAAAD,EAAIC,EAAEV,eAAe,GAAK5G,EAASuH,OAC3DE,EACFzH,EAASoH,OAAO,SAACC,EAAGC,GAAM,OAAAD,GAAKC,EAAEX,UAAYW,EAAEV,gBAAgB,GAC/D5G,EAASuH,OAEX,MAAO,CAACJ,EAAkBM,EAAmBD,GAhEzCE,CAAY1E,EAAK5D,MAAMY,UADlBmH,EAAgBD,EAAA,GAAEO,EAAiBP,EAAA,GAAES,EAAiBT,EAAA,GAE7D1F,QAAQC,IACN,mBACA0F,EACA,oBACAM,EACA,sBACAE,GAEFnG,QAAQC,IAAI,YAAakF,EAnCN,cAUvBiB,MApBApG,QAAQC,IAAI,gCAmLV3C,EAAAwC,UAAAxB,aAAN,SAAmByB,yJAEfA,EAAMmB,iBAGU,GACVmF,GAFAC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,MAEVC,IAAI,SAACC,GAAM,OADzB,GACyBA,IACzC7I,KAAKuC,SAAS,CAAE5B,cAAc,KAC1BmI,EAAkB5F,SAAS6F,iBAAiB,UAAU,IAC1C3E,MAAQ,IACxB0E,EAAgBzE,OAAS,IACzByE,EAAgBrE,MAAML,MAAQ,QAC9B0E,EAAgBrE,MAAMJ,OAAS,QAMtB2E,EAAI,0BAAGA,EAAIL,EAAWP,SACzBa,EAAQ/J,eAAA,WACNgK,UAAU,GAChBD,EAAME,IAAIC,aAAa,QAAS,UAChClG,SAASmG,KAAKC,YAAYL,EAAME,KAE1BI,EAASZ,EAAWK,GAAGQ,WACvBC,EAASf,EAAWM,GAAGQ,WAE7BxJ,KAAKuC,SAAS,CAAEnC,UAAWmJ,IAC3BvJ,KAAKuC,SAAS,CAAElC,UAAWoJ,IAEvBzE,EAAOhF,KAAKwB,mBAAmBmH,EAAYD,EAAYM,GAC3DhJ,KAAKuC,SAAS,CAAErC,SAAU8E,EAAKO,QAC/BvF,KAAKuC,SAAS,CAAEpC,SAAU6E,EAAKa,QAE/B,CAAA,EAAM7F,KAAK2B,SAASqD,EAAMiE,KAhBS,CAAA,EAAA,UAgBnClB,EAAAF,+BAhBqCmB,wBAmBvChJ,KAAKuC,SAAS,CAAE5B,cAAc,IAC9BmI,EAAgB1E,MAAQ,IACxB0E,EAAgBzE,OAAS,IACzByE,EAAgBrE,MAAML,MAAQ,QAC9B0E,EAAgBrE,MAAMJ,OAAS,uCAE/BhC,QAAQC,IAAIoH,gCAIhB/J,EAAAwC,UAAAZ,aAAA,SAAaoI,EAAKC,GAChB,SAASC,EAAUF,EAAKC,GACtB,OAAOD,EAAMzC,KAAK4C,MAAM5C,KAAK6C,UAAYH,EAAMD,IAIjD,IAFA,IAAMnD,EAASqD,EAAUF,EAAKC,GAC1B7C,EAAS8C,EAAUF,EAAKC,GACrBpD,IAAWO,GAChBA,EAAS8C,EAAUF,EAAKC,GAE1B,MAAO,CACLpD,OAAQA,EACRO,OAAQA,IAIZpH,EAAAwC,UAAAX,mBAAA,SAAmBmH,EAAYD,EAAYsB,GACzC,IAAI5J,EAAYuI,EAAWqB,GACvB3J,EAAYqI,EAAWsB,GAG3B,OADoBhK,KAAKsB,oBAAoBlB,EAAWC,IAI1DV,EAAAwC,UAAAb,oBAAA,SAAoBlB,EAAWC,GAC7B,IAgBI4J,EAdEjF,EAAO,CACXO,MAHyB,GAIzBM,MAHyB,IAM3Bb,EAAKO,MAAQ2E,MAAM,EAAI9J,GAAWiH,KAAK,GAEvC,IAAK,IAAI2B,EAAI,EAAGA,EAAI,EAAI5I,EAAW4I,GAAQ,EACzChE,EAAKO,MAAMyD,GAAK,EAChBhE,EAAKO,MAAMyD,EAAI,GAAK9B,KAAK6C,SACzB/E,EAAKO,MAAMyD,EAAI,GAAK9B,KAAK6C,SACzB/E,EAAKO,MAAMyD,EAAI,GAAK,EAEtBhE,EAAKa,MAAQqE,MAAM,EAAI7J,GAAWgH,KAAK,GAGvC,IAAS2B,EAAI,EAAGA,EAAI,EAAI3I,EAAW2I,GAAQ,EACzCiB,EAAOjK,KAAKuB,aAAa,EAAGnB,GAC5B4E,EAAKa,MAAMmD,GAAKiB,EAAKzD,OACrBxB,EAAKa,MAAMmD,EAAI,GAAKiB,EAAKlD,OAG3B,OADA1E,QAAQC,IAAI,kBACL0C,GAGTrF,EAAAwC,UAAAV,QAAA,SAAQ2G,GACN,IAEE,IADA,IAAI7C,EAAuB,GAClByD,EAAI,EAAGA,EAAI,EAAIZ,EAAQY,GAAQ,EACtCzD,EAAMyD,EAAI,GAAK9B,KAAK6C,SACpBxE,EAAMyD,EAAI,GAAK9B,KAAK6C,SAEtB/J,KAAKuC,SAAS,CAAErC,SAAUqF,IAC1BvF,KAAKH,MAAM2D,gBAAgB+B,EAAOvF,KAAKC,MAAME,UAE7C,MAAOgK,GACP9H,QAAQ+H,MAAMD,KAIlBxK,EAAAwC,UAAAN,eAAA,SAAewI,EAAYC,EAAYC,GACrCF,EAAaA,EAAWb,WACxBc,EAAaA,EAAWd,WACxBe,EAAMA,EAAIf,WAEVxJ,KAAKuC,SAAS,CACZ3B,QAAO6B,eAAMzC,KAAKC,MAAMW,QAAO,CAAE,CAACyJ,EAAYC,EAAYC,QAIxD5K,EAAAwC,UAAAR,SAAN,SAAeqD,EAAMiE,qHAInB,OAHIoB,EAAarF,EAAKO,MAAM6C,OAAS,EACjCkC,EAAatF,EAAKa,MAAMuC,OAAS,EACrC/F,QAAQC,IAAI+H,GACZ,CAAA,EAAMrK,KAAK0B,QAAQ2I,EAAYC,EAAYrB,kBAA3ClB,EAAAF,iBAGIlI,EAAAwC,UAAAT,QAAN,SAAc2I,EAAYC,EAAYrB,kIAclC,6BAXY,GACNuB,EAAa,WACjBvB,EAAMwB,QAGN3K,EAAK2B,QAAQ4I,GAEbpB,EAAMyB,MACNC,EAAYC,sBAAsBJ,OAGpC,CAAA,EAAMxK,KAAK4B,MAAMzC,SAAS0L,4BAM1B,OANA9C,EAAAF,OACIiD,EAAY7B,EAAM8B,gBACtB1I,QAAQC,IAAIwI,GACRE,EAAMF,EAAU7C,OAAO,SAACC,EAAGC,GAAM,OAAAD,EAAIC,GAAG,GAAK2C,EAAU1C,OAC3DpI,KAAK6B,eAAewI,EAAYC,EAAYU,GAC5CC,qBAAqBN,GACrB,CAAA,4BAEAtI,QAAQ+H,MAAMc,gCAGlBvL,EAAAwC,UAAAd,UAAA,SAAUe,GAAV,IAAAtC,EAAAE,KACQmL,EAAkB/I,EAAM2E,OAAOoE,MACrC9I,QAAQC,IAAI6I,GACZ,IAAIC,EAAgB,GAEhBC,EAAgB,GAChBnL,EAA0B,GAC1BC,EAA0B,GAC1BmL,EAAqC,GACrC9K,EAAwC,GACtC+K,EAAa,IAAIC,WACvBD,EAAWE,OAAS,SAACrJ,GAEnB,IADA,IACoBsJ,EAAA,EAAAC,EADLJ,EAAWK,OAAkBC,MAAM,MAC9BH,EAAAC,EAAAvD,OAAAsD,IAAS,CAAxB,IACCI,EADUH,EAAAD,GACMG,MAAM,MACtBT,EAAcU,EAAM,KAAOV,EAAcU,EAAM,MACjD3L,EAAS4L,KAAKV,EAAcS,EAAM,IAAKT,EAAcS,EAAM,KAC3DR,EAAaD,EAAcS,EAAM,KAAKT,EAAcS,EAAM,MAAQ,EAClER,EAAaD,EAAcS,EAAM,KAAKT,EAAcS,EAAM,MAAQ,EAClEtL,EAAgB6K,EAAcS,EAAM,KAClCT,EAAcS,EAAM,MACjB,EACLtL,EAAgB6K,EAAcS,EAAM,KAClCT,EAAcS,EAAM,MACjB,GAGTzJ,QAAQC,IAAInC,GACZL,EAAKyC,SAAS,CAAEpC,SAAUA,IAC1B,IAAIG,EAAoBrB,SAAA+M,SACtB/M,SAAAsB,OAAO+K,GACPrM,SAAAsB,OAAOC,IAET6B,QAAQC,IAAIhC,GACZR,EAAKyC,SAAS,CAAEjC,UAAWA,EAAWE,gBAAiBA,KAEzD,IAAMyL,EAAe,IAAIT,WACzBS,EAAaR,OAAS,SAACrJ,GAErB,IADA,IACoBsJ,EAAA,EAAAQ,EADFD,EAAaL,OAAkBC,MAAM,MACnCH,EAAAQ,EAAA9D,OAAAsD,IAAY,CAA3B,IACCI,EADUI,EAAAR,GACMG,MAAM,MACtBT,EAAcU,EAAM,MACtBT,EAAcS,EAAM,IAAM5L,EAASkI,OAAS,EAG5ClI,EAAS6L,KACPI,WAAWf,EAAcU,EAAM,KAC/BK,WAAWL,EAAM,IACjBK,WAAWL,EAAM,IACjBK,WAAWL,EAAM,MAKvBhM,EAAKyC,SAAS,CAAErC,SAAUA,IAC1B,IAAK,IAAI8I,EAAI,EAAGA,EAAI9I,EAASkI,OAAS,EAAGY,IAAK,CAC5CsC,EAAaS,KAAK,IAClBvL,EAAgBuL,KAAK,IACrB,IAAK,IAAIK,EAAI,EAAGA,EAAIlM,EAASkI,OAAS,EAAGgE,IACvCd,EAAatC,GAAG+C,KAAK,GACrBvL,EAAgBwI,GAAG+C,KAAK,GAG5BR,EAAWc,WAAWlB,EAAM,KAE9B,IAAMmB,EAAa,IAAId,WACvBc,EAAWb,OAAS,SAACrJ,GAEnB,IADA,IACoBsJ,EAAA,EAAAa,EADJD,EAAWV,OAAkBC,MAAM,MAC/BH,EAAAa,EAAAnE,OAAAsD,IAAU,CAAzB,IAAIc,EAAOD,EAAAb,GACdN,EAAcoB,EAAQX,MAAM,MAAM,IAAMW,EAAQX,MAAM,MAAM,GAE9DxJ,QAAQC,IAAI8I,GACZa,EAAaI,WAAWlB,EAAM,KAEhCmB,EAAWD,WAAWlB,EAAM,KAG9BxL,EAAAwC,UAAAsK,SAAA,SAASrK,GAAT,IAAAtC,EAAAE,KACQmL,EAAkB/I,EAAM2E,OAAOoE,MAC/BuB,EAAa,IAAIlB,WACnBtL,EAA0B,GAC1ByM,EAAwC,GACxCxM,EAA0B,GAC9BuM,EAAWjB,OAAS,SAACrJ,GACnB,IAAIwK,EAAeC,KAAKC,MAAMJ,EAAWd,QACzCvJ,QAAQC,IAAIsK,GACZ,IAAK,IAAI5D,EAAI,EAAGA,EAAI4D,EAAMrH,MAAM6C,OAAQY,IACtC,GAAI4D,EAAMrH,MAAMyD,GAAGvC,EACjBvG,EAAS6L,KAAK,EAAKa,EAAMrH,MAAMyD,GAAGvC,EAAGmG,EAAMrH,MAAMyD,GAAGnC,EAAG,GACvD8F,EAAgBZ,KAAK,CAACa,EAAMrH,MAAMyD,GAAGvC,EAAGmG,EAAMrH,MAAMyD,GAAGnC,EAAGmC,QACrD,CACL,IAAIpG,EAAYsE,KAAK6C,SACjBjH,EAAYoE,KAAK6C,SACrB7J,EAAS6L,KAAK,EAAKnJ,EAAWE,EAAW,GACzC6J,EAAgBZ,KAAK,CAACnJ,EAAWE,EAAWkG,IAGhD,IAASA,EAAI,EAAGA,EAAI4D,EAAM/G,MAAMuC,OAAQY,IAAK,CAC3C,IAAIxC,EAASoG,EAAM/G,MAAMmD,GAAGxC,OACxBO,EAAS6F,EAAM/G,MAAMmD,GAAGjC,OAC5B5G,EAAS4L,KAAKvF,EAAQO,GAExBjH,EAAKyC,SAAS,CAAErC,SAAUA,EAAUC,SAAUA,IAC9CkC,QAAQC,IAAInC,IAEduM,EAAWL,WAAWlB,EAAM,KAG9BxL,EAAAwC,UAAA4K,cAAA,WACE,IAAItM,EAAIxB,SAAA+N,KAAKhN,KAAKC,MAAMK,WACxB+B,QAAQC,IAAI7B,GAQZ,IAPA,IAAIP,EAAWF,KAAKC,MAAMC,SACtBuG,EAAIxH,SAAAgO,OAAOxM,EAAEyM,QAAS,GACtBrG,EAAI5H,SAAAgO,OAAOxM,EAAEyM,QAAS,GACtBC,EAAQlO,SAAA2K,IAAInD,GACZ2G,EAAQnO,SAAA2K,IAAI/C,GACZwG,EAAQpO,SAAA0K,IAAIlD,GACZ6G,EAAQrO,SAAA0K,IAAI9C,GACPmC,EAAI,EAAGA,EAAI9I,EAASkI,OAAS,EAAGY,IACvC9I,EAAa,EAAJ8I,EAAQ,IAAMvC,EAAE8G,IAAI,CAACvE,EAAG,IAAMqE,IAAUF,EAAQE,GACzDnN,EAAa,EAAJ8I,EAAQ,IAAMnC,EAAE0G,IAAI,CAACvE,EAAG,IAAMsE,IAAUF,EAAQE,GAE3DtN,KAAKuC,SAAS,CAAErC,SAAUA,IAC1BF,KAAKH,MAAM2D,gBAAgBtD,EAAUF,KAAKC,MAAME,WAGlDR,EAAAwC,UAAAqL,UAAA,WACE,IAAIC,EAAK,IAAIpO,aAAA,SAAU,GACvBoO,EAAGC,gBACHD,EAAGE,aAAa,eAChBF,EAAGE,aAAa,SAChB,IAAK,IAAI3E,EAAI,EAAGA,EAAIhJ,KAAKC,MAAMC,SAASkI,OAAQY,GAAK,EACnDyE,EAAGE,aAAa,QAChBF,EAAGG,eAAe,SAAU5E,EAAI,GAChCyE,EAAGG,eAAe,aAAc5N,KAAKC,MAAMC,SAAS8I,IACpDyE,EAAGG,eAAe,cAAe5N,KAAKC,MAAMC,SAAS8I,EAAI,IACzDyE,EAAGG,eAAe,eAAgB5N,KAAKC,MAAMC,SAAS8I,EAAI,IAC1DyE,EAAGG,eAAe,eAAgB5N,KAAKC,MAAMC,SAAS8I,EAAI,IAC1DyE,EAAGI,WAAW,QAEhBJ,EAAGI,WAAW,SACdJ,EAAGE,aAAa,SAChB,IAAS3E,EAAI,EAAGA,EAAIhJ,KAAKC,MAAME,SAASiI,OAAQY,GAAK,EACnDyE,EAAGE,aAAa,QAChBF,EAAGG,eAAe,UAAW5N,KAAKC,MAAME,SAAS6I,IACjDyE,EAAGG,eAAe,QAAS5N,KAAKC,MAAME,SAAS6I,EAAI,IACnDyE,EAAGI,WAAW,QAEhBJ,EAAGI,WAAW,SACdJ,EAAGK,cACH,IAAMtB,EAAUtJ,SAAS6K,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACR,EAAGjE,YAAa,CAAE0E,KAAM,oBAC/C1B,EAAQ2B,KAAOC,IAAIC,gBAAgBL,GACnCxB,EAAQ8B,SAAW,cACnBpL,SAASmG,KAAKC,YAAYkD,GAC1BA,EAAQ+B,SAGV5O,EAAAwC,UAAAqM,OAAA,WAAA,IAAA1O,EAAAE,KACE,OACEnB,QAAA,QAAAkP,cAAA,MAAA,CAAKU,UAAU,WACb5P,QAAA,QAAAkP,cAAA,KAAA,MACAlP,QAAA,QAAAkP,cAAChP,kBAAA2P,OAAM,CAACD,UAAU,iBAAiBE,QAAS3O,KAAKW,cAAY,iBAG7D9B,QAAA,QAAAkP,cAAA,MAAA,CAAKtJ,MAAO,CAAEmK,OAAQ,GAAIlK,MAAO,UAC/B7F,QAAA,QAAAkP,cAAA,IAAA,oBAAgB/N,KAAKC,MAAMG,WAC3BvB,QAAA,QAAAkP,cAAA,IAAA,oBAAgB/N,KAAKC,MAAMI,YAE7BxB,QAAA,QAAAkP,cAAC3O,YAAAyP,QAAO,CAAC7J,KAAMhF,KAAKC,MAAMW,SAAO,qBACjC/B,QAAA,QAAAkP,cAAA,KAAA,MAEAlP,QAAA,QAAAkP,cAAChP,kBAAA2P,OAAM,CAACD,UAAU,gBAAgBE,QAAS3O,KAAK8B,eAAa,UAG7DjD,QAAA,QAAAkP,cAAC3O,YAAAyP,QAAO,CAAC7J,KAAMhF,KAAKC,MAAMY,SAAUiO,OAAQpP,iBAAe,qBAI3Db,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAI,CAACtK,MAAO,CAAEC,MAAO,SAAWsK,SAAUhP,KAAKmB,cAC9CtC,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKE,MAAK,CAACC,UAAU,WAAWT,UAAU,aACzC5P,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKI,MAAK,CACTC,gBAAgB,EAChBT,QAAS,WACP,OAAA7O,EAAKyC,SAAS,CAAE7B,YAAaZ,EAAKG,MAAMS,cAE1CwN,KAAK,WACL1O,MAAM,gBAERX,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKM,MAAK,KAAA,wBACXxQ,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKO,QAAO,CACXb,UAAU,eACVP,KAAK,OACLqB,UAAQ,EACRC,SAAU,SAAC/O,GACLX,EAAKG,MAAMS,WACbZ,EAAK2M,SAAShM,GAEdX,EAAKuB,UAAUZ,MAIrB5B,QAAA,QAAAkP,cAAChP,kBAAA2P,OAAM,CACLD,UAAU,OACVP,KAAK,SACLuB,QAAQ,YACRC,MAAM,UAAQ,WAKlB7Q,QAAA,QAAAkP,cAAC/O,oBAAA,QAAW,CAAC2Q,QAAQ,mBACnB9Q,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKE,MAAK,KACTpQ,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKM,MAAK,KAAA,kBACXxQ,QAAA,QAAAkP,cAAA,KAAA,MACAlP,QAAA,QAAAkP,cAAA,QAAA,CACEG,KAAK,QACL0B,aAAc,IACdjG,IAAK,EACLC,IAAK,IACL4F,SAAU,SAAC/O,GACT,OAAAX,EAAKD,MAAMgQ,eAAe1D,WAAW1L,EAAEsG,OAAO2I,YAIpD7Q,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKE,MAAK,KACTpQ,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKM,MAAK,KAAA,4BACXxQ,QAAA,QAAAkP,cAAA,KAAA,MACAlP,QAAA,QAAAkP,cAAA,QAAA,CACEG,KAAK,QACL0B,aAAc,GACdjG,IAAK,GACLC,IAAK,EACLkG,KAAM,IACNN,SAAU,SAAC/O,GACT,OAAAX,EAAKD,MAAMkQ,aAAa5D,WAAW1L,EAAEsG,OAAO2I,WAGhD7Q,QAAA,QAAAkP,cAAA,QAAA,CACEG,KAAK,QACL0B,aAAc,GACdjG,IAAK,EACLC,IAAK,GACLkG,KAAM,IACNN,SAAU,SAAC/O,GACT,OAAAX,EAAKD,MAAMmQ,eAAe7D,WAAW1L,EAAEsG,OAAO2I,YAIpD7Q,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKE,MAAK,KACTpQ,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKI,MAAK,CACTC,gBAAgB,EAChBT,QAAS,SAAClO,GAAM,OAAAX,EAAKD,MAAMoQ,kBAC3B/B,KAAK,WACL1O,MAAM,yBAIZX,QAAA,QAAAkP,cAAC/O,oBAAA,QAAW,CAAC2Q,QAAQ,oBACnB9Q,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKmB,IAAG,KACPrR,QAAA,QAAAkP,cAAA,MAAA,KAAA,UACAlP,QAAA,QAAAkP,cAAA,QAAA,CACEG,KAAK,QACL0B,aAAc,GACdjG,IAAK,EACLC,IAAK,GACLkG,KAAM,EACNN,SAAU,SAAC/O,GACT,OAAAX,EAAKD,MAAMsQ,eAAehE,WAAW1L,EAAEsG,OAAO2I,YAIpD7Q,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKmB,IAAG,KACPrR,QAAA,QAAAkP,cAAA,MAAA,KAAA,QACAlP,QAAA,QAAAkP,cAAA,QAAA,CACEG,KAAK,QACL0B,aAAc,GACdjG,IAAK,GACLC,IAAK,IACLkG,KAAM,EACNN,SAAU,SAAC/O,GACT,OAAAX,EAAKD,MAAMuQ,aAAajE,WAAW1L,EAAEsG,OAAO2I,YAIlD7Q,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKmB,IAAG,KACPrR,QAAA,QAAAkP,cAAA,MAAA,KAAA,YACAlP,QAAA,QAAAkP,cAAA,QAAA,CACEG,KAAK,QACL0B,aAAc,IACdjG,IAAK,IACLC,IAAK,IACLkG,KAAM,EACNN,SAAU,SAAC/O,GACT,OAAAX,EAAKD,MAAMwQ,iBAAiBlE,WAAW1L,EAAEsG,OAAO2I,aAKxD7Q,QAAA,QAAAkP,cAAC/O,oBAAA,QAAW,CAAC2Q,QAAQ,UACnB9Q,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKI,MAAK,CACTC,gBAAgB,EAChBT,QAAS,SAAClO,GAAM,OAAAX,EAAKD,MAAMyQ,sBAC3BpC,KAAK,WACL1O,MAAM,kBAERX,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKI,MAAK,CACTC,gBAAgB,EAChBT,QAAS,SAAClO,GAAM,OAAAX,EAAKD,MAAM0Q,mBAC3BrC,KAAK,WACL1O,MAAM,eAERX,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKI,MAAK,CACTC,gBAAgB,EAChBT,QAAS,SAAClO,GAAM,OAAAX,EAAKD,MAAM2Q,mBAC3BtC,KAAK,WACL1O,MAAM,gBAGVX,QAAA,QAAAkP,cAAC/O,oBAAA,QAAW,CAAC2Q,QAAQ,0BACnB9Q,QAAA,QAAAkP,cAAChP,kBAAAgQ,KAAKM,MAAK,KAAA,qCACXxQ,QAAA,QAAAkP,cAAA,KAAA,MACAlP,QAAA,QAAAkP,cAAA,QAAA,CACEG,KAAK,QACL0B,aAAc,IACdjG,IAAK,KACLC,IAAK,GACLkG,KAAM,KACNN,SAAU,SAAC/O,GACT,OAAAX,EAAKD,MAAM4Q,eAAetE,WAAW1L,EAAEsG,OAAO2I,WAGlD7Q,QAAA,QAAAkP,cAAA,QAAA,CACEG,KAAK,QACL0B,aAAc,GACdjG,IAAK,IACLC,IAAK,KACLkG,KAAM,KACNN,SAAU,SAAC/O,GACT,OAAAX,EAAKD,MAAM6Q,iBAAiBvE,WAAW1L,EAAEsG,OAAO2I,YAItD7Q,QAAA,QAAAkP,cAAChP,kBAAA2P,OAAM,CAACC,QAAS,SAAClO,GAAM,OAAAX,EAAKD,MAAM8Q,WAAQ,gBAC3C9R,QAAA,QAAAkP,cAAA,KAAA,MACAlP,QAAA,QAAAkP,cAAChP,kBAAA2P,OAAM,CAACC,QAAS,SAAClO,GAAM,OAAAX,EAAKiN,kBAAe,yBAG5ClO,QAAA,QAAAkP,cAAA,KAAA,MACAlP,QAAA,QAAAkP,cAAChP,kBAAA2P,OAAM,CACLC,QAAS,SAAClO,GACR4B,QAAQC,IAAIxC,EAAKG,MAAMc,eACxB,cAIHlC,QAAA,QAAAkP,cAAChP,kBAAA2P,OAAM,CAACC,QAAS,SAAClO,GAAM,OAAAX,EAAKD,MAAM+Q,qBAAkB,6BAGrD/R,QAAA,QAAAkP,cAAA,KAAA,MACAlP,QAAA,QAAAkP,cAAChP,kBAAA2P,OAAM,CAACC,QAAS,SAAClO,GAAM,OAAAX,EAAK0N,cAAW,0BAKlD7N,EA54BA,CAAsBd,QAAA,QAAMgS,WA84B5BC,QAAA,QAAenR","file":"Sidebar.min.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { Matrix, matrix, subtract, eigs, column, min, max, index, sparse } from 'mathjs';\r\nimport Stats from \"../libs/stats.module\";\r\nimport * as Constant from \"../constant\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport XMLWriter from \"xml-writer\";\r\nimport * as d3 from \"d3\";\r\nimport { greadability } from \"../greadibility.js\";\r\n\r\nconst headers = [\r\n  { label: \"Node\", key: \"Node\" },\r\n  { label: \"Edge\", key: \"Edge\" },\r\n  { label: \"FPS\", key: \"FPS\" },\r\n];\r\n\r\nconst headerForLayout = [\r\n  { label: \"iterationCount\", key: \"iterationCount\" },\r\n  { label: \"time\", key: \"time\" },\r\n  { label: \"renderTime\", key: \"renderTime\" },\r\n];\r\n\r\ntype SidebarProps = {\r\n  setNodeEdgeData: (\r\n    nodeData: Array<number>,\r\n    edgeData: Array<number>\r\n  ) => Promise<void>;\r\n  setWidthFactor: (widthFactor: number) => void;\r\n  setPeakValue: (value: number) => void;\r\n  setValleyValue: (value: number) => void;\r\n  setCoolingFactor: (value: number) => void;\r\n  setIdealLength: (value: number) => void;\r\n  setColorValley: (value: number) => void;\r\n  setColorHill: (value: number) => void;\r\n  setColorMountain: (value: number) => void;\r\n  setGlobalRange: () => void;\r\n  toggleNodeLayer: () => void;\r\n  toggleTerrainLayer: () => void;\r\n  toggleEdgeLayer: () => void;\r\n  runForceDirected: () => void;\r\n  onSave: () => void;\r\n};\r\ntype SidebarState = {\r\n  nodeData: Array<number>;\r\n  edgeData: Array<number>;\r\n  laplacian: Matrix;\r\n  adjacencyMatrix: Array<Array<number>>;\r\n  e: {};\r\n  nodeCount: string;\r\n  edgeCount: string;\r\n  runBenchmark: boolean;\r\n  jsonFormat: boolean;\r\n  FPSData: Array<Array<string>>;\r\n  d3timing: Array<timing>;\r\n  mouseCapture: boolean;\r\n  mouseEvents: mouseStateType;\r\n\r\n  // canvasAdded: boolean;\r\n};\r\ntype edge = {\r\n  id: string;\r\n  source: number;\r\n  target: number;\r\n};\r\ntype node = {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype nodeD3 = {\r\n  id: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype Graph = {\r\n  nodes: Array<node>;\r\n  edges: Array<edge>;\r\n};\r\n\r\ninterface timing {\r\n  iterationCount: number;\r\n  totalTime: number;\r\n  renderingTime: number;\r\n}\r\n\r\ninterface mouseStateType {\r\n  mouseDown: any[];\r\n  mouseMove: any[];\r\n  mouseUp: any[];\r\n}\r\n\r\nclass Sidebar extends React.Component<SidebarProps, SidebarState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodeData: [],\r\n      edgeData: [],\r\n      nodeCount: \"\",\r\n      edgeCount: \"\",\r\n      laplacian: sparse([]),\r\n      adjacencyMatrix: [],\r\n      e: {},\r\n      jsonFormat: true,\r\n      runBenchmark: false,\r\n      FPSData: [],\r\n      d3timing: [],\r\n      mouseCapture: false,\r\n      mouseEvents: {\r\n        mouseDown: [],\r\n        mouseMove: [],\r\n        mouseUp: [],\r\n      },\r\n\r\n      // canvasAdded: false,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.readFiles = this.readFiles.bind(this);\r\n    this.generateRandomGraph = this.generateRandomGraph.bind(this);\r\n    this.generatePair = this.generatePair.bind(this);\r\n    this.generateRandomData = this.generateRandomData.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n    this.runTest = this.runTest.bind(this);\r\n    this.runBenchmark = this.runBenchmark.bind(this);\r\n    this.testFunc = this.testFunc.bind(this);\r\n    this.sleep = this.sleep.bind(this);\r\n    this.storeFPSResult = this.storeFPSResult.bind(this);\r\n\r\n    // =========================================================\r\n    this.d3TimingStudy = this.d3TimingStudy.bind(this);\r\n    // this.randomDataGen_Computation = this.randomDataGen_Computation.bind(this);\r\n    //---------------------------------------------------------------------\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.handleMouseUp = this.handleMouseUp.bind(this);\r\n\r\n    this.mouseDown = this.mouseDown.bind(this);\r\n    this.mouseMove = this.mouseMove.bind(this);\r\n    this.mouseUp = this.mouseUp.bind(this);\r\n  }\r\n\r\n  mouseDown(event) {\r\n    console.log(\"i am down\");\r\n    this.setState({\r\n      mouseEvents: {\r\n        ...this.state.mouseEvents,\r\n        mouseDown: [...this.state.mouseEvents.mouseDown, event],\r\n      },\r\n    });\r\n  }\r\n\r\n  mouseUp(event) {\r\n    console.log(...this.state.mouseEvents.mouseUp);\r\n    this.setState({\r\n      mouseEvents: {\r\n        ...this.state.mouseEvents,\r\n        mouseUp: [...this.state.mouseEvents.mouseUp, event],\r\n      },\r\n    });\r\n  }\r\n\r\n  mouseMove(event) {\r\n    this.setState({\r\n      mouseEvents: {\r\n        ...this.state.mouseEvents,\r\n        mouseMove: [...this.state.mouseEvents.mouseMove, event],\r\n      },\r\n    });\r\n  }\r\n\r\n  handleMouseUp(event) {\r\n    event.stopPropogation();\r\n    this.setState({ mouseCapture: false });\r\n  }\r\n\r\n  handleMouseDown(event) {\r\n    event.stopPropogation();\r\n    let positionX = event.clientX;\r\n    let positionY = event.clientY;\r\n    console.log(positionX, positionY);\r\n    this.setState({ mouseCapture: true });\r\n  }\r\n\r\n  handleMouseMove(event) {\r\n    if (this.state.mouseCapture) {\r\n      let positionX = event.clientX;\r\n      let positionY = event.clientY;\r\n      console.log(positionX, positionY);\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let canvasElement: any = document.getElementsByTagName(\"canvas\")[0];\r\n    if (canvasElement) {\r\n      canvasElement.addEventListener(\"mousedown\", this.mouseDown);\r\n      canvasElement.addEventListener(\"mousemove\", this.mouseMove);\r\n      canvasElement.addEventListener(\"mouseup\", this.mouseUp);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    let canvasElement: any = document.getElementsByTagName(\"canvas\")[0];\r\n    if (canvasElement) {\r\n      canvasElement.removeEventListener(\"mousedown\", this.mouseDown);\r\n      canvasElement.removeEventListener(\"mousemove\", this.mouseMove);\r\n      canvasElement.removeEventListener(\"mouseup\", this.mouseUp);\r\n    }\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n  }\r\n\r\n  sleep(time) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, time);\r\n    });\r\n  }\r\n\r\n  // randomDataGen_Computation(nodeCount, edgeCount, width, height) {\r\n  //   var nodesWebGPU: Array<number> = [];\r\n  //   var edgesWebGPU: Array<number> = [];\r\n\r\n  //   var nodesD3: Array<nodeD3> = [];\r\n  //   var edgesD3: Array<edge> = [];\r\n\r\n  //   const dataWebGPU = {\r\n  //     nodes: nodesWebGPU,\r\n  //     edges: edgesWebGPU,\r\n  //   };\r\n\r\n  //   const dataD3 = {\r\n  //     nodes: nodesD3,\r\n  //     edges: edgesD3,\r\n  //   };\r\n\r\n  //   dataWebGPU.nodes = new Array(4 * nodeCount).fill(0);\r\n  //   dataWebGPU.edges = new Array(2 * edgeCount).fill(0);\r\n\r\n  //   for (let i = 0; i < nodeCount; i++) {\r\n  //     let x = Math.random();\r\n  //     let y = Math.random();\r\n  //     dataD3.nodes[i] = { id: i.toString(), x: x * width, y: y * height };\r\n  //     dataWebGPU.nodes[4 * i] = 0;\r\n  //     dataWebGPU.nodes[4 * i + 1] = x;\r\n  //     dataWebGPU.nodes[4 * i + 2] = y;\r\n  //     dataWebGPU.nodes[4 * i + 3] = 1;\r\n  //   }\r\n\r\n  //   const linkSet = new Set();\r\n\r\n  //   for (let i = 0; i < edgeCount; i++) {\r\n  //     let pair;\r\n  //     do {\r\n  //       pair = this.generatePair(0, nodeCount);\r\n  //     } while (linkSet.has(`${pair.source}_${pair.target}`));\r\n  //     linkSet.add(`${pair.source}_${pair.target}`);\r\n  //     linkSet.add(`${pair.target}_${pair.source}`);\r\n\r\n  //     dataD3.edges[i] = {\r\n  //       id: i.toString(),\r\n  //       source: pair.source,\r\n  //       target: pair.target,\r\n  //     };\r\n  //     dataWebGPU.edges[2 * i] = pair.source;\r\n  //     dataWebGPU.edges[2 * i + 1] = pair.target;\r\n  //   }\r\n  //   let dataCombined = {\r\n  //     dataD3,\r\n  //     dataWebGPU,\r\n  //   };\r\n  //   return dataCombined;\r\n  // }\r\n\r\n  async d3TimingStudy(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const self = this;\r\n    const width = 800;\r\n    const height = 800;\r\n    let iterationCount = 0;\r\n    const iterationMeasure = {};\r\n    let startTime;\r\n    let lastTime;\r\n    let totalTime;\r\n\r\n    var layoutCanvas = d3\r\n      .select(\"#graphDiv\")\r\n      .append(\"canvas\")\r\n      .attr(\"width\", width + \"px\")\r\n      .attr(\"height\", height + \"px\")\r\n      .node();\r\n\r\n    let layoutDiv = document.getElementById(\"#graphDiv\");\r\n    if (layoutDiv) {\r\n      layoutDiv.style.color = \"white\";\r\n    }\r\n\r\n    let context = layoutCanvas!.getContext(\"2d\")!;\r\n    if (!context) {\r\n      console.log(\"no 2d context found\");\r\n      return;\r\n    }\r\n\r\n    context.fillStyle = \"white\";\r\n\r\n    function createLinks(edges, nodes) {}\r\n\r\n    d3.json(\"./sample_test_data/sample_data100_2000.json\").then((data: any) => {\r\n      console.log(data);\r\n      let timeToFormatData = 0;\r\n      startTime = performance.now();\r\n      lastTime = startTime;\r\n      const simulation = d3\r\n        .forceSimulation(data.nodes)\r\n        .force(\"charge\", d3.forceManyBody().strength(-40))\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n        .force(\"link\", d3.forceLink(data.edges).distance(400).strength(2.0));\r\n      // .alphaDecay(0.3);\r\n\r\n      initGraph(data);\r\n\r\n      function initGraph(data) {\r\n        simulation.on(\"tick\", simulationUpdate);\r\n        simulation.on(\"end\", async () => {\r\n          let nodesFinal = simulation.nodes();\r\n          // console.log(greadability(data.nodes, data.edges));\r\n          let extraTime = performance.now();\r\n          await self.props.setNodeEdgeData(\r\n            self.state.nodeData,\r\n            self.state.edgeData\r\n          );\r\n          let extraEnd = performance.now();\r\n          let currentTime2 = performance.now();\r\n          totalTime = currentTime2 - startTime;\r\n          const [totalAverageTime, layoutAverageTime, renderAverageTime] =\r\n            findAverage(self.state.d3timing);\r\n          console.log(\r\n            \"totalAverageTime\",\r\n            totalAverageTime,\r\n            \"layoutAverageTime\",\r\n            layoutAverageTime,\r\n            \"averageTimetoRender\",\r\n            renderAverageTime\r\n          );\r\n          console.log(\"totalTime\", totalTime - timeToFormatData);\r\n        });\r\n      }\r\n\r\n      function formatData(nodesList, edgesList) {\r\n        var nodes: Array<number> = [];\r\n        var edges: Array<number> = [];\r\n        const data = {\r\n          nodes: nodes,\r\n          edges: edges,\r\n        };\r\n\r\n        let nodeCount = nodesList.length;\r\n        data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n        let maxX = 0;\r\n        let maxY = 0;\r\n\r\n        for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n          data.nodes[i] = 0;\r\n          let nodeX = Math.abs(nodesList[i / 4].x);\r\n          let nodeY = Math.abs(nodesList[i / 4].y);\r\n          if (nodeX > maxX) {\r\n            maxX = nodeX;\r\n          }\r\n          if (nodeY > maxY) {\r\n            maxY = nodeY;\r\n          }\r\n          data.nodes[i + 3] = 1;\r\n        }\r\n\r\n        for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n          data.nodes[i + 1] = nodesList[i / 4].x / maxX;\r\n          data.nodes[i + 2] = nodesList[i / 4].y / maxY;\r\n        }\r\n\r\n        data.edges = Array(2 * nodeCount * 20).fill(0);\r\n        for (let i = 0; i < 2 * 20 * nodeCount; i = i + 2) {\r\n          data.edges[i] = parseInt(edgesList[i / 2].source.name);\r\n          data.edges[i + 1] = parseInt(edgesList[i / 2].target.name);\r\n        }\r\n        return data;\r\n      }\r\n\r\n      function findAverage(d3timing) {\r\n        let totalAverageTime =\r\n          d3timing.reduce((a, b) => {\r\n            return a + b.totalTime;\r\n          }, 0) / d3timing.length;\r\n        let renderAvergaeTime =\r\n          d3timing.reduce((a, b) => a + b.renderingTime, 0) / d3timing.length;\r\n        let layoutAverageTime =\r\n          d3timing.reduce((a, b) => a + (b.totalTime - b.renderingTime), 0) /\r\n          d3timing.length;\r\n\r\n        return [totalAverageTime, layoutAverageTime, renderAvergaeTime];\r\n      }\r\n      function simulationUpdate() {\r\n        let currentTime = performance.now();\r\n        let dt = currentTime - lastTime;\r\n        iterationCount++;\r\n        iterationMeasure[iterationCount] = dt;\r\n        lastTime = currentTime;\r\n\r\n        let renderingStartTime = performance.now();\r\n        context.save();\r\n        // context.strokeStyle = \"#aaa\";\r\n        context.clearRect(0, 0, width, height);\r\n\r\n        data.edges.forEach(function (d, index) {\r\n          if (index == 0) {\r\n            console.log(d.source.x);\r\n          }\r\n          context.beginPath();\r\n          context.strokeStyle = \"rgba(0.0, 0.0, 0.0, 0.08)\";\r\n          context.moveTo(d.source.x, d.source.y);\r\n          context.lineTo(d.target.x, d.target.y);\r\n          context.stroke();\r\n        });\r\n\r\n        data.nodes.forEach(function (d) {\r\n          context.beginPath();\r\n          context.arc(d.x, d.y, 2, 0, 2 * Math.PI, true);\r\n          context.fillStyle = d.col ? \"red\" : \"black\";\r\n          context.fill();\r\n        });\r\n        context.restore();\r\n        let renderingEndTime = performance.now();\r\n        let renderTime = renderingEndTime - renderingStartTime;\r\n        self.setState({\r\n          d3timing: [\r\n            ...self.state.d3timing,\r\n            {\r\n              iterationCount: iterationCount,\r\n              totalTime: dt,\r\n              renderingTime: renderTime,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n\r\n      // async function simulationUpdate() {\r\n      //   let currentTime = performance.now();\r\n\r\n      //   let formatStartTime = performance.now();\r\n      //   let newData = formatData(data.nodes, data.edges);\r\n      //   let formatStopTime = performance.now();\r\n      //   let localtimeToFormatData = formatStopTime - formatStartTime;\r\n      //   timeToFormatData += localtimeToFormatData;\r\n      //   self.setState({ nodeData: newData.nodes });\r\n      //   await self.props.setNodeEdgeData(newData.nodes, newData.edges);\r\n\r\n      //   let renderTime = 0;\r\n\r\n      //   let endTime = performance.now();\r\n      //   // lastTime = currentTime;\r\n      //   let dt = endTime - currentTime - localtimeToFormatData;\r\n      //   iterationCount++;\r\n      //   console.log(iterationCount, dt);\r\n      //   iterationMeasure[iterationCount] = dt;\r\n      //   self.setState({\r\n      //     d3timing: [\r\n      //       ...self.state.d3timing,\r\n      //       {\r\n      //         iterationCount: iterationCount,\r\n      //         totalTime: dt,\r\n      //         renderingTime: renderTime,\r\n      //       },\r\n      //     ],\r\n      //   });\r\n      // }\r\n    });\r\n  }\r\n\r\n  async runBenchmark(event: React.MouseEvent) {\r\n    try {\r\n      event.preventDefault();\r\n      // 5e2, 1e3, 2e3, 5e3, 1e4, 2e4, 3e4, 4e4, 1e5\r\n      const nodeCounts = [1e2, 1e3, 2e3, 5e3, 1e4];\r\n      const density = 20;\r\n      const edgeCounts = nodeCounts.map((n) => n * density);\r\n      this.setState({ runBenchmark: true });\r\n      let renderingCanvas = document.querySelectorAll(\"canvas\")[0];\r\n      renderingCanvas.width = 500;\r\n      renderingCanvas.height = 500;\r\n      renderingCanvas.style.width = \"500px\";\r\n      renderingCanvas.style.height = \"500px\";\r\n      // const testCase = {\r\n      //   nodeCounts,\r\n      //   edgeCounts,\r\n      // };\r\n\r\n      for (let i = 0; i < nodeCounts.length; i++) {\r\n        let stats = Stats();\r\n        stats.showPanel(0);\r\n        stats.dom.setAttribute(\"class\", \"status\");\r\n        document.body.appendChild(stats.dom);\r\n        // let stepCount = 0;\r\n        const nCount = nodeCounts[i].toString();\r\n        const eCount = edgeCounts[i].toString();\r\n\r\n        this.setState({ nodeCount: nCount });\r\n        this.setState({ edgeCount: eCount });\r\n\r\n        let data = this.generateRandomData(nodeCounts, edgeCounts, i);\r\n        this.setState({ nodeData: data.nodes });\r\n        this.setState({ edgeData: data.edges });\r\n        // this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n        await this.testFunc(data, stats);\r\n      }\r\n\r\n      this.setState({ runBenchmark: false });\r\n      renderingCanvas.width = 800;\r\n      renderingCanvas.height = 800;\r\n      renderingCanvas.style.width = \"800px\";\r\n      renderingCanvas.style.height = \"800px\";\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  generatePair(min, max) {\r\n    function randRange(min, max) {\r\n      return min + Math.floor(Math.random() * (max - min));\r\n    }\r\n    const source = randRange(min, max);\r\n    let target = randRange(min, max);\r\n    while (source === target) {\r\n      target = randRange(min, max);\r\n    }\r\n    return {\r\n      source: source,\r\n      target: target,\r\n    };\r\n  }\r\n\r\n  generateRandomData(nodeCounts, edgeCounts, stepCount) {\r\n    let nodeCount = nodeCounts[stepCount];\r\n    let edgeCount = edgeCounts[stepCount];\r\n\r\n    let generatedData = this.generateRandomGraph(nodeCount, edgeCount);\r\n    return generatedData;\r\n  }\r\n\r\n  generateRandomGraph(nodeCount, edgeCount) {\r\n    var nodes: Array<number> = [];\r\n    var edges: Array<number> = [];\r\n    const data = {\r\n      nodes: nodes,\r\n      edges: edges,\r\n    };\r\n\r\n    data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n    for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n      data.nodes[i] = 0;\r\n      data.nodes[i + 1] = Math.random();\r\n      data.nodes[i + 2] = Math.random();\r\n      data.nodes[i + 3] = 1;\r\n    }\r\n    data.edges = Array(2 * edgeCount).fill(0);\r\n    let pair;\r\n\r\n    for (let i = 0; i < 2 * edgeCount; i = i + 2) {\r\n      pair = this.generatePair(0, nodeCount);\r\n      data.edges[i] = pair.source;\r\n      data.edges[i + 1] = pair.target;\r\n    }\r\n    console.log(\"data generated\");\r\n    return data;\r\n  }\r\n\r\n  refresh(length) {\r\n    try {\r\n      var nodes: Array<number> = [];\r\n      for (let i = 0; i < 4 * length; i = i + 4) {\r\n        nodes[i + 1] = Math.random();\r\n        nodes[i + 2] = Math.random();\r\n      }\r\n      this.setState({ nodeData: nodes });\r\n      this.props.setNodeEdgeData(nodes, this.state.edgeData);\r\n      // console.log(\"rendererd\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  storeFPSResult(nodeLength, edgeLength, fps) {\r\n    nodeLength = nodeLength.toString();\r\n    edgeLength = edgeLength.toString();\r\n    fps = fps.toString();\r\n\r\n    this.setState({\r\n      FPSData: [...this.state.FPSData, [nodeLength, edgeLength, fps]],\r\n    });\r\n  }\r\n\r\n  async testFunc(data, stats) {\r\n    let nodeLength = data.nodes.length / 4;\r\n    let edgeLength = data.edges.length / 2;\r\n    console.log(nodeLength);\r\n    await this.runTest(nodeLength, edgeLength, stats);\r\n  }\r\n\r\n  async runTest(nodeLength, edgeLength, stats) {\r\n    try {\r\n      let requestId;\r\n      let count = 0;\r\n      const refreshing = () => {\r\n        stats.begin();\r\n        // console.log(\"intiital count\", count);\r\n        // count++;\r\n        this.refresh(nodeLength);\r\n        // console.log(\"final count\", count);\r\n        stats.end();\r\n        requestId = requestAnimationFrame(refreshing);\r\n      };\r\n      refreshing();\r\n      await this.sleep(Constant.TIME_FOR_EACH_TEST);\r\n      let FPS_Array = stats.getFPSHistory();\r\n      console.log(FPS_Array);\r\n      let FPS = FPS_Array.reduce((a, b) => a + b, 0) / FPS_Array.length;\r\n      this.storeFPSResult(nodeLength, edgeLength, FPS);\r\n      cancelAnimationFrame(requestId);\r\n      return;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n  readFiles(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    console.log(files);\r\n    var nodeIDToValue = {};\r\n    // var nodeIDToPos = {};\r\n    var nodeIDToIndex = {};\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    var degreeMatrix: Array<Array<number>> = [];\r\n    var adjacencyMatrix: Array<Array<number>> = [];\r\n    const edgeReader = new FileReader();\r\n    edgeReader.onload = (event) => {\r\n      var edgeRaw = (edgeReader.result as string).split(\"\\n\");\r\n      for (var element of edgeRaw) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]] && nodeIDToValue[parts[1]]) {\r\n          edgeData.push(nodeIDToIndex[parts[0]], nodeIDToIndex[parts[1]]);\r\n          degreeMatrix[nodeIDToIndex[parts[0]]][nodeIDToIndex[parts[0]]] += 1;\r\n          degreeMatrix[nodeIDToIndex[parts[1]]][nodeIDToIndex[parts[1]]] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[0]]][\r\n            nodeIDToIndex[parts[1]]\r\n          ] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[1]]][\r\n            nodeIDToIndex[parts[0]]\r\n          ] += 1;\r\n        }\r\n      }\r\n      console.log(edgeData);\r\n      this.setState({ edgeData: edgeData });\r\n      var laplacian: Matrix = subtract(\r\n        sparse(degreeMatrix),\r\n        sparse(adjacencyMatrix)\r\n      ) as Matrix;\r\n      console.log(laplacian);\r\n      this.setState({ laplacian: laplacian, adjacencyMatrix: adjacencyMatrix });\r\n    };\r\n    const layoutReader = new FileReader();\r\n    layoutReader.onload = (event) => {\r\n      var layoutData = (layoutReader.result as string).split(\"\\n\");\r\n      for (var element of layoutData) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]]) {\r\n          nodeIDToIndex[parts[0]] = nodeData.length / 4;\r\n          // Pushes values to node data in order of struct for WebGPU:\r\n          // nodeValue, nodeX, nodeY, nodeSize\r\n          nodeData.push(\r\n            parseFloat(nodeIDToValue[parts[0]]),\r\n            parseFloat(parts[1]),\r\n            parseFloat(parts[2]),\r\n            parseFloat(parts[3])\r\n          );\r\n          // nodeIDToPos[parts[0]] = [parseFloat(parts[1]) * 2.0 - 1, parseFloat(parts[2]) * 2.0 - 1];\r\n        }\r\n      }\r\n      this.setState({ nodeData: nodeData });\r\n      for (var i = 0; i < nodeData.length / 4; i++) {\r\n        degreeMatrix.push([]);\r\n        adjacencyMatrix.push([]);\r\n        for (var j = 0; j < nodeData.length / 4; j++) {\r\n          degreeMatrix[i].push(0);\r\n          adjacencyMatrix[i].push(0);\r\n        }\r\n      }\r\n      edgeReader.readAsText(files[2]);\r\n    };\r\n    const nodeReader = new FileReader();\r\n    nodeReader.onload = (event) => {\r\n      var rawNodes = (nodeReader.result as string).split(\"\\n\");\r\n      for (var element of rawNodes) {\r\n        nodeIDToValue[element.split(\"\\t\")[0]] = element.split(\"\\t\")[1];\r\n      }\r\n      console.log(nodeIDToValue);\r\n      layoutReader.readAsText(files[1]);\r\n    };\r\n    nodeReader.readAsText(files[0]);\r\n  }\r\n\r\n  readJson(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    const jsonReader = new FileReader();\r\n    var nodeData: Array<number> = [];\r\n    var nodeDataFormat2: Array<Array<number>> = [];\r\n    var edgeData: Array<number> = [];\r\n    jsonReader.onload = (event) => {\r\n      var graph: Graph = JSON.parse(jsonReader.result as string);\r\n      console.log(graph);\r\n      for (var i = 0; i < graph.nodes.length; i++) {\r\n        if (graph.nodes[i].x) {\r\n          nodeData.push(0.0, graph.nodes[i].x, graph.nodes[i].y, 1.0);\r\n          nodeDataFormat2.push([graph.nodes[i].x, graph.nodes[i].y, i]);\r\n        } else {\r\n          let positionX = Math.random();\r\n          let positionY = Math.random();\r\n          nodeData.push(0.0, positionX, positionY, 1.0);\r\n          nodeDataFormat2.push([positionX, positionY, i]);\r\n        }\r\n      }\r\n      for (var i = 0; i < graph.edges.length; i++) {\r\n        var source = graph.edges[i].source;\r\n        var target = graph.edges[i].target;\r\n        edgeData.push(source, target);\r\n      }\r\n      this.setState({ nodeData: nodeData, edgeData: edgeData });\r\n      console.log(edgeData);\r\n    };\r\n    jsonReader.readAsText(files[0]);\r\n  }\r\n\r\n  applySpectral() {\r\n    var e = eigs(this.state.laplacian);\r\n    console.log(e);\r\n    var nodeData = this.state.nodeData;\r\n    var x = column(e.vectors, 1) as Matrix;\r\n    var y = column(e.vectors, 2) as Matrix;\r\n    var x_max = max(x);\r\n    var y_max = max(y);\r\n    var x_min = min(x);\r\n    var y_min = min(y);\r\n    for (var i = 0; i < nodeData.length / 4; i++) {\r\n      nodeData[i * 4 + 1] = (x.get([i, 0]) - x_min) / (x_max - x_min);\r\n      nodeData[i * 4 + 2] = (y.get([i, 0]) - y_min) / (y_max - y_min);\r\n    }\r\n    this.setState({ nodeData: nodeData });\r\n    this.props.setNodeEdgeData(nodeData, this.state.edgeData);\r\n  }\r\n\r\n  onSaveXML() {\r\n    var xw = new XMLWriter(true);\r\n    xw.startDocument();\r\n    xw.startElement(\"GeneTerrain\");\r\n    xw.startElement(\"Nodes\");\r\n    for (var i = 0; i < this.state.nodeData.length; i += 4) {\r\n      xw.startElement(\"Node\");\r\n      xw.writeAttribute(\"NodeID\", i / 4);\r\n      xw.writeAttribute(\"InputValue\", this.state.nodeData[i]);\r\n      xw.writeAttribute(\"InputWeight\", this.state.nodeData[i + 3]);\r\n      xw.writeAttribute(\"NodeBackendX\", this.state.nodeData[i + 1]);\r\n      xw.writeAttribute(\"NodeBackendY\", this.state.nodeData[i + 2]);\r\n      xw.endElement(\"Node\");\r\n    }\r\n    xw.endElement(\"Nodes\");\r\n    xw.startElement(\"Edges\");\r\n    for (var i = 0; i < this.state.edgeData.length; i += 2) {\r\n      xw.startElement(\"Edge\");\r\n      xw.writeAttribute(\"BeginID\", this.state.edgeData[i]);\r\n      xw.writeAttribute(\"EndID\", this.state.edgeData[i + 1]);\r\n      xw.endElement(\"Edge\");\r\n    }\r\n    xw.endElement(\"Edges\");\r\n    xw.endDocument();\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([xw.toString()], { type: \"application/xml\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"terrain.xml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <hr />\r\n        <Button className=\"benchmark_test\" onClick={this.runBenchmark}>\r\n          Run Benchmark\r\n        </Button>\r\n        <div style={{ margin: 10, color: \"white\" }}>\r\n          <p>Node count: {this.state.nodeCount}</p>\r\n          <p>Edge count: {this.state.edgeCount}</p>\r\n        </div>\r\n        <CSVLink data={this.state.FPSData}>Download FPS data</CSVLink>\r\n        <hr />\r\n\r\n        <Button className=\"d3Timing_test\" onClick={this.d3TimingStudy}>\r\n          Run D3\r\n        </Button>\r\n        <CSVLink data={this.state.d3timing} header={headerForLayout}>\r\n          Download FPS data\r\n        </CSVLink>\r\n\r\n        <Form style={{ color: \"white\" }} onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"formFile\" className=\"mt-3 mb-3\">\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={() =>\r\n                this.setState({ jsonFormat: !this.state.jsonFormat })\r\n              }\r\n              type=\"checkbox\"\r\n              label=\"Json Format\"\r\n            ></Form.Check>\r\n            <Form.Label>Select Example Files</Form.Label>\r\n            <Form.Control\r\n              className=\"form-control\"\r\n              type=\"file\"\r\n              multiple\r\n              onChange={(e) => {\r\n                if (this.state.jsonFormat) {\r\n                  this.readJson(e as React.ChangeEvent<HTMLInputElement>);\r\n                } else {\r\n                  this.readFiles(e as React.ChangeEvent<HTMLInputElement>);\r\n                }\r\n              }}\r\n            />\r\n            <Button\r\n              className=\"mt-2\"\r\n              type=\"submit\"\r\n              variant=\"secondary\"\r\n              value=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Group>\r\n          <Collapsible trigger=\"Terrain Options\">\r\n            <Form.Group>\r\n              <Form.Label> Width Factor </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={1000}\r\n                min={0}\r\n                max={2000}\r\n                onChange={(e) =>\r\n                  this.props.setWidthFactor(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label> Peak and Valley Values </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.8}\r\n                min={0.5}\r\n                max={1}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setPeakValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.2}\r\n                min={0}\r\n                max={0.5}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setValleyValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Check\r\n                defaultChecked={true}\r\n                onClick={(e) => this.props.setGlobalRange()}\r\n                type=\"checkbox\"\r\n                label=\"Use Global Min/Max\"\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Colormap Options\">\r\n            <Form.Row>\r\n              <div>Valley</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={45}\r\n                min={1}\r\n                max={60}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorValley(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Hill</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={90}\r\n                min={61}\r\n                max={120}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorHill(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Mountain</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={135}\r\n                min={121}\r\n                max={180}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorMountain(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Layers\">\r\n            <Form.Check\r\n              defaultChecked={false}\r\n              onClick={(e) => this.props.toggleTerrainLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Terrain Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleNodeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Node Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleEdgeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Edge Layer\"\r\n            />\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Force Directed Options\">\r\n            <Form.Label> Ideal Length and Cooling Factor </Form.Label>\r\n            <br />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.05}\r\n              min={0.001}\r\n              max={0.1}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setIdealLength(parseFloat(e.target.value))\r\n              }\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.9}\r\n              min={0.75}\r\n              max={0.999}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setCoolingFactor(parseFloat(e.target.value))\r\n              }\r\n            />\r\n          </Collapsible>\r\n          <Button onClick={(e) => this.props.onSave()}>Save Terrain</Button>\r\n          <br />\r\n          <Button onClick={(e) => this.applySpectral()}>\r\n            Apply Spectral Layout\r\n          </Button>\r\n          <br />\r\n          <Button\r\n            onClick={(e) => {\r\n              console.log(this.state.mouseEvents);\r\n            }}\r\n          >\r\n            Show Event\r\n          </Button>\r\n          <Button onClick={(e) => this.props.runForceDirected()}>\r\n            Run Force Directed Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.onSaveXML()}>Save Terrain to XML</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;"]}