{"version":3,"sources":["Sidebar.tsx"],"names":["react_1","require","react_bootstrap_1","react_collapsible_1","mathjs_1","stats_module_1","Constant","react_csv_1","xml_writer_1","d3","headers","label","key","headerForLayout","Sidebar","_super","props","_this","call","this","state","nodeData","edgeData","nodeCount","edgeCount","laplacian","sparse","adjacencyMatrix","e","jsonFormat","runBenchmark","FPSData","d3timing","handleSubmit","bind","readFiles","generateRandomGraph","generatePair","generateRandomData","refresh","runTest","testFunc","sleep","storeFPSResult","d3TimingStudy","__extends","prototype","event","preventDefault","setNodeEdgeData","time","Promise","resolve","setTimeout","self","iterationCount","iterationMeasure","layoutCanvas","select","append","attr","width","height","node","layoutDiv","document","getElementById","style","color","context","getContext","fillStyle","json","then","data","console","log","startTime","performance","now","lastTime","simulation","forceSimulation","nodes","force","forceManyBody","strength","forceCenter","forceLink","edges","distance","simulationUpdate","currentTime","dt","renderingStartTime","save","strokeStyle","clearRect","forEach","d","beginPath","moveTo","source","x","y","lineTo","target","stroke","i","arc","Math","PI","col","fill","restore","renderTime","setState","__spreadArrays","totalTime","renderingTime","on","_a","totalAverageTime","reduce","a","b","length","renderAvergaeTime","findAverage","renderAverageTime","edgeCounts","nodeCounts","map","n","stats","showPanel","dom","setAttribute","body","appendChild","renderingCanvas","querySelectorAll","nCount","toString","eCount","sent","e_1","min","max","randRange","floor","random","stepCount","pair","Array","err","error","nodeLength","edgeLength","fps","count_1","refreshing_1","begin","end","requestId_1","requestAnimationFrame","TIME_FOR_EACH_TEST","FPS_Array","getFPSHistory","FPS","cancelAnimationFrame","err_1","files","nodeIDToValue","nodeIDToIndex","degreeMatrix","edgeReader","FileReader","onload","_i","edgeRaw_1","result","split","parts","push","subtract","layoutReader","layoutData_1","parseFloat","j","readAsText","nodeReader","rawNodes_1","element","readJson","jsonReader","graph","JSON","parse","applySpectral","eigs","column","vectors","x_max","y_max","x_min","y_min","get","onSaveXML","xw","startDocument","startElement","writeAttribute","endElement","endDocument","createElement","file","Blob","type","href","URL","createObjectURL","download","click","render","className","Button","onClick","margin","CSVLink","header","Form","onSubmit","Group","controlId","Check","defaultChecked","Label","Control","multiple","onChange","variant","value","trigger","defaultValue","setWidthFactor","step","setPeakValue","setValleyValue","setGlobalRange","Row","setColorValley","setColorHill","setColorMountain","toggleTerrainLayer","toggleNodeLayer","toggleEdgeLayer","setIdealLength","setCoolingFactor","onSave","runForceDirected","Component","exports"],"mappings":"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","file":"Sidebar.min.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport Collapsible from 'react-collapsible';\r\nimport { Matrix, matrix, subtract, eigs, column, min, max, index, sparse } from 'mathjs';\r\nimport Stats from \"../libs/stats.module\";\r\nimport * as Constant from \"../constant\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport XMLWriter from \"xml-writer\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst headers = [\r\n  { label: \"Node\", key: \"Node\" },\r\n  { label: \"Edge\", key: \"Edge\" },\r\n  { label: \"FPS\", key: \"FPS\" },\r\n];\r\n\r\nconst headerForLayout = [\r\n  { label: \"iterationCount\", key: \"iterationCount\" },\r\n  { label: \"time\", key: \"time\" },\r\n  { label: \"renderTime\", key: \"renderTime\" },\r\n];\r\n\r\ntype SidebarProps = {\r\n  setNodeEdgeData: (nodeData: Array<number>, edgeData: Array<number>) => void;\r\n  setWidthFactor: (widthFactor: number) => void;\r\n  setPeakValue: (value: number) => void;\r\n  setValleyValue: (value: number) => void;\r\n  setCoolingFactor: (value: number) => void;\r\n  setIdealLength: (value: number) => void;\r\n  setColorValley: (value: number) => void;\r\n  setColorHill: (value: number) => void;\r\n  setColorMountain: (value: number) => void;\r\n  setGlobalRange: () => void;\r\n  toggleNodeLayer: () => void;\r\n  toggleTerrainLayer: () => void;\r\n  toggleEdgeLayer: () => void;\r\n  runForceDirected: () => void;\r\n  onSave: () => void;\r\n};\r\ntype SidebarState = {\r\n  nodeData: Array<number>;\r\n  edgeData: Array<number>;\r\n  laplacian: Matrix;\r\n  adjacencyMatrix: Array<Array<number>>;\r\n  e: {};\r\n  nodeCount: string;\r\n  edgeCount: string;\r\n  runBenchmark: boolean;\r\n  jsonFormat: boolean;\r\n  FPSData: Array<Array<string>>;\r\n  d3timing: Array<timing>;\r\n\r\n  // canvasAdded: boolean;\r\n};\r\ntype edge = {\r\n  id: string;\r\n  source: number;\r\n  target: number;\r\n};\r\ntype node = {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype nodeD3 = {\r\n  id: string;\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\ntype Graph = {\r\n  nodes: Array<node>;\r\n  edges: Array<edge>;\r\n};\r\n\r\ninterface timing {\r\n  iterationCount: number;\r\n  totalTime: number;\r\n  renderingTime: number;\r\n}\r\n\r\nclass Sidebar extends React.Component<SidebarProps, SidebarState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nodeData: [],\r\n      edgeData: [],\r\n      nodeCount: \"\",\r\n      edgeCount: \"\",\r\n      laplacian: sparse([]),\r\n      adjacencyMatrix: [],\r\n      e: {},\r\n      jsonFormat: true,\r\n      runBenchmark: false,\r\n      FPSData: [],\r\n      d3timing: [],\r\n      // canvasAdded: false,\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.readFiles = this.readFiles.bind(this);\r\n    this.generateRandomGraph = this.generateRandomGraph.bind(this);\r\n    this.generatePair = this.generatePair.bind(this);\r\n    this.generateRandomData = this.generateRandomData.bind(this);\r\n    this.refresh = this.refresh.bind(this);\r\n    this.runTest = this.runTest.bind(this);\r\n    this.runBenchmark = this.runBenchmark.bind(this);\r\n    this.testFunc = this.testFunc.bind(this);\r\n    this.sleep = this.sleep.bind(this);\r\n    this.storeFPSResult = this.storeFPSResult.bind(this);\r\n\r\n    // =========================================================\r\n    this.d3TimingStudy = this.d3TimingStudy.bind(this);\r\n    // this.randomDataGen_Computation = this.randomDataGen_Computation.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n  }\r\n\r\n  sleep(time) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, time);\r\n    });\r\n  }\r\n\r\n  // randomDataGen_Computation(nodeCount, edgeCount, width, height) {\r\n  //   var nodesWebGPU: Array<number> = [];\r\n  //   var edgesWebGPU: Array<number> = [];\r\n\r\n  //   var nodesD3: Array<nodeD3> = [];\r\n  //   var edgesD3: Array<edge> = [];\r\n\r\n  //   const dataWebGPU = {\r\n  //     nodes: nodesWebGPU,\r\n  //     edges: edgesWebGPU,\r\n  //   };\r\n\r\n  //   const dataD3 = {\r\n  //     nodes: nodesD3,\r\n  //     edges: edgesD3,\r\n  //   };\r\n\r\n  //   dataWebGPU.nodes = new Array(4 * nodeCount).fill(0);\r\n  //   dataWebGPU.edges = new Array(2 * edgeCount).fill(0);\r\n\r\n  //   for (let i = 0; i < nodeCount; i++) {\r\n  //     let x = Math.random();\r\n  //     let y = Math.random();\r\n  //     dataD3.nodes[i] = { id: i.toString(), x: x * width, y: y * height };\r\n  //     dataWebGPU.nodes[4 * i] = 0;\r\n  //     dataWebGPU.nodes[4 * i + 1] = x;\r\n  //     dataWebGPU.nodes[4 * i + 2] = y;\r\n  //     dataWebGPU.nodes[4 * i + 3] = 1;\r\n  //   }\r\n\r\n  //   const linkSet = new Set();\r\n\r\n  //   for (let i = 0; i < edgeCount; i++) {\r\n  //     let pair;\r\n  //     do {\r\n  //       pair = this.generatePair(0, nodeCount);\r\n  //     } while (linkSet.has(`${pair.source}_${pair.target}`));\r\n  //     linkSet.add(`${pair.source}_${pair.target}`);\r\n  //     linkSet.add(`${pair.target}_${pair.source}`);\r\n\r\n  //     dataD3.edges[i] = {\r\n  //       id: i.toString(),\r\n  //       source: pair.source,\r\n  //       target: pair.target,\r\n  //     };\r\n  //     dataWebGPU.edges[2 * i] = pair.source;\r\n  //     dataWebGPU.edges[2 * i + 1] = pair.target;\r\n  //   }\r\n  //   let dataCombined = {\r\n  //     dataD3,\r\n  //     dataWebGPU,\r\n  //   };\r\n  //   return dataCombined;\r\n  // }\r\n\r\n  async d3TimingStudy(event: React.MouseEvent) {\r\n    event.preventDefault();\r\n    const self = this;\r\n    const width = 800;\r\n    const height = 800;\r\n    let iterationCount = 0;\r\n    const iterationMeasure = {};\r\n    let startTime;\r\n    let lastTime;\r\n    let totalTime;\r\n\r\n    var layoutCanvas = d3\r\n      .select(\"#graphDiv\")\r\n      .append(\"canvas\")\r\n      .attr(\"width\", width + \"px\")\r\n      .attr(\"height\", height + \"px\")\r\n      .node();\r\n\r\n    let layoutDiv = document.getElementById(\"#graphDiv\");\r\n    if (layoutDiv) {\r\n      layoutDiv.style.color = \"white\";\r\n    }\r\n\r\n    let context = layoutCanvas!.getContext(\"2d\")!;\r\n    if (!context) {\r\n      console.log(\"no 2d context found\");\r\n      return;\r\n    }\r\n\r\n    context.fillStyle = \"white\";\r\n\r\n    d3.json(\"./sample_test_data/sample_data100_2000.json\").then((data: any) => {\r\n      console.log(data);\r\n      startTime = performance.now();\r\n      lastTime = startTime;\r\n      const simulation = d3\r\n        .forceSimulation(data.nodes)\r\n        .force(\"charge\", d3.forceManyBody().strength(-20))\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n        .force(\"link\", d3.forceLink(data.edges).distance(20).strength(2.0));\r\n\r\n      initGraph(data);\r\n\r\n      function initGraph(data) {\r\n        simulation.on(\"tick\", simulationUpdate);\r\n        simulation.on(\"end\", () => {\r\n          let currentTime = performance.now();\r\n          totalTime = currentTime - startTime;\r\n          const [totalAverageTime, renderAverageTime] = findAverage(\r\n            self.state.d3timing\r\n          );\r\n          console.log(totalAverageTime, renderAverageTime);\r\n          console.log(\"startTime\", startTime);\r\n          console.log(\"totalTime\", totalTime);\r\n          console.log(\"iterationMeasure\", iterationMeasure);\r\n        });\r\n      }\r\n\r\n      function findAverage(d3timing) {\r\n        let totalAverageTime =\r\n          d3timing.reduce((a, b) => {\r\n            return a + b.totalTime;\r\n          }, 0) / d3timing.length;\r\n        let renderAvergaeTime =\r\n          d3timing.reduce((a, b) => a + b.renderingTime, 0) / d3timing.length;\r\n        return [totalAverageTime, renderAvergaeTime];\r\n      }\r\n\r\n      function simulationUpdate() {\r\n        let currentTime = performance.now();\r\n        let dt = currentTime - lastTime;\r\n        iterationCount++;\r\n        iterationMeasure[iterationCount] = dt;\r\n        lastTime = currentTime;\r\n\r\n        let renderingStartTime = performance.now();\r\n        context.save();\r\n        context.strokeStyle = \"#aaa\";\r\n        context.clearRect(0, 0, width, height);\r\n\r\n        data.edges.forEach(function (d) {\r\n          context.beginPath();\r\n          context.moveTo(d.source.x, d.source.y);\r\n          context.lineTo(d.target.x, d.target.y);\r\n          context.stroke();\r\n        });\r\n\r\n        data.nodes.forEach(function (d, i) {\r\n          context.beginPath();\r\n          context.arc(d.x, d.y, 2, 0, 2 * Math.PI, true);\r\n          context.fillStyle = d.col ? \"red\" : \"black\";\r\n          context.fill();\r\n        });\r\n        context.restore();\r\n        let renderingEndTime = performance.now();\r\n        let renderTime = renderingEndTime - renderingStartTime;\r\n        self.setState({\r\n          d3timing: [\r\n            ...self.state.d3timing,\r\n            {\r\n              iterationCount: iterationCount,\r\n              totalTime: dt,\r\n              renderingTime: renderTime,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  async runBenchmark(event: React.MouseEvent) {\r\n    try {\r\n      event.preventDefault();\r\n      const nodeCounts = [1e2, 5e5];\r\n      const density = 5;\r\n      const edgeCounts = nodeCounts.map((n) => n * density);\r\n      let stats = Stats();\r\n      stats.showPanel(0);\r\n      stats.dom.setAttribute(\"class\", \"status\");\r\n      document.body.appendChild(stats.dom);\r\n      this.setState({ runBenchmark: true });\r\n      let renderingCanvas = document.querySelectorAll(\"canvas\")[0];\r\n      renderingCanvas.width = 500;\r\n      renderingCanvas.height = 500;\r\n      renderingCanvas.style.width = \"500px\";\r\n      renderingCanvas.style.height = \"500px\";\r\n      // const testCase = {\r\n      //   nodeCounts,\r\n      //   edgeCounts,\r\n      // };\r\n\r\n      for (let i = 0; i < nodeCounts.length; i++) {\r\n        // let stepCount = 0;\r\n        const nCount = nodeCounts[i].toString();\r\n        const eCount = edgeCounts[i].toString();\r\n\r\n        this.setState({ nodeCount: nCount });\r\n        this.setState({ edgeCount: eCount });\r\n\r\n        let data = this.generateRandomData(nodeCounts, edgeCounts, i);\r\n        this.setState({ nodeData: data.nodes });\r\n        this.setState({ edgeData: data.edges });\r\n        // this.props.setNodeEdgeData(this.state.nodeData, this.state.edgeData);\r\n        await this.testFunc(data, stats);\r\n      }\r\n\r\n      this.setState({ runBenchmark: false });\r\n      renderingCanvas.width = 800;\r\n      renderingCanvas.height = 800;\r\n      renderingCanvas.style.width = \"800px\";\r\n      renderingCanvas.style.height = \"800px\";\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  generatePair(min, max) {\r\n    function randRange(min, max) {\r\n      return min + Math.floor(Math.random() * (max - min));\r\n    }\r\n    const source = randRange(min, max);\r\n    let target = randRange(min, max);\r\n    while (source === target) {\r\n      target = randRange(min, max);\r\n    }\r\n    return {\r\n      source: source,\r\n      target: target,\r\n    };\r\n  }\r\n\r\n  generateRandomData(nodeCounts, edgeCounts, stepCount) {\r\n    let nodeCount = nodeCounts[stepCount];\r\n    let edgeCount = edgeCounts[stepCount];\r\n\r\n    let generatedData = this.generateRandomGraph(nodeCount, edgeCount);\r\n    return generatedData;\r\n  }\r\n\r\n  generateRandomGraph(nodeCount, edgeCount) {\r\n    var nodes: Array<number> = [];\r\n    var edges: Array<number> = [];\r\n    const data = {\r\n      nodes: nodes,\r\n      edges: edges,\r\n    };\r\n\r\n    data.nodes = Array(4 * nodeCount).fill(0);\r\n\r\n    for (let i = 0; i < 4 * nodeCount; i = i + 4) {\r\n      data.nodes[i] = 0;\r\n      data.nodes[i + 1] = Math.random();\r\n      data.nodes[i + 2] = Math.random();\r\n      data.nodes[i + 3] = 1;\r\n    }\r\n    data.edges = Array(2 * edgeCount).fill(0);\r\n    let pair;\r\n\r\n    for (let i = 0; i < 2 * edgeCount; i = i + 2) {\r\n      pair = this.generatePair(0, nodeCount);\r\n      data.edges[i] = pair.source;\r\n      data.edges[i + 1] = pair.target;\r\n    }\r\n    console.log(\"data generated\");\r\n    return data;\r\n  }\r\n\r\n  refresh(length) {\r\n    try {\r\n      var nodes: Array<number> = [];\r\n      for (let i = 0; i < 4 * length; i = i + 4) {\r\n        nodes[i + 1] = Math.random();\r\n        nodes[i + 2] = Math.random();\r\n      }\r\n      this.setState({ nodeData: nodes });\r\n      console.log(\r\n        \"called\",\r\n        this.props.setNodeEdgeData(nodes, this.state.edgeData)\r\n      );\r\n      console.log(\"rendererd\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  storeFPSResult(nodeLength, edgeLength, fps) {\r\n    nodeLength = nodeLength.toString();\r\n    edgeLength = edgeLength.toString();\r\n    fps = fps.toString();\r\n\r\n    this.setState({\r\n      FPSData: [...this.state.FPSData, [nodeLength, edgeLength, fps]],\r\n    });\r\n  }\r\n\r\n  async testFunc(data, stats) {\r\n    let nodeLength = data.nodes.length / 4;\r\n    let edgeLength = data.edges.length / 2;\r\n    console.log(nodeLength);\r\n    await this.runTest(nodeLength, edgeLength, stats);\r\n  }\r\n\r\n  async runTest(nodeLength, edgeLength, stats) {\r\n    try {\r\n      let requestId;\r\n      let count = 0;\r\n      const refreshing = () => {\r\n        stats.begin();\r\n        console.log(\"intiital count\", count);\r\n        count++;\r\n        this.refresh(nodeLength);\r\n        console.log(\"final count\", count);\r\n        stats.end();\r\n        requestId = requestAnimationFrame(refreshing);\r\n      };\r\n      refreshing();\r\n      await this.sleep(Constant.TIME_FOR_EACH_TEST);\r\n      let FPS_Array = stats.getFPSHistory();\r\n      let FPS = FPS_Array.reduce((a, b) => a + b, 0) / FPS_Array.length;\r\n      this.storeFPSResult(nodeLength, edgeLength, FPS);\r\n      cancelAnimationFrame(requestId);\r\n      return;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n  readFiles(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    console.log(files);\r\n    var nodeIDToValue = {};\r\n    // var nodeIDToPos = {};\r\n    var nodeIDToIndex = {};\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    var degreeMatrix: Array<Array<number>> = [];\r\n    var adjacencyMatrix: Array<Array<number>> = [];\r\n    const edgeReader = new FileReader();\r\n    edgeReader.onload = (event) => {\r\n      var edgeRaw = (edgeReader.result as string).split(\"\\n\");\r\n      for (var element of edgeRaw) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]] && nodeIDToValue[parts[1]]) {\r\n          edgeData.push(nodeIDToIndex[parts[0]], nodeIDToIndex[parts[1]]);\r\n          degreeMatrix[nodeIDToIndex[parts[0]]][nodeIDToIndex[parts[0]]] += 1;\r\n          degreeMatrix[nodeIDToIndex[parts[1]]][nodeIDToIndex[parts[1]]] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[0]]][\r\n            nodeIDToIndex[parts[1]]\r\n          ] += 1;\r\n          adjacencyMatrix[nodeIDToIndex[parts[1]]][\r\n            nodeIDToIndex[parts[0]]\r\n          ] += 1;\r\n        }\r\n      }\r\n      this.setState({ edgeData: edgeData });\r\n      var laplacian: Matrix = subtract(\r\n        sparse(degreeMatrix),\r\n        sparse(adjacencyMatrix)\r\n      ) as Matrix;\r\n      console.log(laplacian);\r\n      this.setState({ laplacian: laplacian, adjacencyMatrix: adjacencyMatrix });\r\n    };\r\n    const layoutReader = new FileReader();\r\n    layoutReader.onload = (event) => {\r\n      var layoutData = (layoutReader.result as string).split(\"\\n\");\r\n      for (var element of layoutData) {\r\n        var parts = element.split(\"\\t\");\r\n        if (nodeIDToValue[parts[0]]) {\r\n          nodeIDToIndex[parts[0]] = nodeData.length / 4;\r\n          // Pushes values to node data in order of struct for WebGPU:\r\n          // nodeValue, nodeX, nodeY, nodeSize\r\n          nodeData.push(\r\n            parseFloat(nodeIDToValue[parts[0]]),\r\n            parseFloat(parts[1]),\r\n            parseFloat(parts[2]),\r\n            parseFloat(parts[3])\r\n          );\r\n          // nodeIDToPos[parts[0]] = [parseFloat(parts[1]) * 2.0 - 1, parseFloat(parts[2]) * 2.0 - 1];\r\n        }\r\n      }\r\n      this.setState({ nodeData: nodeData });\r\n      for (var i = 0; i < nodeData.length / 4; i++) {\r\n        degreeMatrix.push([]);\r\n        adjacencyMatrix.push([]);\r\n        for (var j = 0; j < nodeData.length / 4; j++) {\r\n          degreeMatrix[i].push(0);\r\n          adjacencyMatrix[i].push(0);\r\n        }\r\n      }\r\n      edgeReader.readAsText(files[2]);\r\n    };\r\n    const nodeReader = new FileReader();\r\n    nodeReader.onload = (event) => {\r\n      var rawNodes = (nodeReader.result as string).split(\"\\n\");\r\n      for (var element of rawNodes) {\r\n        nodeIDToValue[element.split(\"\\t\")[0]] = element.split(\"\\t\")[1];\r\n      }\r\n      console.log(nodeIDToValue);\r\n      layoutReader.readAsText(files[1]);\r\n    };\r\n    nodeReader.readAsText(files[0]);\r\n  }\r\n\r\n  readJson(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files: FileList = event.target.files!;\r\n    const jsonReader = new FileReader();\r\n    var nodeData: Array<number> = [];\r\n    var edgeData: Array<number> = [];\r\n    jsonReader.onload = (event) => {\r\n      var graph: Graph = JSON.parse(jsonReader.result as string);\r\n      console.log(graph);\r\n      for (var i = 0; i < graph.nodes.length; i++) {\r\n        if (graph.nodes[i].x) {\r\n          nodeData.push(0.0, graph.nodes[i].x, graph.nodes[i].y, 1.0);\r\n        } else {\r\n          nodeData.push(0.0, Math.random(), Math.random(), 1.0);\r\n        }\r\n      }\r\n      for (var i = 0; i < graph.edges.length; i++) {\r\n        var source = graph.edges[i].source;\r\n        var target = graph.edges[i].target;\r\n        edgeData.push(source, target);\r\n      }\r\n      this.setState({ nodeData: nodeData, edgeData: edgeData });\r\n    };\r\n    jsonReader.readAsText(files[0]);\r\n  }\r\n\r\n  applySpectral() {\r\n    var e = eigs(this.state.laplacian);\r\n    console.log(e);\r\n    var nodeData = this.state.nodeData;\r\n    var x = column(e.vectors, 1) as Matrix;\r\n    var y = column(e.vectors, 2) as Matrix;\r\n    var x_max = max(x);\r\n    var y_max = max(y);\r\n    var x_min = min(x);\r\n    var y_min = min(y);\r\n    for (var i = 0; i < nodeData.length / 4; i++) {\r\n      nodeData[i * 4 + 1] = (x.get([i, 0]) - x_min) / (x_max - x_min);\r\n      nodeData[i * 4 + 2] = (y.get([i, 0]) - y_min) / (y_max - y_min);\r\n    }\r\n    this.setState({ nodeData: nodeData });\r\n    this.props.setNodeEdgeData(nodeData, this.state.edgeData);\r\n  }\r\n\r\n  onSaveXML() {\r\n    var xw = new XMLWriter(true);\r\n    xw.startDocument();\r\n    xw.startElement(\"GeneTerrain\");\r\n    xw.startElement(\"Nodes\");\r\n    for (var i = 0; i < this.state.nodeData.length; i += 4) {\r\n      xw.startElement(\"Node\");\r\n      xw.writeAttribute(\"NodeID\", i / 4);\r\n      xw.writeAttribute(\"InputValue\", this.state.nodeData[i]);\r\n      xw.writeAttribute(\"InputWeight\", this.state.nodeData[i + 3]);\r\n      xw.writeAttribute(\"NodeBackendX\", this.state.nodeData[i + 1]);\r\n      xw.writeAttribute(\"NodeBackendY\", this.state.nodeData[i + 2]);\r\n      xw.endElement(\"Node\");\r\n    }\r\n    xw.endElement(\"Nodes\");\r\n    xw.startElement(\"Edges\");\r\n    for (var i = 0; i < this.state.edgeData.length; i += 2) {\r\n      xw.startElement(\"Edge\");\r\n      xw.writeAttribute(\"BeginID\", this.state.edgeData[i]);\r\n      xw.writeAttribute(\"EndID\", this.state.edgeData[i + 1]);\r\n      xw.endElement(\"Edge\");\r\n    }\r\n    xw.endElement(\"Edges\");\r\n    xw.endDocument();\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([xw.toString()], { type: \"application/xml\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"terrain.xml\";\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <hr />\r\n        <Button className=\"benchmark_test\" onClick={this.runBenchmark}>\r\n          Run Benchmark\r\n        </Button>\r\n        <div style={{ margin: 10, color: \"white\" }}>\r\n          <p>Node count: {this.state.nodeCount}</p>\r\n          <p>Edge count: {this.state.edgeCount}</p>\r\n        </div>\r\n        <CSVLink data={this.state.FPSData}>Download FPS data</CSVLink>\r\n        <hr />\r\n\r\n        <Button className=\"d3Timing_test\" onClick={this.d3TimingStudy}>\r\n          Run D3\r\n        </Button>\r\n        <CSVLink data={this.state.d3timing} header={headerForLayout}>\r\n          Download FPS data\r\n        </CSVLink>\r\n\r\n        <Form style={{ color: \"white\" }} onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"formFile\" className=\"mt-3 mb-3\">\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={() =>\r\n                this.setState({ jsonFormat: !this.state.jsonFormat })\r\n              }\r\n              type=\"checkbox\"\r\n              label=\"Json Format\"\r\n            ></Form.Check>\r\n            <Form.Label>Select Example Files</Form.Label>\r\n            <Form.Control\r\n              className=\"form-control\"\r\n              type=\"file\"\r\n              multiple\r\n              onChange={(e) => {\r\n                if (this.state.jsonFormat) {\r\n                  this.readJson(e as React.ChangeEvent<HTMLInputElement>);\r\n                } else {\r\n                  this.readFiles(e as React.ChangeEvent<HTMLInputElement>);\r\n                }\r\n              }}\r\n            />\r\n            <Button\r\n              className=\"mt-2\"\r\n              type=\"submit\"\r\n              variant=\"secondary\"\r\n              value=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form.Group>\r\n          <Collapsible trigger=\"Terrain Options\">\r\n            <Form.Group>\r\n              <Form.Label> Width Factor </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={1000}\r\n                min={0}\r\n                max={2000}\r\n                onChange={(e) =>\r\n                  this.props.setWidthFactor(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label> Peak and Valley Values </Form.Label>\r\n              <br />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.8}\r\n                min={0.5}\r\n                max={1}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setPeakValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={0.2}\r\n                min={0}\r\n                max={0.5}\r\n                step={0.01}\r\n                onChange={(e) =>\r\n                  this.props.setValleyValue(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Check\r\n                defaultChecked={true}\r\n                onClick={(e) => this.props.setGlobalRange()}\r\n                type=\"checkbox\"\r\n                label=\"Use Global Min/Max\"\r\n              ></Form.Check>\r\n            </Form.Group>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Colormap Options\">\r\n            <Form.Row>\r\n              <div>Valley</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={45}\r\n                min={1}\r\n                max={60}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorValley(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Hill</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={90}\r\n                min={61}\r\n                max={120}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorHill(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <div>Mountain</div>\r\n              <input\r\n                type=\"range\"\r\n                defaultValue={135}\r\n                min={121}\r\n                max={180}\r\n                step={1}\r\n                onChange={(e) =>\r\n                  this.props.setColorMountain(parseFloat(e.target.value))\r\n                }\r\n              />\r\n            </Form.Row>\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Layers\">\r\n            <Form.Check\r\n              defaultChecked={false}\r\n              onClick={(e) => this.props.toggleTerrainLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Terrain Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleNodeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Node Layer\"\r\n            />\r\n            <Form.Check\r\n              defaultChecked={true}\r\n              onClick={(e) => this.props.toggleEdgeLayer()}\r\n              type=\"checkbox\"\r\n              label=\"Edge Layer\"\r\n            />\r\n          </Collapsible>\r\n          <Collapsible trigger=\"Force Directed Options\">\r\n            <Form.Label> Ideal Length and Cooling Factor </Form.Label>\r\n            <br />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.05}\r\n              min={0.001}\r\n              max={0.1}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setIdealLength(parseFloat(e.target.value))\r\n              }\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              defaultValue={0.9}\r\n              min={0.75}\r\n              max={0.999}\r\n              step={0.001}\r\n              onChange={(e) =>\r\n                this.props.setCoolingFactor(parseFloat(e.target.value))\r\n              }\r\n            />\r\n          </Collapsible>\r\n          <Button onClick={(e) => this.props.onSave()}>Save Terrain</Button>\r\n          <br />\r\n          <Button onClick={(e) => this.applySpectral()}>\r\n            Apply Spectral Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.props.runForceDirected()}>\r\n            Run Force Directed Layout\r\n          </Button>\r\n          <br />\r\n          <Button onClick={(e) => this.onSaveXML()}>Save Terrain to XML</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;"]}