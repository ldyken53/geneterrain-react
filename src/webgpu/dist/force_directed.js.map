{"version":3,"sources":["force_directed.ts"],"names":[],"mappings":"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","file":"force_directed.js","sourcesContent":["import { buffer } from 'd3';\r\nimport {\r\n    apply_forces,\r\n    create_adjacency_matrix,\r\n    compute_forces,\r\n    create_quadtree\r\n} from './wgsl';\r\n\r\nimport { greadability } from \"../greadibility.js\";\r\n\r\nclass ForceDirected {\r\n  public paramsBuffer: GPUBuffer;\r\n  public nodeDataBuffer: GPUBuffer;\r\n  public edgeDataBuffer: GPUBuffer;\r\n  public adjMatrixBuffer: GPUBuffer;\r\n  public laplacianBuffer: GPUBuffer;\r\n  public forceDataBuffer: GPUBuffer;\r\n  public coolingFactor: number = 0.9;\r\n  public device: GPUDevice;\r\n  public createMatrixPipeline: GPUComputePipeline;\r\n  public createQuadTreePipeline: GPUComputePipeline;\r\n  public computeForcesPipeline: GPUComputePipeline;\r\n  public applyForcesPipeline: GPUComputePipeline;\r\n  public iterationCount: number = 10000;\r\n  public threshold: number = 100;\r\n  public force: number = 1000.0;\r\n  public positionReadBuffer: any;\r\n\r\n  constructor(device: GPUDevice) {\r\n    this.device = device;\r\n\r\n    this.nodeDataBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage:\r\n        GPUBufferUsage.STORAGE |\r\n        GPUBufferUsage.COPY_DST |\r\n        GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    this.edgeDataBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    this.adjMatrixBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    this.laplacianBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    this.forceDataBuffer = this.device.createBuffer({\r\n      size: 16,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    this.createMatrixPipeline = device.createComputePipeline({\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: create_adjacency_matrix,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n    });\r\n\r\n    this.createQuadTreePipeline = device.createComputePipeline({\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: create_quadtree,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n    });\r\n\r\n    this.computeForcesPipeline = device.createComputePipeline({\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: compute_forces,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n    });\r\n\r\n    this.applyForcesPipeline = device.createComputePipeline({\r\n      compute: {\r\n        module: device.createShaderModule({\r\n          code: apply_forces,\r\n        }),\r\n        entryPoint: \"main\",\r\n      },\r\n    });\r\n\r\n    // Create a buffer to store the params, output, and min/max\r\n    this.paramsBuffer = device.createBuffer({\r\n      size: 4 * 4,\r\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n    });\r\n\r\n    this.positionReadBuffer = null;\r\n  }\r\n\r\n  formatToD3Format(positionList, edgeList, nLength, eLength) {\r\n    let nodeLength = positionList.length;\r\n    let nodeArray1 = new Array(nLength);\r\n    let edgeArray1 = new Array(eLength);\r\n\r\n    for (let i = 0; i < 4 * nodeLength; i = i + 4) {\r\n      nodeArray1[i / 4] = {};\r\n      nodeArray1[i / 4].index = i / 4;\r\n      nodeArray1[i / 4].name = (i / 4).toString();\r\n      nodeArray1[i / 4].x = positionList[i + 1];\r\n      nodeArray1[i / 4].y = positionList[i + 2];\r\n    }\r\n\r\n    for (let i = 0; i < eLength; i = i + 2) {\r\n      edgeArray1[i / 2] = {};\r\n      let sourceIndex = edgeList[i];\r\n      let targetIndex = edgeList[i + 1];\r\n\r\n      edgeArray1[i / 2].index = i / 2;\r\n      edgeArray1[i / 2].source = {};\r\n      edgeArray1[i / 2].source.index = sourceIndex;\r\n      edgeArray1[i / 2].source.name = sourceIndex.toString();\r\n      edgeArray1[i / 2].source.x = nodeArray1[sourceIndex].x;\r\n      edgeArray1[i / 2].source.y = nodeArray1[sourceIndex].y;\r\n\r\n      edgeArray1[i / 2].target = {};\r\n      edgeArray1[i / 2].target.index = targetIndex;\r\n      edgeArray1[i / 2].target.name = targetIndex.toString();\r\n      edgeArray1[i / 2].target.x = nodeArray1[targetIndex].x;\r\n      edgeArray1[i / 2].target.y = nodeArray1[targetIndex].y;\r\n    }\r\n\r\n    return {\r\n      nodeArray: nodeArray1,\r\n      edgeArray: edgeArray1,\r\n    };\r\n  }\r\n\r\n  async runForces(\r\n    nodeDataBuffer = this.nodeDataBuffer,\r\n    edgeDataBuffer = this.edgeDataBuffer,\r\n    nodeLength: number = 0,\r\n    edgeLength: number = 0,\r\n    coolingFactor = this.coolingFactor,\r\n    l = 0.05,\r\n    iterationCount = this.iterationCount,\r\n    threshold = this.threshold,\r\n    iterRef,\r\n    edgeList\r\n  ) {\r\n    if (nodeLength == 0 || edgeLength == 0) {\r\n      return;\r\n    }\r\n    console.log(l);\r\n    console.log(coolingFactor);\r\n    this.coolingFactor = coolingFactor;\r\n    this.nodeDataBuffer = nodeDataBuffer;\r\n    this.edgeDataBuffer = edgeDataBuffer;\r\n    this.threshold = threshold;\r\n    this.force = 100000;\r\n\r\n    // Set up params (node length, edge length) for creating adjacency matrix\r\n    var upload = this.device.createBuffer({\r\n      size: 4 * 4,\r\n      usage: GPUBufferUsage.COPY_SRC,\r\n      mappedAtCreation: true,\r\n    });\r\n    var mapping = upload.getMappedRange();\r\n    new Uint32Array(mapping).set([nodeLength, edgeLength]);\r\n    new Float32Array(mapping).set([this.coolingFactor, l], 2);\r\n    upload.unmap();\r\n    let adjMatrixSize = Math.ceil((nodeLength * nodeLength * 4) / 32);\r\n    this.adjMatrixBuffer = this.device.createBuffer({\r\n      size: adjMatrixSize,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n    this.laplacianBuffer = this.device.createBuffer({\r\n      size: nodeLength * nodeLength * 4,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n    var commandEncoder = this.device.createCommandEncoder();\r\n    commandEncoder.copyBufferToBuffer(upload, 0, this.paramsBuffer, 0, 4 * 4);\r\n    var createBindGroup = this.device.createBindGroup({\r\n      layout: this.createMatrixPipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: {\r\n            buffer: this.edgeDataBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.adjMatrixBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 2,\r\n          resource: {\r\n            buffer: this.paramsBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 3,\r\n          resource: {\r\n            buffer: this.laplacianBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    var pass = commandEncoder.beginComputePass();\r\n    pass.setBindGroup(0, createBindGroup);\r\n    pass.setPipeline(this.createMatrixPipeline);\r\n    pass.dispatch(1, 1, 1);\r\n    pass.endPass();\r\n    // Log adjacency matrix\r\n    const gpuReadBuffer = this.device.createBuffer({\r\n      size: nodeLength * nodeLength * 4,\r\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\r\n    });\r\n    // Encode commands for copying buffer to buffer.\r\n    commandEncoder.copyBufferToBuffer(\r\n      this.adjMatrixBuffer /* source buffer */,\r\n      0 /* source offset */,\r\n      gpuReadBuffer /* destination buffer */,\r\n      0 /* destination offset */,\r\n      adjMatrixSize /* size */\r\n    );\r\n    this.device.queue.submit([commandEncoder.finish()]);\r\n\r\n    // Log adjacency matrix (count should be equal to the number of nonduplicate edges)\r\n    await gpuReadBuffer.mapAsync(GPUMapMode.READ);\r\n    const arrayBuffer = gpuReadBuffer.getMappedRange();\r\n    var output = new Int32Array(arrayBuffer);\r\n    var count = 0;\r\n    // for (var i = 0; i < output.length; i++) {\r\n    //     count+=output[i];\r\n    // }\r\n    console.log(output);\r\n    console.log(count);\r\n    console.log(output.length);\r\n\r\n    this.forceDataBuffer = this.device.createBuffer({\r\n      size: nodeLength * 2 * 4,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    var iterationTimes: Array<number> = [];\r\n    var totalStart = performance.now();\r\n    var applyBindGroup = this.device.createBindGroup({\r\n      layout: this.applyForcesPipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: {\r\n            buffer: this.nodeDataBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.forceDataBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    while (\r\n      iterationCount > 0 &&\r\n      this.coolingFactor > 0.0001 &&\r\n      this.force >= 0\r\n    ) {\r\n      iterationCount--;\r\n      // Set up params (node length, edge length)\r\n      var upload = this.device.createBuffer({\r\n        size: 4 * 4,\r\n        usage: GPUBufferUsage.COPY_SRC,\r\n        mappedAtCreation: true,\r\n      });\r\n      var mapping = upload.getMappedRange();\r\n      new Uint32Array(mapping).set([nodeLength, edgeLength]);\r\n      new Float32Array(mapping).set([this.coolingFactor, l], 2);\r\n      upload.unmap();\r\n      //this.device.createQuerySet({})\r\n      var commandEncoder = this.device.createCommandEncoder();\r\n      //commandEncoder.writeTimestamp();\r\n      commandEncoder.copyBufferToBuffer(upload, 0, this.paramsBuffer, 0, 4 * 4);\r\n      // Create bind group\r\n      var bindGroup = this.device.createBindGroup({\r\n        layout: this.computeForcesPipeline.getBindGroupLayout(0),\r\n        entries: [\r\n          {\r\n            binding: 0,\r\n            resource: {\r\n              buffer: this.nodeDataBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 1,\r\n            resource: {\r\n              buffer: this.adjMatrixBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 2,\r\n            resource: {\r\n              buffer: this.forceDataBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 3,\r\n            resource: {\r\n              buffer: this.paramsBuffer,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n\r\n      // Run attract forces pass\r\n      // var pass = commandEncoder.beginComputePass();\r\n      // pass.setBindGroup(0, attractBindGroup);\r\n      // pass.setPipeline(this.computeAttractForcesPipeline);\r\n      // pass.dispatch(1, 1, 1);\r\n      // pass.endPass();\r\n      // this.device.queue.submit([commandEncoder.finish()]);\r\n      // var start : number = performance.now();\r\n      // await this.device.queue.onSubmittedWorkDone();\r\n      // var end : number = performance.now();\r\n      // console.log(`attract force time: ${end - start}`)\r\n      // var commandEncoder = this.device.createCommandEncoder();\r\n\r\n      // Run compute forces pass\r\n      var pass = commandEncoder.beginComputePass();\r\n      pass.setBindGroup(0, bindGroup);\r\n      pass.setPipeline(this.computeForcesPipeline);\r\n      pass.dispatch(nodeLength, 1, 1);\r\n      pass.endPass();\r\n\r\n      // Testing timing of both passes (comment out when not debugging)\r\n      // pass.endPass();\r\n      // this.device.queue.submit([commandEncoder.finish()]);\r\n      // var start : number = performance.now();\r\n      // await this.device.queue.onSubmittedWorkDone();\r\n      // var end : number = performance.now();\r\n      // console.log(`compute force time: ${end - start}`)\r\n      // var commandEncoder = this.device.createCommandEncoder();\r\n\r\n      // const gpuReadBuffer = this.device.createBuffer({\r\n      //     size: nodeLength * 2 * 4,\r\n      //     usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\r\n      // });\r\n      // // Encode commands for copying buffer to buffer.\r\n      // commandEncoder.copyBufferToBuffer(\r\n      //     this.forceDataBuffer /* source buffer */ ,\r\n      //     0 /* source offset */ ,\r\n      //     gpuReadBuffer /* destination buffer */ ,\r\n      //     0 /* destination offset */ ,\r\n      //     nodeLength * 2 * 4 /* size */\r\n      // );\r\n      var pass = commandEncoder.beginComputePass();\r\n\r\n      //commandEncoder.writeTimestamp();\r\n\r\n      // Run apply forces pass\r\n      pass.setBindGroup(0, applyBindGroup);\r\n      pass.setPipeline(this.applyForcesPipeline);\r\n      pass.dispatch(nodeLength, 1, 1);\r\n      pass.endPass();\r\n\r\n      this.positionReadBuffer = this.device.createBuffer({\r\n        size: nodeLength * 4 * 4,\r\n        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\r\n      });\r\n\r\n      commandEncoder.copyBufferToBuffer(\r\n        this.nodeDataBuffer,\r\n        0,\r\n        this.positionReadBuffer,\r\n        0,\r\n        nodeLength * 4 * 4\r\n      );\r\n\r\n      await this.device.queue.submit([commandEncoder.finish()]);\r\n\r\n      var start: number = performance.now();\r\n      await this.device.queue.onSubmittedWorkDone();\r\n      var end: number = performance.now();\r\n      console.log(`iteration time ${end - start}`);\r\n      iterationTimes.push(end - start);\r\n\r\n      // this.maxForceResultBuffer.unmap();\r\n      // Read all of the forces applied.\r\n      // await gpuReadBuffer.mapAsync(GPUMapMode.READ);\r\n      // const arrayBuffer = gpuReadBuffer.getMappedRange();\r\n      // var output = new Float32Array(arrayBuffer);\r\n      // console.log(output);\r\n      this.coolingFactor = this.coolingFactor * coolingFactor;\r\n    }\r\n\r\n    await this.positionReadBuffer.mapAsync(GPUMapMode.READ);\r\n    let positionArrayBuffer = this.positionReadBuffer.getMappedRange();\r\n    let positionList = new Float32Array(positionArrayBuffer);\r\n\r\n    let d3Format = this.formatToD3Format(\r\n      positionList,\r\n      edgeList,\r\n      nodeLength,\r\n      edgeLength\r\n    );\r\n    let formattednodeList = d3Format.nodeArray;\r\n    let formattedEdgeList = d3Format.edgeArray;\r\n    console.log(formattedEdgeList.length);\r\n\r\n    console.log(formattednodeList, formattedEdgeList);\r\n    // console.log(formattednodeList, formattedEdgeList);\r\n    console.log(greadability(formattednodeList, formattedEdgeList));\r\n\r\n    var totalEnd = performance.now();\r\n    var iterAvg: number =\r\n      iterationTimes.reduce(function (a, b) {\r\n        return a + b;\r\n      }) / iterationTimes.length;\r\n    iterRef.current!.innerText = `Completed in ${\r\n      iterationTimes.length\r\n    } iterations with total time ${\r\n      totalEnd - totalStart\r\n    } and average iteration time ${iterAvg}`;\r\n  }\r\n}\r\n\r\nexport default ForceDirected;"]}