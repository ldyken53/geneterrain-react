{"version":3,"sources":["render.tsx"],"names":[],"mappings":"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","file":"render.js","sourcesContent":["import { Controller } from './ez_canvas_controller';\r\nimport TerrainGenerator from './terrain_generator';\r\nimport { display_2d_vert, display_2d_frag, node_vert, node_frag, edge_vert, edge_frag } from './wgsl';\r\nimport { saveAs } from 'file-saver'; \r\nimport ForceDirected from \"./force_directed\";\r\n\r\nclass Renderer {\r\n  public uniform2DBuffer: GPUBuffer | null = null;\r\n  public terrainGenerator: TerrainGenerator | null = null;\r\n  public forceDirected: ForceDirected | null = null;\r\n  public device: GPUDevice;\r\n  public bindGroup2D: GPUBindGroup | null = null;\r\n  public nodeBindGroup: GPUBindGroup | null = null;\r\n  public edgeBindGroup: GPUBindGroup | null = null;\r\n  public nodeDataBuffer: GPUBuffer | null = null;\r\n  public edgeDataBuffer: GPUBuffer | null = null;\r\n  public testFrame: (() => Promise<void>) | null = null;\r\n  public colorTexture: GPUTexture | null = null;\r\n  public viewBoxBuffer: GPUBuffer | null = null;\r\n  public nodePipeline: GPURenderPipeline | null = null;\r\n  public edgePipeline: GPURenderPipeline | null = null;\r\n  public nodeLength: number = 1;\r\n  public edgeLength: number = 1;\r\n  public rangeBuffer: GPUBuffer | null = null;\r\n  public nodeToggle: boolean = true;\r\n  public terrainToggle: boolean = false;\r\n  public edgeToggle: boolean = true;\r\n  public colormapImage: HTMLImageElement;\r\n  public outCanvasRef: React.RefObject<HTMLCanvasElement>;\r\n  public canvasSize: [number, number] | null = null;\r\n  public idealLength: number = 0.05;\r\n  public coolingFactor: number = 0.9;\r\n  public iterRef: React.RefObject<HTMLLabelElement>;\r\n  public edgeList: Array<number> = [0];\r\n\r\n  constructor(\r\n    adapter: GPUAdapter,\r\n    device: GPUDevice,\r\n    canvasRef: React.RefObject<HTMLCanvasElement>,\r\n    colormap: ImageBitmap,\r\n    colormapImage: HTMLImageElement,\r\n    outCanvasRef: React.RefObject<HTMLCanvasElement>,\r\n    fpsRef: React.RefObject<HTMLLabelElement>,\r\n    iterRef: React.RefObject<HTMLLabelElement>\r\n  ) {\r\n    this.iterRef = iterRef;\r\n    this.colormapImage = colormapImage;\r\n    this.outCanvasRef = outCanvasRef;\r\n    this.device = device;\r\n\r\n    // Check that canvas is active\r\n    if (canvasRef.current === null) return;\r\n    const context = canvasRef.current.getContext(\"webgpu\")!;\r\n\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    const presentationSize = [\r\n      canvasRef.current.clientWidth * devicePixelRatio,\r\n      canvasRef.current.clientHeight * devicePixelRatio,\r\n    ];\r\n    const presentationFormat = context.getPreferredFormat(adapter);\r\n    this.canvasSize = [canvasRef.current.width, canvasRef.current.height];\r\n\r\n    context.configure({\r\n      device,\r\n      format: presentationFormat,\r\n      compositingAlphaMode: \"premultiplied\",\r\n      size: presentationSize,\r\n    });\r\n\r\n    this.edgeList = [0];\r\n\r\n    this.edgeDataBuffer = device.createBuffer({\r\n      size: 4 * 4,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n      mappedAtCreation: true,\r\n    });\r\n\r\n    let edgeData = [0, 0, 0.01, 0.01];\r\n    new Float32Array(this.edgeDataBuffer.getMappedRange()).set(edgeData);\r\n    this.edgeDataBuffer.unmap();\r\n\r\n    // setting it to some trivial data so that it won't fail the pipeline before edge data is available\r\n\r\n    this.edgePipeline = device.createRenderPipeline({\r\n      vertex: {\r\n        module: device.createShaderModule({\r\n          code: edge_vert,\r\n        }),\r\n        entryPoint: \"main\",\r\n        buffers: [\r\n          {\r\n            arrayStride: 2 * 4 * 1,\r\n            attributes: [\r\n              {\r\n                format: \"float32x2\" as GPUVertexFormat,\r\n                offset: 0,\r\n                shaderLocation: 0,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      fragment: {\r\n        module: device.createShaderModule({\r\n          code: edge_frag,\r\n        }),\r\n        entryPoint: \"main\",\r\n        targets: [\r\n          {\r\n            format: presentationFormat,\r\n            blend: {\r\n              color: {\r\n                srcFactor: \"one\" as GPUBlendFactor,\r\n                dstFactor: \"one-minus-src-alpha\" as GPUBlendFactor,\r\n              },\r\n              alpha: {\r\n                srcFactor: \"one\" as GPUBlendFactor,\r\n                dstFactor: \"one-minus-src-alpha\" as GPUBlendFactor,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      primitive: {\r\n        topology: \"line-list\", //triangle-list is default\r\n      },\r\n      multisample: {\r\n        count: 4,\r\n      },\r\n    });\r\n\r\n    this.rangeBuffer = this.device.createBuffer({\r\n      size: 2 * 4,\r\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n    });\r\n\r\n    var nodePositionBuffer = device.createBuffer({\r\n      size: 6 * 2 * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n\r\n    new Float32Array(nodePositionBuffer.getMappedRange()).set([\r\n      1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1,\r\n    ]);\r\n    nodePositionBuffer.unmap();\r\n    var edgePositionBuffer = device.createBuffer({\r\n      size: 2 * 2 * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(edgePositionBuffer.getMappedRange()).set([0, 0, 1, 1]);\r\n    edgePositionBuffer.unmap();\r\n\r\n    this.nodeDataBuffer = device.createBuffer({\r\n      size: 4 * 4,\r\n      usage:\r\n        GPUBufferUsage.STORAGE |\r\n        GPUBufferUsage.COPY_DST |\r\n        GPUBufferUsage.COPY_SRC,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(this.nodeDataBuffer.getMappedRange()).set([\r\n      0.5, 0.5, 0.5, 0.5,\r\n    ]);\r\n    this.nodeDataBuffer.unmap();\r\n\r\n    this.nodePipeline = device.createRenderPipeline({\r\n      vertex: {\r\n        module: device.createShaderModule({\r\n          code: node_vert,\r\n        }),\r\n        entryPoint: \"main\",\r\n        buffers: [\r\n          {\r\n            arrayStride: 2 * 4,\r\n            attributes: [\r\n              {\r\n                format: \"float32x2\" as GPUVertexFormat,\r\n                offset: 0,\r\n                shaderLocation: 0,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      fragment: {\r\n        module: device.createShaderModule({\r\n          code: node_frag,\r\n        }),\r\n        entryPoint: \"main\",\r\n        targets: [\r\n          {\r\n            format: presentationFormat,\r\n            blend: {\r\n              color: {\r\n                srcFactor: \"one\" as GPUBlendFactor,\r\n                dstFactor: \"one-minus-src-alpha\" as GPUBlendFactor,\r\n              },\r\n              alpha: {\r\n                srcFactor: \"one\" as GPUBlendFactor,\r\n                dstFactor: \"one-minus-src-alpha\" as GPUBlendFactor,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      primitive: {\r\n        topology: \"triangle-list\",\r\n      },\r\n      multisample: {\r\n        count: 4,\r\n      },\r\n    });\r\n\r\n    const pipeline = device.createRenderPipeline({\r\n      vertex: {\r\n        module: device.createShaderModule({\r\n          code: display_2d_vert,\r\n        }),\r\n        entryPoint: \"main\",\r\n        buffers: [\r\n          {\r\n            arrayStride: 4 * 4,\r\n            attributes: [\r\n              {\r\n                format: \"float32x4\" as GPUVertexFormat,\r\n                offset: 0,\r\n                shaderLocation: 0,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      fragment: {\r\n        module: device.createShaderModule({\r\n          code: display_2d_frag,\r\n        }),\r\n        entryPoint: \"main\",\r\n        targets: [\r\n          {\r\n            format: presentationFormat,\r\n          },\r\n        ],\r\n      },\r\n      primitive: {\r\n        topology: \"triangle-list\",\r\n      },\r\n      multisample: {\r\n        count: 4,\r\n      },\r\n    });\r\n\r\n    // Vertices to render\r\n    var dataBuf2D = device.createBuffer({\r\n      size: 6 * 4 * 4,\r\n      usage: GPUBufferUsage.VERTEX,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(dataBuf2D.getMappedRange()).set([\r\n      1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      1,\r\n      0,\r\n      1, // position\r\n      1,\r\n      -1,\r\n      0,\r\n      1, // position\r\n      -1,\r\n      1,\r\n      0,\r\n      1, // position\r\n      1,\r\n      1,\r\n      0,\r\n      1, // position\r\n    ]);\r\n    dataBuf2D.unmap();\r\n\r\n    // Set up uniform buffers for bind group\r\n    this.uniform2DBuffer = device.createBuffer({\r\n      size: 2 * 4,\r\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n    });\r\n    device.queue.writeBuffer(\r\n      this.uniform2DBuffer,\r\n      0,\r\n      new Float32Array([0.8, 0.2]),\r\n      0,\r\n      2\r\n    );\r\n    const imageSizeBuffer = device.createBuffer({\r\n      size: 2 * 4,\r\n      usage: GPUBufferUsage.UNIFORM,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Uint32Array(imageSizeBuffer.getMappedRange()).set(this.canvasSize!);\r\n    imageSizeBuffer.unmap();\r\n\r\n    // Load colormap texture\r\n    this.colorTexture = device.createTexture({\r\n      size: [colormap.width, colormap.height, 1],\r\n      format: \"rgba8unorm\",\r\n      usage:\r\n        GPUTextureUsage.TEXTURE_BINDING |\r\n        GPUTextureUsage.COPY_DST |\r\n        GPUTextureUsage.RENDER_ATTACHMENT,\r\n    });\r\n    device.queue.copyExternalImageToTexture(\r\n      { source: colormap },\r\n      { texture: this.colorTexture },\r\n      [colormap.width, colormap.height, 1]\r\n    );\r\n\r\n    this.terrainGenerator = new TerrainGenerator(\r\n      device,\r\n      this.canvasSize![0],\r\n      this.canvasSize![1]\r\n    );\r\n    this.forceDirected = new ForceDirected(device);\r\n\r\n    this.bindGroup2D = device.createBindGroup({\r\n      layout: pipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: this.colorTexture.createView(),\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.terrainGenerator.pixelValueBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 2,\r\n          resource: {\r\n            buffer: this.uniform2DBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 3,\r\n          resource: {\r\n            buffer: imageSizeBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    this.viewBoxBuffer = device.createBuffer({\r\n      size: 4 * 4,\r\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n    });\r\n    device.queue.writeBuffer(\r\n      this.viewBoxBuffer,\r\n      0,\r\n      new Float32Array([0, 0, 1, 1]),\r\n      0,\r\n      4\r\n    );\r\n    var translation = [0, 0, 1, 1];\r\n    var newTranslation = [0, 0, 1, 1];\r\n    var controller = new Controller();\r\n    var terrainGenerator = this.terrainGenerator;\r\n    var render = this;\r\n    controller.mousemove = function (prev, cur, evt) {\r\n      if (evt.buttons == 1) {\r\n        var change = [\r\n          ((cur[0] - prev[0]) * (translation[2] - translation[0])) /\r\n            render.canvasSize![0],\r\n          ((prev[1] - cur[1]) * (translation[3] - translation[1])) /\r\n            render.canvasSize![1],\r\n        ];\r\n        newTranslation = [\r\n          newTranslation[0] - change[0],\r\n          newTranslation[1] - change[1],\r\n          newTranslation[2] - change[0],\r\n          newTranslation[3] - change[1],\r\n        ];\r\n        if (\r\n          Math.abs(newTranslation[0] - translation[0]) >\r\n            0.03 * (translation[2] - translation[0]) ||\r\n          Math.abs(newTranslation[1] - translation[1]) >\r\n            0.03 * (translation[3] - translation[1])\r\n        ) {\r\n          translation = newTranslation;\r\n          if (render.terrainToggle) {\r\n            terrainGenerator!.computeTerrain(\r\n              undefined,\r\n              undefined,\r\n              translation,\r\n              render.rangeBuffer,\r\n              render.nodeLength\r\n            );\r\n          }\r\n          device.queue.writeBuffer(\r\n            render.viewBoxBuffer!,\r\n            0,\r\n            new Float32Array(translation),\r\n            0,\r\n            4\r\n          );\r\n        }\r\n      }\r\n    };\r\n    controller.wheel = function (amt) {\r\n      var change = [amt / 1000, amt / 1000];\r\n      newTranslation = [\r\n        newTranslation[0] + change[0],\r\n        newTranslation[1] + change[1],\r\n        newTranslation[2] - change[0],\r\n        newTranslation[3] - change[1],\r\n      ];\r\n      if (\r\n        newTranslation[2] - newTranslation[0] > 0.01 &&\r\n        newTranslation[3] - newTranslation[1] > 0.01\r\n      ) {\r\n        translation = newTranslation;\r\n        if (render.terrainToggle) {\r\n          terrainGenerator!.computeTerrain(\r\n            undefined,\r\n            undefined,\r\n            translation,\r\n            render.rangeBuffer,\r\n            render.nodeLength\r\n          );\r\n        }\r\n        device.queue.writeBuffer(\r\n          render.viewBoxBuffer!,\r\n          0,\r\n          new Float32Array(translation),\r\n          0,\r\n          4\r\n        );\r\n      } else {\r\n        newTranslation = translation;\r\n      }\r\n    };\r\n    controller.registerForCanvas(canvasRef.current);\r\n    this.nodeBindGroup = device.createBindGroup({\r\n      layout: this.nodePipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: {\r\n            buffer: this.viewBoxBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.nodeDataBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    this.edgeBindGroup = device.createBindGroup({\r\n      layout: this.edgePipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: {\r\n            buffer: this.viewBoxBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.nodeDataBuffer,\r\n          },\r\n        },\r\n        {\r\n          binding: 2,\r\n          resource: {\r\n            buffer: this.edgeDataBuffer,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    const texture = device.createTexture({\r\n      size: presentationSize,\r\n      sampleCount: 4,\r\n      format: presentationFormat,\r\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n    });\r\n    const view = texture.createView();\r\n\r\n    var render = this;\r\n    var frameCount = 0;\r\n    var timeToSecond = 1000;\r\n\r\n    async function frame() {\r\n      var start = performance.now();\r\n      // Sample is no longer the active page.\r\n      if (!canvasRef.current) return;\r\n\r\n      const commandEncoder = device.createCommandEncoder();\r\n\r\n      const renderPassDescriptor: GPURenderPassDescriptor = {\r\n        colorAttachments: [\r\n          {\r\n            view,\r\n            resolveTarget: context.getCurrentTexture().createView(),\r\n            loadValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\r\n            storeOp: \"discard\" as GPUStoreOp,\r\n          },\r\n        ],\r\n      };\r\n\r\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\r\n      if (render.terrainToggle) {\r\n        passEncoder.setPipeline(pipeline);\r\n        passEncoder.setVertexBuffer(0, dataBuf2D);\r\n        passEncoder.setBindGroup(0, render.bindGroup2D!);\r\n        passEncoder.draw(6, 1, 0, 0);\r\n      }\r\n      if (render.edgeToggle) {\r\n        passEncoder.setPipeline(render.edgePipeline!);\r\n        passEncoder.setVertexBuffer(0, edgePositionBuffer);\r\n        passEncoder.setBindGroup(0, render.edgeBindGroup!);\r\n        passEncoder.draw(2, render.edgeLength, 0, 0);\r\n      }\r\n      if (render.nodeToggle) {\r\n        passEncoder.setPipeline(render.nodePipeline!);\r\n        passEncoder.setVertexBuffer(0, nodePositionBuffer);\r\n        passEncoder.setBindGroup(0, render.nodeBindGroup!);\r\n        passEncoder.draw(6, render.nodeLength, 0, 0);\r\n      }\r\n      passEncoder.endPass();\r\n\r\n      device.queue.submit([commandEncoder.finish()]);\r\n      await device.queue.onSubmittedWorkDone();\r\n      // console.log(\"rendering task finished for\", render.edgeLength);\r\n      var end = performance.now();\r\n      if (timeToSecond - (end - start) < 0) {\r\n        fpsRef.current!.innerText = `FPS: ${frameCount}`;\r\n        timeToSecond = 1000 + (timeToSecond - (end - start));\r\n        frameCount = 0;\r\n      } else {\r\n        timeToSecond -= end - start;\r\n      }\r\n      frameCount += 1;\r\n      requestAnimationFrame(frame);\r\n    }\r\n\r\n    this.testFrame = async () => {\r\n      const commandEncoder = this.device.createCommandEncoder();\r\n\r\n      const renderPassDescriptor: GPURenderPassDescriptor = {\r\n        colorAttachments: [\r\n          {\r\n            view,\r\n            resolveTarget: context.getCurrentTexture().createView(),\r\n            loadValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\r\n            storeOp: \"discard\" as GPUStoreOp,\r\n          },\r\n        ],\r\n      };\r\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\r\n      passEncoder.setPipeline(this.edgePipeline!);\r\n      passEncoder.setVertexBuffer(0, edgePositionBuffer);\r\n      passEncoder.setBindGroup(0, this.edgeBindGroup!);\r\n      passEncoder.draw(2, this.edgeLength);\r\n      passEncoder.setPipeline(this.nodePipeline!);\r\n      passEncoder.setVertexBuffer(0, nodePositionBuffer);\r\n      passEncoder.setBindGroup(0, this.nodeBindGroup!);\r\n      passEncoder.draw(6, this.nodeLength);\r\n      passEncoder.endPass();\r\n\r\n      device.queue.submit([commandEncoder.finish()]);\r\n\r\n      await device.queue.onSubmittedWorkDone();\r\n      // await device.queue.onSubmittedWorkDone();\r\n    };\r\n\r\n    requestAnimationFrame(frame);\r\n  }\r\n\r\n  async setNodeEdgeData(nodeData: Array<number>, edgeData: Array<number>) {\r\n    this.edgeList = edgeData;\r\n    this.nodeDataBuffer!.destroy();\r\n    this.edgeDataBuffer!.destroy();\r\n    this.nodeDataBuffer = this.device.createBuffer({\r\n      size: nodeData.length * 4,\r\n      usage:\r\n        GPUBufferUsage.STORAGE |\r\n        GPUBufferUsage.COPY_DST |\r\n        GPUBufferUsage.COPY_SRC,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(this.nodeDataBuffer.getMappedRange()).set(nodeData);\r\n    this.nodeDataBuffer.unmap();\r\n    this.edgeDataBuffer = this.device.createBuffer({\r\n      size: edgeData.length * 4,\r\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Uint32Array(this.edgeDataBuffer.getMappedRange()).set(edgeData);\r\n    this.edgeDataBuffer.unmap();\r\n    this.edgeBindGroup = this.device.createBindGroup({\r\n      layout: this.edgePipeline!.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: {\r\n            buffer: this.viewBoxBuffer!,\r\n          },\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.nodeDataBuffer!,\r\n          },\r\n        },\r\n        {\r\n          binding: 2,\r\n          resource: {\r\n            buffer: this.edgeDataBuffer!,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    this.nodeBindGroup = this.device.createBindGroup({\r\n      layout: this.nodePipeline!.getBindGroupLayout(0),\r\n      entries: [\r\n        {\r\n          binding: 0,\r\n          resource: {\r\n            buffer: this.viewBoxBuffer!,\r\n          },\r\n        },\r\n        {\r\n          binding: 1,\r\n          resource: {\r\n            buffer: this.nodeDataBuffer!,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    this.edgeLength = edgeData.length;\r\n    this.nodeLength = nodeData.length / 4;\r\n    await this.testFrame!();\r\n    // this.terrainGenerator!.computeTerrain(this.nodeDataBuffer, undefined, undefined, this.rangeBuffer, this.nodeLength);\r\n  }\r\n\r\n  setWidthFactor(widthFactor: number) {\r\n    this.terrainGenerator!.computeTerrain(\r\n      undefined,\r\n      widthFactor,\r\n      undefined,\r\n      this.rangeBuffer,\r\n      this.nodeLength\r\n    );\r\n  }\r\n\r\n  setPeakValue(value: number) {\r\n    this.device.queue.writeBuffer(\r\n      this.uniform2DBuffer!,\r\n      0,\r\n      new Float32Array([value]),\r\n      0,\r\n      1\r\n    );\r\n  }\r\n\r\n  setValleyValue(value: number) {\r\n    this.device.queue.writeBuffer(\r\n      this.uniform2DBuffer!,\r\n      4,\r\n      new Float32Array([value]),\r\n      0,\r\n      1\r\n    );\r\n  }\r\n\r\n  setCoolingFactor(value: number) {\r\n    this.coolingFactor = value;\r\n  }\r\n\r\n  setIdealLength(value: number) {\r\n    this.idealLength = value;\r\n  }\r\n\r\n  setGlobalRange() {\r\n    if (this.rangeBuffer) {\r\n      this.rangeBuffer = null;\r\n    } else {\r\n      this.rangeBuffer = this.device.createBuffer({\r\n        size: 2 * 4,\r\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n      });\r\n    }\r\n  }\r\n\r\n  async runForceDirected() {\r\n    this.forceDirected!.runForces(\r\n      this.nodeDataBuffer!,\r\n      this.edgeDataBuffer!,\r\n      this.nodeLength,\r\n      this.edgeLength,\r\n      this.coolingFactor,\r\n      this.idealLength,\r\n      87,\r\n      100,\r\n      this.iterRef,\r\n      this.edgeList\r\n    );\r\n  }\r\n\r\n  toggleTerrainLayer() {\r\n    this.terrainToggle = !this.terrainToggle;\r\n  }\r\n\r\n  toggleNodeLayer() {\r\n    this.nodeToggle = !this.nodeToggle;\r\n  }\r\n\r\n  toggleEdgeLayer() {\r\n    this.edgeToggle = !this.edgeToggle;\r\n  }\r\n\r\n  setColormap(colormap, colormapImage) {\r\n    this.device.queue.copyExternalImageToTexture(\r\n      { source: colormap },\r\n      { texture: this.colorTexture! },\r\n      [colormap.width, colormap.height, 1]\r\n    );\r\n    this.colormapImage = colormapImage;\r\n  }\r\n\r\n  async onSave() {\r\n    var height = this.outCanvasRef.current!.height;\r\n    var width = this.outCanvasRef.current!.width;\r\n    const gpuReadBuffer = this.device.createBuffer({\r\n      size: width * height * 4,\r\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\r\n    });\r\n    console.log(width, height);\r\n    var commandEncoder = this.device.createCommandEncoder();\r\n    // Encode commands for copying buffer to buffer.\r\n    commandEncoder.copyBufferToBuffer(\r\n      this.terrainGenerator!.pixelValueBuffer /* source buffer */,\r\n      0 /* source offset */,\r\n      gpuReadBuffer /* destination buffer */,\r\n      0 /* destination offset */,\r\n      width * height * 4 /* size */\r\n    );\r\n\r\n    // Submit GPU commands.\r\n    const gpuCommands = commandEncoder.finish();\r\n    this.device.queue.submit([gpuCommands]);\r\n\r\n    // Read buffer.\r\n    await gpuReadBuffer.mapAsync(GPUMapMode.READ);\r\n    const arrayBuffer = gpuReadBuffer.getMappedRange();\r\n    var output = new Float32Array(arrayBuffer);\r\n    var context = this.outCanvasRef.current!.getContext(\"2d\");\r\n    context!.drawImage(this.colormapImage, 0, 0);\r\n    var colorData = context!.getImageData(0, 0, 180, 1).data;\r\n    var imgData = context!.createImageData(width, height);\r\n    for (var i = 0; i < height; i++) {\r\n      for (var j = 0; j < width; j++) {\r\n        var index = j + i * width;\r\n        var colorIndex =\r\n          Math.trunc(output[j + (height - 1 - i) * width] * 180) * 4;\r\n        imgData.data[index * 4] = colorData[colorIndex];\r\n        imgData.data[index * 4 + 1] = colorData[colorIndex + 1];\r\n        imgData.data[index * 4 + 2] = colorData[colorIndex + 2];\r\n        imgData.data[index * 4 + 3] = colorData[colorIndex + 3];\r\n      }\r\n    }\r\n    context!.putImageData(imgData, 0, 0);\r\n    this.outCanvasRef.current!.toBlob(function (b) {\r\n      saveAs(b!, `terrain.png`);\r\n    }, \"image/png\");\r\n  }\r\n}\r\nexport default Renderer;\r\n\r\n"]}