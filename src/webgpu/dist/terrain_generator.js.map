{"version":3,"sources":["terrain_generator.ts"],"names":[],"mappings":"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","file":"terrain_generator.js","sourcesContent":["import { compute_terrain, normalize_terrain } from './wgsl';\r\n\r\nclass TerrainGenerator {\r\n    public rangeBuffer : GPUBuffer;\r\n    public pixelValueBuffer : GPUBuffer;\r\n    public paramsBuffer : GPUBuffer;\r\n    public nodeDataBuffer : GPUBuffer;\r\n    public device : GPUDevice;\r\n    public width : number;\r\n    public height : number;\r\n    public computeTerrainPipeline : GPUComputePipeline;\r\n    public normalizeTerrainPipeline : GPUComputePipeline;\r\n    public computeTerrainBGLayout : GPUBindGroupLayout;\r\n    public normalizeTerrainBGLayout : GPUBindGroupLayout;\r\n    \r\n    constructor(device : GPUDevice, width, height) {\r\n        this.device = device;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.nodeDataBuffer = this.device.createBuffer({\r\n            size: 16,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\r\n        });\r\n        this.rangeBuffer = this.device.createBuffer({\r\n            size: 2 * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n        });\r\n\r\n        var storage : GPUBufferBindingType = \"storage\";\r\n        var uniform : GPUBufferBindingType = \"uniform\";\r\n        this.computeTerrainBGLayout = device.createBindGroupLayout({\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: {\r\n                        type: storage,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: {\r\n                        type: uniform,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: {\r\n                        type: storage,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 3,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: {\r\n                        type: storage,\r\n                    }\r\n                }\r\n            ],\r\n        });\r\n\r\n        this.computeTerrainPipeline = device.createComputePipeline({\r\n            layout: device.createPipelineLayout({\r\n                bindGroupLayouts: [this.computeTerrainBGLayout],\r\n            }),\r\n            compute: {\r\n                module: device.createShaderModule({\r\n                    code: compute_terrain,\r\n                }),\r\n                entryPoint: \"main\",\r\n            },\r\n        });\r\n\r\n        this.normalizeTerrainBGLayout = device.createBindGroupLayout({\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: {\r\n                        type: storage,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: {\r\n                        type: uniform,\r\n                    }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: {\r\n                        type: storage,\r\n                    }\r\n                }\r\n            ],\r\n        });\r\n\r\n        this.normalizeTerrainPipeline = device.createComputePipeline({\r\n            layout: device.createPipelineLayout({\r\n                bindGroupLayouts: [this.normalizeTerrainBGLayout],\r\n            }),\r\n            compute: {\r\n                module: device.createShaderModule({\r\n                    code: normalize_terrain,\r\n                }),\r\n                entryPoint: \"main\",\r\n            },\r\n        });\r\n\r\n        // Create a buffer to store the params, output, and min/max\r\n        this.paramsBuffer = device.createBuffer({\r\n            size: 8 * 4,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        });\r\n\r\n        this.pixelValueBuffer = device.createBuffer({\r\n            size: this.width * this.height * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n        });\r\n    }\r\n\r\n    computeTerrain(nodeDataBuffer = this.nodeDataBuffer, widthFactor = 1000, translation = [0, 0, 1, 1], globalRange : null | GPUBuffer = null, nodeLength : number = 0) {\r\n      if (nodeLength == 0) {\r\n        return;\r\n      }\r\n      this.nodeDataBuffer = nodeDataBuffer;\r\n\r\n      // Have to reset range buffer unless global range checked\r\n      if (!globalRange) {\r\n        this.rangeBuffer = this.device.createBuffer({\r\n          size: 2 * 4,\r\n          usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n        });\r\n      } else {\r\n        this.rangeBuffer = globalRange;\r\n      }\r\n\r\n      // Set up params (image width, height, node length, and width factor)\r\n      var upload = this.device.createBuffer({\r\n        size: 8 * 4,\r\n        usage: GPUBufferUsage.COPY_SRC,\r\n        mappedAtCreation: true,\r\n      });\r\n\r\n      var mapping = upload.getMappedRange();\r\n      new Uint32Array(mapping).set([this.width, this.height, nodeLength]);\r\n      new Float32Array(mapping).set(\r\n        [\r\n          widthFactor,\r\n          translation[0],\r\n          translation[1],\r\n          translation[2],\r\n          translation[3],\r\n        ],\r\n        3\r\n      );\r\n      upload.unmap();\r\n      //this.device.createQuerySet({})\r\n      var commandEncoder = this.device.createCommandEncoder();\r\n      //commandEncoder.writeTimestamp();\r\n      commandEncoder.copyBufferToBuffer(upload, 0, this.paramsBuffer, 0, 8 * 4);\r\n      // Create bind group\r\n      var bindGroup = this.device.createBindGroup({\r\n        layout: this.computeTerrainBGLayout,\r\n        entries: [\r\n          {\r\n            binding: 0,\r\n            resource: {\r\n              buffer: this.nodeDataBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 1,\r\n            resource: {\r\n              buffer: this.paramsBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 2,\r\n            resource: {\r\n              buffer: this.pixelValueBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 3,\r\n            resource: {\r\n              buffer: this.rangeBuffer,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n\r\n      // Run compute terrain pass\r\n      var pass = commandEncoder.beginComputePass();\r\n      pass.setBindGroup(0, bindGroup);\r\n      pass.setPipeline(this.computeTerrainPipeline);\r\n      pass.dispatch(this.width, this.height, 1);\r\n      //commandEncoder.writeTimestamp();\r\n      // await this.device.queue.onSubmittedWorkDone();\r\n\r\n      // Look into submitting normalization and compute in one pass to improve speed, remove synchronizations\r\n      // Use writetimestamp for more accurate kernel timing\r\n\r\n      // Run normalize terrain pass\r\n      var bindGroup = this.device.createBindGroup({\r\n        layout: this.normalizeTerrainBGLayout,\r\n        entries: [\r\n          {\r\n            binding: 0,\r\n            resource: {\r\n              buffer: this.pixelValueBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 1,\r\n            resource: {\r\n              buffer: this.paramsBuffer,\r\n            },\r\n          },\r\n          {\r\n            binding: 2,\r\n            resource: {\r\n              buffer: this.rangeBuffer,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      pass.setBindGroup(0, bindGroup);\r\n      pass.setPipeline(this.normalizeTerrainPipeline);\r\n      pass.dispatch(this.width, this.height, 1);\r\n      pass.endPass();\r\n      this.device.queue.submit([commandEncoder.finish()]);\r\n      // await this.device.queue.onSubmittedWorkDone();\r\n    }\r\n}\r\n\r\nexport default TerrainGenerator;"]}